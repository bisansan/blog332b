<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Image Kitchen v3.2分解&amp;打包 boot&amp;Recovery</title>
    <url>/posts/4f4a765c.html</url>
    <content><![CDATA[<p>客户端包含Windows Linux Android（REC卡刷）<br>这里只讲一下在windows端的操作方法：</p>
<p>1）下载并解压缩附件（Android.Image.Kitchen.v1.8-Win32.zip）<br>2）在CMD中使用命令：unpackimg ，或者可以拖放img到unpackimg.bat。 这将分解img并解压到ramdisk的一个子目录中。<br>3）接下来你就可以XXOO ramdisk了，按你喜欢的姿势、方式去XXOO。<br>4）上面XXOO完成后，直接点击repackimg.bat（repackimg.bat 这个批处理脚本不需要输入命令，只要点击运行）。可以直接打包成image-new.img文件。</p>
<p>5）最后支持cleanup.bat来清理文件夹并重置为初始状态，消除以下文件与文件夹：split_img + ramdisk的目录和任何新的打包的ramdisk或img文件。</p>
<p>链接: <a href="https://pan.baidu.com/s/1FC0l6zi3Je2bREhxFJhqQw">https://pan.baidu.com/s/1FC0l6zi3Je2bREhxFJhqQw</a> 密码: sww4<br><img src="http://post.332b.com/usr/uploads/2018/03/1090277441.png" alt="15887885545.png" title="15887885545.png"></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
  </entry>
  <entry>
    <title>Bitvise SSH Client  7.36 Putty + Winscp结合体</title>
    <url>/posts/1ab6e12b.html</url>
    <content><![CDATA[<p>WINSCP+PUTTY结合体，可惜是纯英文，没有中文，功能很多需要有一定的英文基础</p>
<p>链接: <a href="https://pan.baidu.com/s/1nwM4sxb">https://pan.baidu.com/s/1nwM4sxb</a> 密码: xzqi</p>
<p><img src="http://post.332b.com/usr/uploads/2018/03/2340276161.png" alt="20180118172903-300x149.png" title="20180118172903-300x149.png"></p>
]]></content>
      <categories>
        <category>软件工具</category>
      </categories>
  </entry>
  <entry>
    <title>CrossOver 16.2.0 Centos 和 Ubuntu安装文件</title>
    <url>/posts/969aa2f5.html</url>
    <content><![CDATA[<p>有经济能力，最好是能支持正版CrossOver，不贵也才149元，下载后解压出crack文件夹里面的winewrapper.exe.so，拷贝到/opt/cxoffice/lib/wine/目录下，然后就ok了。</p>
<p>购买地址：<a href="http://www.mairuan.com/crossover/1326.html">http://www.mairuan.com/crossover/1326.html</a><br>官网：<a href="https://www.codeweavers.com/">https://www.codeweavers.com/</a><br>链接：<a href="https://pan.baidu.com/s/1SinreQIyNgVJyNKuCMzO4w">https://pan.baidu.com/s/1SinreQIyNgVJyNKuCMzO4w</a> 密码：4udj</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>其他Linux系统</category>
        <category>其他分类</category>
      </categories>
  </entry>
  <entry>
    <title>Linux    命令</title>
    <url>/posts/b0ba923a.html</url>
    <content><![CDATA[<h2 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h2><p>cmp diff 对比文件差异<br>diffstat 读取diff的输出结果<br>file 查看文件类型<br>find（直接在文件中查找）locate（在数据库中查找） 查找文件<br>updatedb 更新locate数据库<br>indent 格式化C语言代码<br>cut 截取指定范围的字符显示<br>ln 建立软链接和硬链接<br>cat（适合小文件，大文件打开慢） less（适合大文件，打开快，可以随意翻页） more（适合大文件，打开慢，只能向后翻页） 查看文件<br>mktemp 建立缓存文件<br>mv 移动文件或者目录<br>od（不熟） 指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来<br>paste 合并文件<br>patch 命令用于修补文件<br>rcp 复制远程文件到本地<br>scp 复制本地文件到远程<br>$ scp local_file remote_username@remote_ip:remote_folder<br>rm 删除文件或者目录<br>split 将单个文件分割成多个文件<br>tee 将用户输入的内容保存到文件中<br>tmpwatch 删除缓存文件（可以指定条件）<br>touch 修改文件或目录时间属性，如果文件不存在，则会创造文件<br>umask （不熟）命令指定在建立文件时预设的权限掩码<br>cp 复制文件或者目录<br>which 在环境变量$path设置的目录中，查找对应命令的执行文件位置<br>$ which bash</p>
<p>/bin/bash</p>
<p>whereis 效果同上 ，不但会找出执行文件的位置，还有原始代码、二进制文件，或是帮助文件<br>$ whereis bash</p>
<p>bash: /bin/bash /etc/bash.bashrc /mnt/c/Windows/System32/bash.exe /usr/share/man/man1/bash.1.gz</p>
<p>rhmask 加密或者解密文件<br>awk 高级脚本匹配字符串，同类型有sed grep</p>
<h2 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h2><p>col 过滤控制字符 例如：/n /t<br>colrm 过滤指定行数控制字符<br>comm 文本对比<br>csplit 分割文件<br>ed 简单文本编辑器<br>egrep 查找字符串<br>fgrep 查找文件里符合条件的字符串<br>rgrep 递归查询字符串<br>ex 以ex模式启动vim<br>fmt fold 编排指定文件，例如：指定每行文件字数<br>grep 查找字符串<br>ispell 检查拼写，字典数据文件/usr/lib/ispell/english.hash<br>jed(不熟) 用来编辑程序原始代码<br>joe(不熟) 文本编辑器<br>join 文本对比<br>look 查找每行首字符<br>pico 文本编辑器<br>sed 多功能编辑文本<br>sort 文本排序<br>spell 检查拼写<br>tr 替换字符<br>expr（常用） 手工命令行计数器，用于在UNIX/LINUX下求表达式变量的值，一般用于整数值，也可用于字符串。<br>uniq 删除相同行<br>wc 统计数字<br>let 表达式</p>
<h2 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h2><p>bye ftp模式下，中断ftp连接<br>ftp ftp访问文件<br>uuto uupick uucp uucico unix之间传送文件<br>tftp tftp传输文件</p>
<h2 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h2><p>cd 进入目录<br>df 统计磁盘使用情况<br>dirs 显示目录路径<br>dir 显示所有目录文件<br>du 显示文件大小<br>edquota 编辑用户或群组磁盘配额<br>eject 卸载或退出设备，例如SD卡<br>mkdir 建立文件夹<br>mlabel（不熟） 命令用于设定磁盘的标签 (Label)<br>mount 挂载文件或者分区<br>unmount 卸载文件或分区<br>pwd 显示工作目录<br>quota（要安装工具） 命令用于显示磁盘已使用的空间与限制<br>quotacheck 命令用于检查磁盘的使用空间与限制<br>quotaoff 命令关闭磁盘空间限制<br>repquota 命令用于检查磁盘空间限制的状态<br>quotaon 命令用于开启磁盘空间限制<br>rmdir 删除空目录<br>rmt（不熟） 命令通过进程间通信远程控制磁带机<br>stat (不熟) 命令用于显示inode内容<br>tree（要安装工具） 命令用于以树状图列出目录的内容<br>ls 显示所有文件内容<br>lndir 命令用于连接目录内容（类似软链接）</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Path.resolve()   Node.js文件路径转化</title>
    <url>/posts/93471434.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; var path &#x3D; require(&#39;path&#39;)</span><br><span class="line">undefined</span><br><span class="line">&gt; path.resolve(&#39;.&#x2F;11&#39;)</span><br><span class="line">&#39;&#x2F;home&#x2F;witt&#x2F;11&#39;</span><br><span class="line">&gt; path.resolve(&#39;111&#39;)</span><br><span class="line">&#39;&#x2F;home&#x2F;witt&#x2F;111&#39;</span><br><span class="line">&gt; path.resolve(&#39;..&#x2F;1111&#39;)</span><br><span class="line">&#39;&#x2F;home&#x2F;1111&#39;</span><br><span class="line">&gt; path.resolve(&#39;root&#39;,&#39;111&#39;)</span><br><span class="line">&#39;&#x2F;home&#x2F;witt&#x2F;root&#x2F;111&#39;</span><br><span class="line">&gt; path.resolve(&#39;&#x2F;root&#39;,&#39;111&#39;)</span><br><span class="line">&#39;&#x2F;root&#x2F;111&#39;</span><br><span class="line">&gt; path.resolve(&#39;&#x2F;root&#x2F;&#39;,&#39;&#x2F;111&#x2F;&#39;)</span><br><span class="line">&#39;&#x2F;111&#39;</span><br><span class="line">&gt; path.resolve(&#39;a&#39;,&#39;&#x2F;b&#39;,&#39;c&#39;)</span><br><span class="line">&#39;&#x2F;b&#x2F;c&#39;</span><br></pre></td></tr></table></figure>

<p>由上面可以知道，字符串是可以拼接路徑的</p>
<p>path.resolve可以接受多個參數來進行拼接路徑，當它沒有參數時測輸出當前路基</p>
<p>如果是有參數加入</p>
<p>./和字符前面不加符号代表和当前路径进行拼接</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;./11&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/home/witt/11&#x27;</span></span><br><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/home/witt/111&#x27;</span></span><br></pre></td></tr></table></figure>

<p>只有斜杠/代表绝对路径，当有多个参数时候，有多个绝对路径，以最后一个为主，和后面的进行拼接</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;/root&#x27;</span>,<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/root/111&#x27;</span></span><br><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;/root/&#x27;</span>,<span class="string">&#x27;/111/&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/111&#x27;</span></span><br><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;/b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/b/c&#x27;</span></span><br></pre></td></tr></table></figure>

<p>当出现两个点加一个斜杠../当回到上一个目录</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt; path.<span class="built_in">resolve</span>()</span><br><span class="line"><span class="string">&#x27;/home/witt&#x27;</span>        <span class="comment"> //输出的是当前目录</span></span><br><span class="line">&gt; path.<span class="built_in">resolve</span>(<span class="string">&#x27;../1111&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;/home/111&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Centos6.5系统yum安装apache2.4并配置目录浏览访问</title>
    <url>/posts/e4168f1d.html</url>
    <content><![CDATA[<p>第一步、安装第三方仓库，本地apache最新版为2.2.15，第三方为2.4.27 <code>yum install centos-release-scl</code> <code>rpm -Uvh http://mirror.webtatic.com/yum/el6/latest.rpm</code> 第二步、检查并安装的apache2.4 <code>yum search httpd24</code>     ##列出所有跟http2.4相关并可以安装的包 <code>yum install httpd24-httpd</code>   ##安装最新apache2.4 第三步、设置开机自动启动和开始服务 <code>chkconfig httpd24-httpd on</code>    ##设置开机启动 <code>service httpd24-httpd start</code>    ##启动apache 第四步、检查httpd是否启动，没有启动不显示任何东西，启动会显示tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN 1350/httpd <code>netstat -lnpgrep 80</code>   ##检查httpd是否启动 第五步、查找配置文件目录 <code>rpm -ql httpd24-httpd</code>   ##查找软件安装位置 <code>cd /opt/rh/httpd24/root/etc/httpd/conf.d</code>    ##进入配置目录 第六步、找到welcome.conf查找先这段话并注释掉 <code>&lt;LocationMatch &quot;^/+$&quot;&gt;</code> <code>    Options -Indexes</code> <code>    ErrorDocument 403 /.noindex.html</code> <code>&lt;/LocationMatch&gt;</code> 第七步、新建文件[你网站域名].conf，不要加点纯字母放在/opt/rh/httpd24/root/etc/httpd/conf.d目录 <code>&lt;VirtualHost *:80&gt;</code> <code>    DocumentRoot /home/www</code> <code>    ServerName xxx.com</code>    ###绑定域名 <code>&lt;/VirtualHost&gt;</code> <code>&lt;Directory &quot;/home/www&quot;&gt;</code> <code>    AllowOverride None</code> <code>    Options Indexes FollowSymLinks</code> <code>    # Allow open access:</code> <code>    Require all granted</code> <code>&lt;/Directory&gt;</code> <code>service httpd24-httpd restart</code>   ##重启httpd进程设置完成 检查服务的命令 <code>service --status-all</code> <code>service --status-all grep ntpd</code> <code>service --status-all less</code> <code>service httpd status</code></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>其他Linux系统</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7安装最新内核并启用BBR单边加速</title>
    <url>/posts/9c5d6626.html</url>
    <content><![CDATA[<p>1.安装第三方YUM仓库 <code>rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</code> <code>rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</code> 2.搜索最新的系统内核并安装 <code>yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</code> <code>yum --enablerepo=elrepo-kernel install kernel-ml</code> 3.生成新的启动文件，打开/etc/default/grub找到<code>GRUB_DEFAULT=save</code>修改为<code>GRUB_DEFAULT=0</code> <code>grub2-mkconfig -o /boot/grub2/grub.cfg</code> 4.重新启动vps输入<code>uname -a</code>即可看到最新内核，修改系统变量 <code>echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</code> 5.保存新规则并使其生效后，查看启动情况 <code>sysctl -p</code> <code>sysctl net.ipv4.tcp_available_congestion_control</code> 如果出现net.ipv4.tcp_available_congestion_control = reno cubic bbr，只要有bbr就算成功 6.查看端口是否启动成功 <code>lsmod grep bbr</code> 成功就会显示tcp_bbr               20480 6 7.默认启动内核修改方法 #1.查看启动项 <code>cat /boot/grub2/grub.cfg grep kernel-3.10.0-229</code> #1. 设置默认启动项 <code>grub2-set-default &quot;kernel-3.10.0-229&quot;</code> #3. 查看默认启动项 <code>grub2-editenv list</code> #4. 生成配置 <code>grub2-mkconfig -o /boot/grub2/grub.cfg</code> #备注： 在生成grub.cfg之前，最好先备份原始的grub.cfg文件 重新安装内核即可 yum -y update</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>其他Linux系统</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu16 用supervisor来守护我们的进程</title>
    <url>/posts/22d4e5c9.html</url>
    <content><![CDATA[<p>Ubuntu16的后台进程如果经常出现挂掉，那就让supervisor守护它吧,本篇文章是用最高权限root来执行，其他用户登陆请自己切换root或者在前面加上sudo 1.习惯性先更新源，再安装supervisor</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">apt update <span class="meta">&amp; apt install supervisor</span></span><br></pre></td></tr></table></figure>

<p>2.安装后并没有随开机自启，手动设置自动自启</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> supervisor </span><br></pre></td></tr></table></figure>

<p>3.下载我们的要后台执行的文件，并给权限</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span>xxxx.com/ </span><br><span class="line">chomd <span class="number">777</span> xxx  </span><br></pre></td></tr></table></figure>

<p>4.supervisor的守护进程在ubuntu默认是写成一个独立的配置文件，supervisor 的进程文件一般是放在 /etc/supervisor/conf.d/ 目录下，例如创建一个test.conf 进程配置文件。</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">[program:test]           ###program 为要运行的进程的名称###</span><br><span class="line">command=php artisan queue:work         ###command 为要执行的命令###</span><br><span class="line">directory=/var/www/html/wisdom         ###directory 要执行命令的目录###</span><br><span class="line">user=root                              ###user 运行的用户###</span><br></pre></td></tr></table></figure>

<p>5.supervisor常见的管理命令</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">supervisorctl reload           ###重启supervisor,让配置文件生效###</span><br><span class="line">supervisorctl startrestartstop  test       ###启动重启停止指定进程###</span><br></pre></td></tr></table></figure>

<p>相关的一些常用命令 1.防火墙的禁用和启动 <code>ufw disableenable</code> 2.卸载iptables命令 <code>apt-get remove iptables</code> 3.关闭防火墙的其余命令</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">iptables -<span class="keyword">P</span> INPUT <span class="keyword">ACC</span>EPT</span><br><span class="line">iptables -<span class="keyword">P</span> FORWARD <span class="keyword">ACC</span>EPT</span><br><span class="line">iptables -<span class="keyword">P</span> OUTPUT <span class="keyword">ACC</span>EPT</span><br><span class="line">iptables -F</span><br></pre></td></tr></table></figure>

<p>4.查看端口占用情况的命令 查看已经连接的服务端口（ESTABLISHED）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">netstat -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure>

<p>查看所有的服务端口（LISTEN，ESTABLISHED）</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat -ap</span></span><br></pre></td></tr></table></figure>

<p>查看指定端口，可以结合grep命令：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat</span> -ap  grep <span class="number">8080</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>centos命令yum install软件包时出现No package  *  available  解决</title>
    <url>/posts/1d9a4080.html</url>
    <content><![CDATA[<p>centos6  64位</p>
<p>wget <a href="http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm">http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</a></p>
<p>yum install epel-release-6-8.noarch.rpm</p>
<p>centos6  32位</p>
<p>wget <a href="http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm">http://dl.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm</a></p>
<p>yum install epel-release-6-8.noarch.rpm</p>
<p>centos7 64位</p>
<p>wget <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p>
<p>yum install epel-release-latest-7.noarch.rpm</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>其他Linux系统</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>CSS3学习：Transform 2D转换</title>
    <url>/posts/90c7f100.html</url>
    <content><![CDATA[<p>  顺时针旋转45度 transform: rotate(45deg);   控制x,y轴的偏移 transform: translate(100px,50px);   控制x,y轴的缩放 transform: scale(2,2);   需要进行多个属性的转换请用空格隔开，2D转换会改变原来的坐标系，例如你想先旋转后平移，结果并不是水平平移<a href="https://post.332b.com/wp-content/uploads/2019/03/2D%E8%BD%AC%E6%8D%A2.html">2D转换.html</a>   形变中心点 可以改变transform: rotate旋转的中心点，旋转一般是以自己的中心点作为旋转点 transform-origin:20px 0;  /*（X和Y轴）*/ 它可以用px、百分比和center,left等为单位   元素距离视图的距离 perspective: 500px; 注意：这个属性必须添加到旋转元素的父级元素   设置以X轴来旋转，默认是以Z轴 transform:rotateX(-180deg);   <a href="https://post.332b.com/wp-content/uploads/2019/03/%E5%9B%BE%E7%89%87%E5%80%BE%E6%96%9C.html">图片旋转.html</a></p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS学习：a标签伪类选择器和过渡模块</title>
    <url>/posts/67200049.html</url>
    <content><![CDATA[<p>a伪类选择器的必须放在标签后面，他们必须按照link&gt;visited&gt;active&gt;hover的循序来排序，否则无效，它也可以单个或者多个，但必须遵循默认排序规则 :link a:link 选择所有未被访问的链接。 :visited a:visited 选择所有已被访问的链接。 :active a:active 选择活动链接。 :hover a:hover 选择鼠标指针位于其上的链接。   transition  过渡属性 连写方式</p>
<p>transition: property duration timing-function delay;</p>
<p>property：CSS属性    duration：设置过渡时间    timing-function：过渡速度    delay：设置从多少秒开始 如果多个transition的过渡时间一样，可以设置为transition:all 0s 如果存在多个属性使用逗号和空格隔开，分别设置就可以了</p>
<pre><code>     &lt;style type=&quot;text/css&quot;&gt;
</code></pre>
<p>.d1 {<br>width: 100px;<br>height: 100px;<br>background: red;<br>transition-property: width, height, background;<br>transition-duration: 3s, 3s, 3s;<br>}<br>.d1:hover {<br>width: 300px;<br>height: 300px;<br>background: blue;<br>}<br></style></p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS学习：CSS三大特性</title>
    <url>/posts/3fbe4306.html</url>
    <content><![CDATA[<p><strong>继承特性：</strong> 父元素中的子元素，会继承父元素的属性，例如图片中的的div中子元素p标签就会继承父元素div的color标签，子元素的儿子也可以继承爷爷的属性 <img src="https://post.332b.com/wp-content/uploads/2019/01/20190119151500.png"> 但并不是所有的属性都会被继承，例如只有color、font-、text-和line都会被继承，其他的就不会继承； 1.a标签的下划线和字体颜色是不会继承的 2.h1-h6标签的字体大小是不会被继承的   <strong>层叠性</strong> 层叠性是css解决多个选择器同时选择同一个标签，设置了相同的css属性冲突的一种办法，它只有在冲突的时候才会产层叠性   <strong>优先级</strong> 1.是否直接选中（间接选中指的是继承性） 谁距离目标标签进，就会执行谁 2.相同选择器 谁排在最后面，就执行谁（css是从上到下开始执行） 3.不同类型的选择器指定同一个标签 它就会安装优先级来排序，谁大就听谁的 id&gt;类&gt;标签&gt;通配符&gt;继承&gt;浏览器默认 <strong>如果不同的选择器选择了同一个标签，它们中的css属性都不一样，那么它们就不会冲突并且都会得到执行；</strong>   <strong>调整优先级</strong> important关键字，调整不同类型的选择器指定同一个html标签样式的优先级，指定方式为!important</p>
<head>
    <meta charset="utf-8">
    <title>首页</title>
    <style type="text/css">
        #a123 {
            color: red;
        }
        .b123 {
            color: blue !important;
        }
    </style>
</head>
<body>
<p id='a123' class="b123">苹果真好吃</p>
</body>

<p>  <strong>权重的计算规则</strong></p>
<ol>
<li> 首先计算选择器中有多少个id，id多的选择器优先级最高</li>
<li> 如果id的个数一样，那么再看看类名的个数，类名个数多优先级最高</li>
<li> 如果类型的个数一样，那么再看看标签的名称个数。标签名称格式多的优先级最高</li>
<li> 如果id的个数一样，类名的个数一样，标签名称个数也一样，那么久不会再往下计算了，此时谁写在了后面就听谁的；</li>
</ol>
<p>只有直接选中的标签才有会权重优先级，继承或者间接是没有优先级的，通配符不算权重</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS学习：HTML定位流</title>
    <url>/posts/94c798a.html</url>
    <content><![CDATA[<p>z-index定义定位流中的层级关系 注意：这个属性不能再标准流中使用 相对定位      <code>position: relative;</code> 相对定位是相对于原来的位置偏移，他有上下左右方向，x轴（左右）和y轴（上下）都只能有一个方向 注意点： 1.相对定位是不脱离标准流，它会占用标准流的空间，并且它还区分行内元素、块级元素和行内块级元素 2.给相对定位元素设置padding和margin会影响它在标准流的布局，它的padding和margin是设置相对于没有偏移前的位置 3.它的只要作用是针对于元素进行微调和结合绝对定位进行结合使用   绝对定位        <code>position:absolute</code> 绝对定位是相对于body边框的定位，绝对定位的元素是浮动元素，所以它不区分行内、块级和行内块级元素 绝对定位的参考点 可以作为绝对定位的的参考点，有以下定位流可以，绝对定位、相对定位和固定定位，静态定位不可以作为绝对定位参考点 注意点 1.如果绝对定位以body为边框，那么它的定位会以当前窗口为标准，而不是整个body窗口的真实大小 <img src="https://post.332b.com/wp-content/uploads/2019/03/2019-03-08-14-17-35-%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"> 2.绝对元素只能以最靠近定位流为参考点，如果没有则以body为参考点 3.父元素的padding内边距不会影响绝对定位的位置   <strong>绝对定位元素水平居中</strong> 如何让一个<code>relative</code>中的<code>absolute</code> 水平居中 给<code>absolute</code>设置 left:50% margin-left:值为<code>relative</code> 盒子宽度的一般   固定定位                <code>position:fixed</code> 1.固定定位跟绝对元素一样，他也会和浮动元素脱落标准流 2.固定定位不会随着鼠标滚动而滚动，它的方向（left等等）都是相对于当前窗口而言 3.它还有类似的设置，背景设置background-attachment:fixed</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>浮动流排版：清楚默认边距和清除浮动的5种方式</title>
    <url>/posts/7146a28f.html</url>
    <content><![CDATA[<p>浮动流 是一种半脱离标准的排版方式 注意点： 1.浮动流中没有居中对齐，也没有center这个取值 2.浮动流中margin: 0 auto;是不能使用的   特点： 1.浮动流是不区分块级元素、行内元素和行内块级元素，并且他们都会可以设置长宽高   <strong>浮动元素脱标和它带来的影响</strong> 什么是浮动元素脱标？ 一个元素浮动之后，它就像是从标准流中删除了一样，这个就称之为浮动元素的脱标   它会有什么影响？ 当一个元素浮动后，后跟紧跟后面的一个元素如果没有浮动，那么这个元素就会盖住紧跟着的那个没有浮动的元素   浮动元素的贴靠现象</p>
<p>什么是浮动元素贴靠现象?<br>1.如果父元素的宽度能够显示所有浮动元素, 那么浮动的元素会并排显示<br>2.如果父元素的宽度不能显示所有浮动元素, 那么会从最后一个元开始往前贴靠<br>3.如果贴靠了前面所有浮动元素之后都不能显示, 最终会贴靠到父元素的边框底下</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/01/1.png">   浮动元素字围现象 浮动的元素不会盖住没有浮动元素中的文字，没有浮动元素中的文字会给浮动的元素让位置，字围效果可以用来做图文混排 <img src="https://post.332b.com/wp-content/uploads/2019/01/2.png"> <strong>清除浮动方式</strong> 例如下面代码，会向下面这样显示，因为它的p标签是浮动，div已经被清除了margin和padding，所以没有占面积，如果我们要清除浮动，下面就介绍清除方式 <img src="https://post.332b.com/wp-content/uploads/2019/01/20190125154627.png"></p>
 <style type="text/css">
           body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td {
            margin:0; padding:0;
        }
        .a1 {
            background-color: #00F7DE;

        }
        .a2 {
            background-color: #0000FF;
            /\* clear: left; \*/
        }
        .a3 {
            background-color: #00F7DE;

        }
        p {
            background-color: #00FF00;
            float: left;
        }
    </style>
</head>
<body>
<div class="a1">
    <p>aaaaa</p>
</div>
<div class="a2">
    <p>
        bbbbbbb
    </p>
</div>
<div class="a3">
    <p>
        cccccc
    </p>
</div>

<p>1.给div设置高度，例如给a1设置100的高度，后面的p标签就不会找它，但是因为我们在开发能不设置高度，就不要高度（这个方法不常用） <img src="https://post.332b.com/wp-content/uploads/2019/01/20190125154706.png"> 2.给p标签添加clear: left;，就会向下面这样显示，clear有both(两边都不要浮动),left（左不要浮动）,right（右边不要浮动） <img src="https://post.332b.com/wp-content/uploads/2019/01/20190125154930.png"> 3.内墙法和外墙法 他们的不同之处和相同点 他们两个共同点都是隔开两个元素，都需要如下的一个div代码，都可以让第二个盒子设置margin-top属性</p>
<div style="clear:both"></div>

<p>不同点 1.内墙法要在内部元素设置<div style="clear:both"></div>，外墙法则是在两个块级元素之间设置 2.内墙法可以让第一个元素设置margin-bottom，而外墙法不可以 3.内墙法可以撑起它设置的那个盒子的高度，而外墙法不可以   4.伪元素选择器</p>
<style type="text/css">
    div::after {
        content: "洗刷回溯爱之伤情"; /\* 只能添加字符串，不能添加html标签\*/
        width: 50px;
        height: 0px;
        background-color: #00FF00;
        display: block;    /\*作为块级元素\*/
        visibility: hidden;   /\* 设置是否隐藏\*/
    }
</style>
<div>我是文字</div>

<p>div::after 在div标签后面添加元素，div::before  在div标签前面添加元素</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>69-清除浮动方式四</title>
    <style>
        \*{
            margin: 0;
            padding: 0;
        }
        .box1{
            background-color: red;
            /\*margin-bottom: 10px;\*/
        }
        .box2{
            background-color: green;
            /\*margin-top: 10px;\*/
        }
        .box1 p{
            width: 100px;
            background-color: blue;
        }
        .box2 p{
            width: 100px;
            background-color: yellow;
        }
        p{
            float: left;
        }
        .box1::after{
            /\*设置添加的子元素的内容为空\*/
            content: "";
            /\*设置添加的子元素为块级元素\*/
            display: block;
            /\*设置添加的子元素的高度为0\*/
            height: 0;
            /\*设置添加的子元素看不见\*/
            visibility: hidden;
            /\*给添加的子元素设置clear: both;\*/
            clear: both;
        }
        .box1{
            /\*兼容IE6\*/
            \*zoom:1;
        }
    </style>
</head>
<body>
<!--
1.清除浮动的第四种方式
利用伪元素选择器清除浮动
本质上就是内墙法, 只不过是直接通过CSS代码添加了内墙, 其它特性和内墙法都一样

<p>注意点:<br>IE6中不支持这种方式, 为了兼容IE6必须给前面的盒子添加*zoom:1;属性<br>–&gt;</p>
<div class="box1">
    <p>我是文字1</p>
    <p>我是文字1</p>
    <p>我是文字1</p>
</div>

<div class="box2">
    <p>我是文字2</p>
    <p>我是文字2</p>
    <p>我是文字2</p>
</div>
</body>
</html>

<p>  5。就是直接在css添加overflow: hidden;，这个属性还可以 1.这个css属性可以清除浮动 2.可以将超出范围的内容裁剪 3.可以让里面的盒子设置margin-top，外面的盒子不被顶下来 解决IE6兼容：再添加*zoom:1;</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS学习：盒模型</title>
    <url>/posts/cb25ebcd.html</url>
    <content><![CDATA[<p><strong>边框属性</strong> 单独给某一个方向设置边框 上：border-top 下：border-bottom 左：border-left 右：border-right 给四个方向统一设置边框：border 他们的格式为border：边框宽度 边框样式 边框颜色 边框样式：<a href="http://www.w3school.com.cn/tiy/t.asp?f=csse_border-style">http://www.w3school.com.cn/tiy/t.asp?f=csse_border-style</a></p>
<p> border-top: 2px solid blue;</p>
<p>  同时给四个方向设置边框 给四个方向设置不同的颜色，依次排序是上、右、下、左</p>
<p>border-color: red pink yellow aliceblue;</p>
<p>给上下，左右各设置统一样式</p>
<p>border-color: red pink;</p>
<p>border-width   设置宽度，用法同上 border-style  设置样式，用法同上 他们的取值可以是none，就代表没有属性，最大左右是覆盖自己不想要的区域   内边距：padding 内容和边框之间的距离，它的用法和上面一样，padding也有padding-width、padding-style等等，不同的是 1.使用内边距之后，内边距会改变原边框的大小 2.内边框也会有背景颜色   外边距：margin 标签与标签之间的距离，它的用法和上面一样，margin也有margin-width、margin-style等等 外边距合并现象是指外边距在垂直方向时，两个标签同时有垂直方向外边距，那么标签外边距大的会覆盖小的； <a href="http://www.w3school.com.cn/css/css/_margin/_collapsing.asp">http://www.w3school.com.cn/css/css\_margin\_collapsing.asp</a>   margin注意点： 1.两个盒子是嵌套关系，里面的盒子设置了外边距，那么外面的盒子就会使用里盒子的外边距，而里面盒子的外边距不会改变，参考外边距合并 2.解决上面的方法是给外面的盒子设置边框，例如border: 5px solid #000;，就不会出现这种情况 3.在企业开发中，要控制嵌套关系首先考虑padding，再才考虑margin，margin的主要作用是用来控制兄弟关系之间的距离 margin设置水平居中方法：margin：0 auto；，垂直居中是无法使用margin实现的，它只能通过px像素控制   box-sizing   Css3推出的 box-sizing:border-box;可以将盒子放在一起，让它固定到一个圈子里面，不会出现到处跑的情况   清楚默认边距 事实上，很多标签在浏览器中都有默认边距，那么这样就不理于我们进行css定位，我可以可以通过以下方法清楚所有标签的默认边距 1.利用通配符去遍历每个标签，缺点是性能低</p>
<p>* {<br>    padding: 0px;<br>    margin: 0px;<br>}</p>
<p>2.利用下面CSS样式，直接屏蔽指定标签（推荐）</p>
<p>body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{<br>    margin:0;<br>    padding:0;<br>}</p>
<p>3.在html引入css样式，参考文档<a href="https://yuilibrary.com/yui/docs/cssreset/">https://yuilibrary.com/yui/docs/cssreset/</a></p>
<link rel\="stylesheet" type\="text/css" href\="http://yui.yahooapis.com/3.18.1/build/cssreset/cssreset-min.css"\>

<p>    行高line-height line-height为一行的行高，下面是设置示例</p>
<p>line-height: 20px;</p>
<p>1.在企业开发中，我们要保证一行文字正好在一个文本框中居中，最常见的就是直接将行高和盒子的高度设置成一样 2.如果是两行或者多行的话，我们可以这样设置，通过padding内边距来控制，然后用box-sizing:border-box;把文字固定到一个文本框中 <img src="https://post.332b.com/wp-content/uploads/2019/01/QQ%E6%88%AA%E5%9B%BE20190124152329.png"></p>
<head>
    <meta charset="UTF-8">
    <style type="text/css">
        body,div,dl,dt,dd,ul,ol,li,h1,h2,h3,h4,h5,h6,pre,code,form,fieldset,legend,input,textarea,p,blockquote,th,td{
            margin:0;
            padding:0;
        }
        div {
            width: 80px;
            height: 80px;
            border: 1px solid #000;
            line-height: 20px;
            box-sizing:border-box;
            padding-bottom: 20px;
            padding-top: 20px;
        }
    </style>
    <title>首页</title>
</head>
<body>
<div>
    <p>我是文字1</p>
    <p>我是文字2</p>
</div>

<p>  文字和字号 1.在企业开发中，盒子储存文字的形式，一般是以左边的内边距为准，因为会有误差，这个误差是由于换行导致的 2.文字的内边距不是文字直接到边框的距离，而是内边距+行高</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>css布局flex大致用法</title>
    <url>/posts/40758ff2.html</url>
    <content><![CDATA[<p>阮一峰 的基础语法详细介绍</p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html</a></p>
<p>实例介绍</p>
<p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">http://www.ruanyifeng.com/blog/2015/07/flex-examples.html</a></p>
<p>主元素被设置flex后的属性</p>
<p>flex-direction属性 设置主轴的方向</p>
<ul>
<li>  row 默认值 主轴为水平方向，从左到右</li>
<li>  row-reverse 主轴为水平方向，从右到左</li>
<li>  column 主轴为树直方向，从上到下</li>
<li>  column-reverse 主轴为树直方向，从下到上</li>
</ul>
<p>flex-wrap属性 设置子元素在主元素内主轴方向换行方式</p>
<ul>
<li>  nowarp 默认不换行，全部集中在一行，每个子元素按比例占用主元素的宽度</li>
<li>  warp 自动换行，子元素放不下，自动转到下一行，第一行在首行，最后一行在底部</li>
<li>  wrap-reverse 自动换行，第一行在底部，最后一行在首行</li>
</ul>
<p>flex-flow 上面元素简写，同时设置上面两个元素，例如</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex-flow</span>: row warp;</span><br></pre></td></tr></table></figure>

<p>justify-content 设置主轴方向的子元素对其方式</p>
<ul>
<li>  flex-start 默认从左到右</li>
<li>  flex-end 从右到左</li>
<li>  center 居中</li>
<li>  space-between 两端对齐，子元素之间的间距相等</li>
<li>  space-around 等分对齐，子元素之间的间距相等，同时还包括左右两侧子元素到边框的距离</li>
</ul>
<p>align-items 交叉轴对其方式</p>
<ul>
<li>  stretch 默认子元素等分，交叉轴的高度</li>
<li>  flex-start 以交叉轴的顶部对齐</li>
<li>  flex-end 以交叉轴的底部对齐</li>
<li>  center 以交叉轴的中点对齐</li>
<li>  baseline 以第一行文字的基线（第一行文字的底部，哪怕是文字大小不一样）</li>
</ul>
<p>align-content 多跟轴线的对齐方式，一根轴线不起作用</p>
<ul>
<li>  <code>flex-start</code>：与交叉轴的起点对齐。</li>
<li>  <code>flex-end</code>：与交叉轴的终点对齐。</li>
<li>  <code>center</code>：与交叉轴的中点对齐。</li>
<li>  <code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>  <code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>  <code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<p>子元素 可以设置的属性</p>
<p>order 负责子元素的排序，值越小越靠前</p>
<p>flex-grow 默认为0不放大，设置子元素之间放大比例，也就是一个子元素在主元素中一行宽度的占用比例</p>
<p>假如有三个50x50子元素放在一个宽度为400的主元素盒子内，设置其中的一盒子为2，其他盒子为1，那么实际的效果是，设置为2的盒子的宽度为50+((400-150)*(2/4))=175，其他的两个盒子就是50+((400-150)*(1/4))=112.5</p>
<p>flex-shrink 定义子元素在一行项目的缩小比例，默认为1</p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<p>flex-basis属性</p>
<p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<p>flex: 可以一次性简写上面三个属性</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">flex: none  [ &lt;<span class="symbol">&#x27;flex</span>-grow&#x27;&gt; &lt;<span class="symbol">&#x27;flex</span>-shrink&#x27;&gt;?  &lt;<span class="symbol">&#x27;flex</span>-basis&#x27;&gt; ]</span><br></pre></td></tr></table></figure>

<p>align-self 可以设置单个子元素的对齐方式，会覆盖父元素设置align-items</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">align-self: <span class="keyword">auto</span>  flex-start  flex-end  center  baseline  stretch;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>CSS样式学习：CSS的基本格式和选择器</title>
    <url>/posts/fa1535a.html</url>
    <content><![CDATA[<p>标签选择器的基本格式</p>
<style type="text/css">
    选择器{
        属性: 值;
    }
</style>

<p>选择字体倾斜，快捷键fs + Tab</p>
<p>font-style: italic;      ###字体倾斜</p>
<p>选择字体粗细</p>
<p>font-weight: bold;</p>
<p>设置字体大小，快捷键fs + Tab</p>
<p>font-size: 12px;</p>
<p>设置字体样式，他可以设置多个字体样式，用逗号隔开，系统默认会使用第一个字体，如果你设置的首个字体系统没有安装该字体，那么他就会使用第二个，如果第二个也没有，他就会使用默认自带的字体，如果想给系统英文和中文单独设置两个字体，可以将英文字体设置在前面，因为英文字体不包含中文</p>
<p>font-family: ‘微软雅黑’,’宋体’;</p>
<p>上面四个属性可以用一行缩写，前两个style和weight可以省略和位置互换，后两个size和family则相反。</p>
<p>font: oblique bold 10px ‘宋体’;</p>
<p>text-decoration文本装饰，有下滑线，删除线，上滑线 text-align文本水平对其左，居中，右 text-indent文字缩进，默认单位em color设置文本颜色，赋值的方式1.英文单词、2.rgb、3.rgba、4.十六进制、5.十六进制的缩写</p>
<p>color: blue;</p>
<p>ID选择器 id选择器不同于标签选择器，</p>
<ol>
<li> ID选择器是在前面要加上‘#’号，</li>
<li> id的命名规则是必须以数字或者下划线开头，</li>
<li> 他可以包含字母、数字和下划线，他不能跟已有的标签重复。</li>
<li> 在企业开发中，id一般是留给js控制使用的，为了避免这样的误解，尽量使用类选择器</li>
</ol>
<p>类选择器跟id差不多命名规则，类选择器在前面要加上‘.’，一个标签可以绑定多个类，写法是用空格隔开，实例class=”类名1  类名2” 标签选择器   html标签名称  如：a id选择器    # + id名称  如：#a123 类选择器    . + 类名称  如：.a123 后代选择器   只修改父元素里的子元素的所有标签，用空格隔开 例如 #a123 .b123     只修改id‘a123’下的类b123所有内容 子元素选择器  用大于号作为连接符，它只会选择特定的一个元素    例如 #a123&gt;.b123    只修改id‘a123’下的类b123单个元素 交集选择器：只修改两个元素相交的部分，格式为直接将两个标签挨着就行   例如  #a123&gt;.b123     只修改必须包含id‘a123’下和类b123两个的元素 并集选择器   修改所有包含两个或者单个选择器的元素,用逗号隔开   例如 #a123,.b123   修改包含所有id‘a123’下和类b123其中一个或者两个的元素 相邻兄弟选择器   循环修改相邻紧跟的那一个标签，使用加号作为连接   例如#a123+.b123    循环修改类b123的那个标签，a123和b123是同级关系 通用兄弟选择器   循环修改相邻的所有标签，使用‘`’作为连接    例如：#a123`.b123循环修改类b123的所有标签，a123和b123是同级关系 序选择器：书写格式：p:first-child，含义为修改同级别的第一个p标签</p>
<ol>
<li> first-child   修改同级别的第一个标签</li>
<li> first-of-type   修改同级别同类型的第一个标签</li>
<li> last-child  修改同级别的最后一个标签</li>
<li> last-of-type  修改同级别同类型的最后一个标签</li>
<li> nth-child(n)  修改同级别的第n个标签</li>
<li> nth-of-type(n)   修改同级别同类型的第n个标签</li>
<li> nth-last-child(n)  修改同级别的倒数第n个标签</li>
<li> nth-last-of-type(n)  修改同级别同类型的倒数第n个标签</li>
<li> only-child   修改父元素只有一个的标签</li>
<li> only-of-type  修改父元素中同类型唯一的一个标签</li>
</ol>
<p>上面的n还有一些高级玩法，nth只会在同级别执行一次，我们可以用公式让它在同级别循环执行</p>
<ol>
<li>   nth-child(odd)     循环修改同级别的序号为单数的标签</li>
<li>   nth-child(even)    循环修改同级别的序号为双数的标签</li>
<li>   nth-child(xn+y)    公式是x乘以n加上y，n从0开始想上递增+1，x和y为用户自定义的数字，循环修改同级别的序号为公式的结果的标签</li>
</ol>
<p>同级别的第一个标签是id=1和id=3，同级别和同类型的p标签是id=2和id=3</p>
<h2 id='1'>aaaaaaa</h2>
<p id='2'>我是第一行</p>
<p>我是第一行</p>
<p>我是第一行</p>
<p>我是第一行</p>
<p>我是第一行</p>
<div>
    <p id='3'>我是第一行</p>
    <p>我是第一行</p>
    <p>我是第一行</p>
    <p>我是第一行</p>
    <p>我是第一行</p>
</div>
<p>我是第一行</p> 
<p>我是第一行</p>

<p>属性选择器： [attribute]       根据指定标签找对应的属性，然后设css 例如p[class]就可以更改下面两个p标签，因为他们两个都有class属性</p>
<p class='a1'>我是第一行</p>
<p class='a2'>我是第二行</p>

<p>[attribute=value]  根据指定标签找对应的属性，该属性的值必须和value相等才会设置css [attribute=value]     css2      和   [attribute^=value]   css3是都是匹配属性值以value开头的，然后设置css，区别是css2的只能识别这种‘value-abc’用横杠隔开的，css3只要是value开头的都可以识别 [attribute$=value]   css3       修改以value结尾的属性值的标签CSS [attribute`=value]   css2   和  [attribute*=value]     css3都是匹配值中包含的value的值，不同的是css2只能匹配空格隔开的，比如 abc value abc，而css3可以配置只要包含了value就行，由此可见后者更强大   <strong>伪元素选择器</strong></p>
<style type="text/css">
    div::after {
        content: "洗刷回溯爱之伤情"; /\* 只能添加字符串，不能添加html标签\*/
        width: 50px;
        height: 0px;
        background-color: #00FF00;
        display: block;    /\*作为块级元素\*/
        visibility: hidden;   /\* 设置是否隐藏\*/
    }
</style>
<div>我是文字</div>

<p>div::after 在div标签后面添加元素，div::before  在div标签前面添加元素</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CSS学习：背景和精灵图</title>
    <url>/posts/7413711c.html</url>
    <content><![CDATA[<p>background意思为背景，在css中起来设置背景的作用 background-color 设置背景颜色</p>
<p>background-color: fuchsia;</p>
<p>  background-image 设置背景图片 如果图片比设定的区域小，那么它就会以平铺和填充的形式，填满整个的区域，设置图片会向服务器发送两次请求，第一下载超文本，第二次才会下载图片</p>
<p>background-image: url(/img/photo.png);</p>
<p>  background-repeat 控制平铺 它需要和background-image一起使用，作用是控制平铺和填充，它有四个属性repeat（按默认方式填充），repeat-x（只填充X轴），repeat-y（只填充Y轴），no-repeat（不填充）</p>
<p>.b123 {<br>    background-image: url(/img/photo.png);<br>    background-repeat: repeat;<br>}</p>
<p>  background-position 控制定位 控制图片no-repeat（不填充）的位置，如下图默认是左上角 <img src="https://post.332b.com/wp-content/uploads/2019/01/20190122162855.png"> background-position第一个为水平方向，第二为树直方向 x轴三个方向的关键词：left center right y轴三个方向的关键词：top center bottom 除了用关键词以外，还可以用像素，第一个水平向右偏移多少，第二个是向下偏移多少，写法background-position: 100px 120px; 像素是可以接受负数的，具体使用请百度，当背景颜色和图片同时存在时，图片会覆盖颜色</p>
<p>.b123 {<br>    background-image: url(/img/photo.png);<br>    background-repeat: no-repeat;<br>    background-position: left top;<br>}</p>
<p>background的简写方式：background：背景颜色  背景图片 平铺方式  关联方式  定位方式</p>
<p>background: red url(“img/photo.png”) no-repeat scroll left top;</p>
<p>background-attachment关联方式 控制图片是否随着滚动条的滚动而滚动 scroll（默认）：随着滚动条的滚动而滚动 fixed：会跟随当前窗口，不会随着滚动条的滚动而滚动</p>
<p>background-attachment: scroll;</p>
<p>  css精灵图 定义一个图片中的某个按钮，先规定div的大小，再通过background-position将图片偏移到指定区域</p>
<head>
    <meta charset="utf-8">
    <title>首页</title>
    <style type="text/css">
        div {
            height: 52px;
            width: 180px;

<pre><code>    &#125;
    .b123 &#123;
        background: red url(&quot;20190123094711.png&quot;) no-repeat ;
        background-position: -130px -92px;
        background-attachment: scroll;
    &#125;
&lt;/style&gt;
</code></pre>
</head>
<body>
<div class="b123"></div>
</body>]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>C语言基础：指针函数</title>
    <url>/posts/a721b297.html</url>
    <content><![CDATA[<p>定义指针函数，通过变量将值传入函数内，再用指针带回</p>
<p>1.先声明指针函数</p>
<p>2.创建指针函数</p>
<p>3.在指定区域使用它</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   先声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minmax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> *min,<span class="keyword">int</span> *max)</span></span>;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1 = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">int</span> a2 = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">int</span> min,max;</span><br><span class="line"><span class="comment">//    在这里使用指定函数</span></span><br><span class="line">    <span class="built_in">minmax</span>(a1,a2,&amp;min,&amp;max);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;小的值为：%d，大的值为：%d\n&quot;</span>,min,max);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   在这里定义指针函数</span></span><br><span class="line"><span class="comment">//   它也可以放在文件声明指针函数下面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">minmax</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> *min,<span class="keyword">int</span> *max)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b)&#123;</span><br><span class="line">        *min = a;</span><br><span class="line">        *max = b;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *min = b;</span><br><span class="line">        *max = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用指针变量的，要注意定义指针变量之后，如果没有指定地址，就开始赋值，那么它就会指向一个莫名奇妙的地方，例如下面是错误的</p>
<figure class="highlight hsp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   下面是错误的</span></span><br><span class="line"><span class="keyword">int</span> *ab<span class="comment">;</span></span><br><span class="line"><span class="symbol">*ab</span> = <span class="number">3</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>Deepin安装最新版的火狐、chrome浏览器和Sublime text3</title>
    <url>/posts/5c87015e.html</url>
    <content><![CDATA[<p>火狐浏览器：可以在<a href="https://pkgs.org/">https://pkgs.org/</a>搜索Firefox，选择ubuntu16.04安装就可以</p>
<p>dpkg -i <a href="http://archive.ubuntu.com/ubuntu/pool/main/f/firefox/firefox/_64.0+build3-0ubuntu0.16.04.1/_amd64.deb">http://archive.ubuntu.com/ubuntu/pool/main/f/firefox/firefox\_64.0+build3-0ubuntu0.16.04.1\_amd64.deb</a></p>
<p>火狐浏览器汉化，安装对应的中文包就可以了，下面网址用火狐打开哦 所有语言：<a href="https://addons.mozilla.org/zh-CN/firefox/language-tools/">https://addons.mozilla.org/zh-CN/firefox/language-tools/</a> 中文语言包：<a href="https://addons.mozilla.org/zh-CN/firefox/addon/chinese-simplified-zh-cn-la/">https://addons.mozilla.org/zh-CN/firefox/addon/chinese-simplified-zh-cn-la/</a> 谷歌浏览器：最新版直接运行下面命令就可以了 dpkg -i <a href="https://dl.google.com/linux/direct/google-chrome-stable/_current/_amd64.deb">https://dl.google.com/linux/direct/google-chrome-stable\_current\_amd64.deb</a> Sublime text3安装： dpkg - i <a href="http://download.sublimetext.com/files/sublime-text/_build-3176/_amd64.deb">http://download.sublimetext.com/files/sublime-text\_build-3176\_amd64.deb</a> 下载最新版方法：<a href="http://download.sublimetext.com/files/sublime-text/_build-%E7%89%88%E6%9C%AC%E5%8F%B7/_amd64.deb">http://download.sublimetext.com/files/sublime-text\_build-版本号\_amd64.deb</a> 汉化和插件还有激活办法请自行百度，下面解决中文输入问题 克隆这个git仓库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Firef0x/</span>SublimeText-i18n-zh.git</span><br></pre></td></tr></table></figure>

<p>或者直接下载<a href="https://post.332b.com/wp-content/uploads/2019/01/foo.zip">foo.zip</a> 然后解压后给执行权限执行目录里的 chmod 777 sublime-imfix &amp;&amp; ./sublime-imfix</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>C语言：指针变量的使用</title>
    <url>/posts/a1291b2d.html</url>
    <content><![CDATA[<p>初始化一个指针变量</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *point ;</span><br></pre></td></tr></table></figure>

<p>将一个指针变量指向一个变量</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">int</span> *point;</span><br><span class="line">point = &amp;munber;</span><br></pre></td></tr></table></figure>

<p>还有一种更简介的写法</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">int</span> *point  = &amp;munber;</span><br></pre></td></tr></table></figure>

<p>指针变量的输出</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> number = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">int</span> *point  = &amp;munber;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *point);</span><br></pre></td></tr></table></figure>

<p>下面的写法是错误的，不允许这样写，千万不要将指针变量指向一个值</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *point = <span class="number">12</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
  <entry>
    <title>django RSF扩展USER模型报错处理</title>
    <url>/posts/c7b478.html</url>
    <content><![CDATA[<p>Django REST Framework</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;User&#x27;</span> <span class="keyword">object</span> has <span class="keyword">no</span> <span class="keyword">attribute</span> <span class="string">&#x27;tracks&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用扩展的方法是onetoone，需要注意的两个地方是下列地方</p>
<p>1.related_name必须和Serializer里面的字段一样</p>
<p>2.对于onetoone，不要使用many=True，否则就会报错， many=True 适用于多对多</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtensionSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = UserExtension</span><br><span class="line">        fields = [<span class="string">&#x27;birthday&#x27;</span>, <span class="string">&#x27;telephone&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">accountDetailSerializer</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    user_detail = serializers.StringRelatedField(read_only=<span class="literal">True</span>)   <span class="comment">#这里不要使用many=True</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [</span><br><span class="line">            <span class="string">&quot;username&quot;</span>,</span><br><span class="line">            <span class="string">&quot;email&quot;</span>,</span><br><span class="line">            <span class="string">&quot;first_name&quot;</span>,</span><br><span class="line">            <span class="string">&#x27;is_superuser&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;is_staff&#x27;</span>,   <span class="comment">#是否是员工</span></span><br><span class="line">            <span class="string">&#x27;is_active&#x27;</span>,   <span class="comment">#账户是否是正常状态</span></span><br><span class="line">            <span class="string">&#x27;date_joined&#x27;</span>,  <span class="comment">#添加日期</span></span><br><span class="line">            <span class="string">&#x27;user_detail&#x27;</span>,</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">UserExtension(<span class="params">models</span>.Model)</span>:</span><br><span class="line">    user = models.<span class="constructor">OneToOneField(User,<span class="params">on_delete</span>=<span class="params">models</span>.CASCADE,<span class="params">related_name</span>=&#x27;<span class="params">user_detail</span>&#x27;)</span></span><br><span class="line">    birthday = models.<span class="constructor">DateField(<span class="params">null</span>=True,<span class="params">blank</span>=True)</span></span><br><span class="line">    telephone = models.<span class="constructor">CharField(<span class="params">max_length</span>=14,<span class="params">null</span>=True)</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
        <category>Django Rest Framework</category>
      </categories>
  </entry>
  <entry>
    <title>django rest framework api框架学习</title>
    <url>/posts/60028424.html</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models    <span class="comment">#models.py</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Publisher</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">32</span>,verbose_name=<span class="string">&#x27;名称&#x27;</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">128</span>,verbose_name=<span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span>  self.name</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        verbose_name = <span class="string">&quot;出版社&quot;</span></span><br><span class="line">        verbose_name_plural = verbose_name</span><br></pre></td></tr></table></figure>

<p>定义API字段的方法</p>
<p>第一种像这样直接定义字段的名字，就像这样</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models      ###serializers.py文件</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers     ###serializers.py文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PubisherSerializer(serializers.Serializer):</span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    name = serializers.CharField(max_length=<span class="number">32</span>)</span><br><span class="line">    address = serializers.CharField(max_length=<span class="number">128</span>)</span><br><span class="line"></span><br><span class="line">    def create(self, validated_data):</span><br><span class="line">        return models.Publisher.objects.create(**validated_data)</span><br><span class="line"></span><br><span class="line">    def update(self, <span class="keyword">instance</span>, validated_data):</span><br><span class="line">        <span class="keyword">instance</span>.name = validated_data.get(<span class="string">&#x27;name&#x27;</span>,<span class="keyword">instance</span>.name)</span><br><span class="line">        <span class="keyword">instance</span>.address = validated_data.get(<span class="string">&#x27;address&#x27;</span>,<span class="keyword">instance</span>.address)</span><br><span class="line">        <span class="keyword">instance</span>.save()</span><br><span class="line">        return <span class="keyword">instance</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models,serializers            <span class="comment">##views.py </span></span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_list</span>(<span class="params">request, <span class="built_in">format</span>=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    列出所有的出版社，或者创建一个新的出版社</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        queryset = models.Publisher.objects.<span class="built_in">all</span>()  <span class="comment"># 所有的出版社</span></span><br><span class="line">        s = serializers.PublisherSerializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(s.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="comment"># 创建出版社</span></span><br><span class="line">        s = serializers.PublisherSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> s.is_valid():</span><br><span class="line">            s.save()</span><br><span class="line">            <span class="keyword">return</span> Response(s.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(s.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(<span class="params">[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;DELETE&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">publisher_detail</span>(<span class="params">request,pk</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    获取，更新或删除一个实类</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        publisher = models.Publisher.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> models.Publisher.DoesNotExist:       <span class="comment">#如果获取异常，就返回一个404的错误</span></span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        s = serializers.PublisherSerializer(publisher)</span><br><span class="line">        <span class="keyword">return</span> Response(s.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&#x27;PUT&#x27;</span>:</span><br><span class="line">        s = serializers.PublisherSerializer(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">        <span class="keyword">if</span> s.is_valid():</span><br><span class="line">            s.save()</span><br><span class="line">            <span class="keyword">return</span> Response(s.data)</span><br><span class="line">        <span class="keyword">return</span> Response(s.errors,status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;DELETE&quot;</span>:</span><br><span class="line">        publisher.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure>

<p>第二种根据模型来选取想要的字段，（ 下面两个文件是一起的 ）</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> models      ###serializers.py文件</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers     ###serializers.py文件</span><br><span class="line"><span class="keyword">class</span> PublisherSerializer(serializers.ModelSerializer):       </span><br><span class="line">    <span class="keyword">class</span> Meta:</span><br><span class="line">        model = models.Publisher</span><br><span class="line">        fields = (</span><br><span class="line">            <span class="string">&quot;id&quot;</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;address&quot;</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from . import models,serializers     ###views.py文件 </span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.decorators import api_view</span><br><span class="line">from rest_framework import status</span><br><span class="line"></span><br><span class="line">def publisher<span class="constructor">_list(<span class="params">request</span>)</span>:      </span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span><span class="operator"> == </span>&#x27;GET&#x27;:</span><br><span class="line">    queryset = models.<span class="module-access"><span class="module"><span class="identifier">Publisher</span>.</span></span>objects.all<span class="literal">()</span></span><br><span class="line">    serializer = serializers.<span class="constructor">PubisherSerializer(<span class="params">queryset</span>,<span class="params">many</span>=True)</span></span><br><span class="line">    return <span class="constructor">Response(<span class="params">serializer</span>.<span class="params">data</span>)</span></span><br><span class="line">    <span class="keyword">if</span> request.<span class="keyword">method</span><span class="operator"> == </span>&#x27;POST&#x27;:</span><br><span class="line">        s = serializers.<span class="constructor">PubisherSerializer(<span class="params">data</span>=<span class="params">request</span>.<span class="params">data</span>)</span></span><br><span class="line">        <span class="keyword">if</span> s.is<span class="constructor">_valid()</span>:</span><br><span class="line">            s.save<span class="literal">()</span></span><br><span class="line">            return <span class="constructor">Response(<span class="params">s</span>.<span class="params">data</span>,<span class="params">status</span>=<span class="params">status</span>.HTTP_201_CREATED)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            return <span class="constructor">Response(<span class="params">s</span>.<span class="params">errors</span>,<span class="params">status</span>=<span class="params">status</span>.HTTP_400_BAD_REQUEST)</span></span><br></pre></td></tr></table></figure>

<p>如果没有上面这些模块，你可能要像这样去编码代码</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># data = []</span></span><br><span class="line"><span class="meta"># for i in queryset:</span></span><br><span class="line"><span class="meta">#     p_tmp = &#123;</span></span><br><span class="line"><span class="meta">#         &#x27;name&#x27;: i.name,</span></span><br><span class="line"><span class="meta">#         &#x27;address&#x27;: i.address</span></span><br><span class="line"><span class="meta">#     &#125;</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#     data.append(p_tmp)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># data = []</span></span><br><span class="line"><span class="meta"># from django.forms.models import model_to_dict</span></span><br><span class="line"><span class="meta"># for i in queryset:</span></span><br><span class="line"><span class="meta">#     data.append(model_to_dict(i))</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># import json</span></span><br><span class="line"><span class="meta"># return HttpResponse(json.dumps(data),content_type=&quot;application/json&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># from django.core import serializers</span></span><br><span class="line"><span class="meta"># data = serializers.serialize(&#x27;json&#x27;, queryset)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># return HttpResponse(data,content_type=&quot;application/json&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># from . import serializers</span></span><br><span class="line"><span class="meta"># queryset = models.Publisher.objects.all()</span></span><br><span class="line"><span class="meta"># serializer = serializers.PubisherSerializer(queryset,many=True)</span></span><br><span class="line"><span class="meta"># import json</span></span><br><span class="line"><span class="meta"># return HttpResponse(json.dumps(serializer.data),content_type=&quot;application/json&quot;)</span></span><br></pre></td></tr></table></figure>

<p>在URL路由中，可以这样去配置</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> <span class="keyword">admin</span>        ###urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span>,<span class="keyword">include</span>,re_path</span><br><span class="line"><span class="keyword">from</span> apps.app001 <span class="keyword">import</span> views</span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, <span class="keyword">admin</span>.site.urls),</span><br><span class="line">    path(<span class="string">&#x27;account/&#x27;</span>, <span class="keyword">include</span>(<span class="string">&#x27;apps.account.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;publishers/&#x27;</span>,views.publisher_list),</span><br><span class="line">    path(<span class="string">&#x27;api-auth/&#x27;</span>, <span class="keyword">include</span>(<span class="string">&#x27;rest_framework.urls&#x27;</span>, namespace=<span class="string">&#x27;rest_framework&#x27;</span>)),</span><br><span class="line">    re_path(r<span class="string">&#x27;publishers/(?P&lt;pk&gt;[0-9]+)/&#x27;</span>,views.publisher_detail)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>视图函数 API VIEW</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from . import models,serializers</span><br><span class="line">from rest_framework.response import Response</span><br><span class="line">from rest_framework.views import APIView</span><br><span class="line">from rest_framework import status</span><br><span class="line">from django.http import Http404</span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PublisherList(APIView)</span>:</span><br><span class="line">    def get(self,reuquest,format=None):</span><br><span class="line">        queryset = models.<span class="module-access"><span class="module"><span class="identifier">Publisher</span>.</span></span>objects.all<span class="literal">()</span>       #查询所有信息</span><br><span class="line"></span><br><span class="line">        s = serializers.<span class="constructor">PublisherSerializer(<span class="params">queryset</span>,<span class="params">many</span>=True)</span></span><br><span class="line">        return <span class="constructor">Response(<span class="params">s</span>.<span class="params">data</span>)</span></span><br><span class="line"></span><br><span class="line">    def post(self,request,format=None):</span><br><span class="line">        s = serializers.<span class="constructor">PublisherSerializer(<span class="params">data</span>=<span class="params">request</span>.<span class="params">data</span>)</span></span><br><span class="line">        <span class="keyword">if</span> s.is<span class="constructor">_valid()</span>:    #如果信息就执行</span><br><span class="line">            s.save<span class="literal">()</span></span><br><span class="line">            return <span class="constructor">Response(<span class="params">s</span>.<span class="params">data</span>,<span class="params">status</span>=<span class="params">status</span>.HTTP_204_NO_CONTENT)</span></span><br><span class="line">        return <span class="constructor">Response(<span class="params">s</span>.<span class="params">errors</span>,<span class="params">status</span>=<span class="params">status</span>.HTTP_400_BAD_REQUEST)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PublisherDetail(APIView)</span>:</span><br><span class="line">    def get<span class="constructor">_object(<span class="params">self</span>, <span class="params">pk</span>)</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            return models.<span class="module-access"><span class="module"><span class="identifier">Publisher</span>.</span></span>objects.get(pk=pk)</span><br><span class="line">        except models.Publisher.DoesNotExist:</span><br><span class="line">            raise Http404</span><br><span class="line"></span><br><span class="line">    def get(self,request,pk,format=None):</span><br><span class="line">        publisher = self.get<span class="constructor">_object(<span class="params">pk</span>)</span></span><br><span class="line">        s = serializers.<span class="constructor">PublisherSerializer(<span class="params">publisher</span>)</span></span><br><span class="line">        return <span class="constructor">Response(<span class="params">s</span>.<span class="params">data</span>)</span></span><br><span class="line"></span><br><span class="line">    def put(self,request,pk,format=None):</span><br><span class="line">        publisher = self.get<span class="constructor">_object(<span class="params">pk</span>)</span></span><br><span class="line">        s = serializers.<span class="constructor">PublisherSerializer(<span class="params">publisher</span>,<span class="params">data</span>=<span class="params">request</span>.<span class="params">data</span>)</span></span><br><span class="line">        <span class="keyword">if</span> s.is<span class="constructor">_valid()</span>:</span><br><span class="line">            s.save<span class="literal">()</span></span><br><span class="line">            return <span class="constructor">Response(<span class="params">s</span>.<span class="params">data</span>)</span></span><br><span class="line">        return <span class="constructor">Response(<span class="params">s</span>.<span class="params">errors</span>,<span class="params">status</span>=<span class="params">status</span>.HTTP_400_BAD_REQUEST)</span></span><br><span class="line"></span><br><span class="line">    def delete(self,request,pk,format=None):</span><br><span class="line">        publisher = self.get<span class="constructor">_object(<span class="params">pk</span>)</span></span><br><span class="line">        publisher.delete<span class="literal">()</span></span><br><span class="line">        return <span class="constructor">Response(<span class="params">status</span>=<span class="params">status</span>.HTTP_204_NO_CONTENT)</span></span><br></pre></td></tr></table></figure>

<p>混淆视图函数 MIXINS</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublisherList</span>(</span></span><br><span class="line">                    mixins.ListModelMixin,</span><br><span class="line">                    mixins.CreateModelMixin,</span><br><span class="line">                    generics.GenericAPIView)<span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">    queryset = models.Publisher.objects.all()</span><br><span class="line">    serializer_class = serializers.PublisherSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(<span class="keyword">self</span>,request,*args,**kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.list(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(<span class="keyword">self</span>,request,*args,**kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.create(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PublisherDetail</span>(<span class="title">mixins</span>.<span class="title">RetrieveModelMixin</span>,</span></span><br><span class="line">                        mixins.UpdateModelMixin,</span><br><span class="line">                        mixins.DestroyModelMixin,</span><br><span class="line">                        generics.GenericAPIView)<span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">    queryset = models.Publisher.objects.all()</span><br><span class="line">    serializer_class = serializers.PublisherSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(<span class="keyword">self</span>,request,*args,**kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.retrieve(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(<span class="keyword">self</span>,request,*args,**kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.update(request,*args,**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(<span class="keyword">self</span>,request,*args,**kwargs)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.destroy(request,*args,**kwargs)</span><br></pre></td></tr></table></figure>

<p>混淆视图函数简写方式 MIXINS</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">PublisherList(<span class="params">generics</span>.ListCreateAPIView)</span>:</span><br><span class="line">    queryset = models.<span class="module-access"><span class="module"><span class="identifier">Publisher</span>.</span></span>objects.all<span class="literal">()</span></span><br><span class="line">    serializer_class = serializers.PublisherSerializer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="constructor">PublisherDetail(<span class="params">generics</span>.RetrieveUpdateDestroyAPIView)</span>:</span><br><span class="line">    queryset = models.<span class="module-access"><span class="module"><span class="identifier">Publisher</span>.</span></span>objects.all<span class="literal">()</span></span><br><span class="line">    serializer_class = serializers.PublisherSerializer</span><br></pre></td></tr></table></figure>

<p>权限管理认证</p>
<p>第一种、所有匿名和登录用户可以查询和修改</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">PublisherList</span>(<span class="title">generics</span>.<span class="type">ListCreateAPIView</span>):</span></span><br><span class="line"><span class="class">    queryset = models.<span class="type">Publisher</span>.objects.all()</span></span><br><span class="line"><span class="class">    serializer_class = serializers.<span class="type">PublisherSerializer</span></span></span><br><span class="line"><span class="class">    permission_classes = ()  ##所有匿名和登录用户可以查询和修改</span></span><br></pre></td></tr></table></figure>

<p>第二种、所有匿名和登录用户可以查询和修改</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">PublisherList</span>(<span class="title">generics</span>.<span class="type">ListCreateAPIView</span>):</span></span><br><span class="line"><span class="class">    queryset = models.<span class="type">Publisher</span>.objects.all()</span></span><br><span class="line"><span class="class">    serializer_class = serializers.<span class="type">PublisherSerializer</span></span></span><br><span class="line"><span class="class">    permission_classes = (<span class="title">permissions</span>.<span class="type">IsAuthenticated</span>,)  ##所有匿名和登录用户可以查询和修改</span></span><br></pre></td></tr></table></figure>

<p>第三章、 只有创建者才可以修改，所有匿名和登录用户可以查询</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">PublisherList</span>(<span class="title">generics</span>.<span class="type">ListCreateAPIView</span>):</span></span><br><span class="line"><span class="class">    queryset = models.<span class="type">Publisher</span>.objects.all()</span></span><br><span class="line"><span class="class">    serializer_class = serializers.<span class="type">PublisherSerializer</span></span></span><br><span class="line"><span class="class">    permission_classes = (<span class="title">permissions</span>.<span class="type">IsAuthenticatedOrReadOnly</span>, <span class="type">IsOwnerOrReadOnly</span>)    ##只有创建者才可以修改，所有匿名和登录用户可以查询</span></span><br><span class="line"><span class="class">    def perform_create(<span class="title">self</span>, <span class="title">serializer</span>):</span></span><br><span class="line"><span class="class">        serializer.save(<span class="title">operator</span>=<span class="title">self</span>.<span class="title">request</span>.<span class="title">user</span>)  #重写创建方法，不然会报错</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>django</category>
        <category>Django Rest Framework</category>
      </categories>
  </entry>
  <entry>
    <title>Django制作一个简易图书管理系统</title>
    <url>/posts/d414b178.html</url>
    <content><![CDATA[<p>这个代码只适合学习，链接：<a href="https://pan.baidu.com/s/1nVP9ikQPPnZP8cetoGNYcA">https://pan.baidu.com/s/1nVP9ikQPPnZP8cetoGNYcA</a> 提取码：0ldy 我们来试试先将setting.py中的django.middleware.csrf.CsrfViewMiddleware注释掉，关闭默认的csrf保护</p>
<p>#    ‘django.middleware.csrf.CsrfViewMiddleware’,</p>
<p>Django视图函数中实现POST和GET的请求，GET一般作为作为网址参数，它是明文的，POST跟服务器之间是密文发送</p>
<p>def func(request):<br>    post = request.POST.get  ####我是POST<br>    get = request.GET.get    ####我是GET<br>    if request.method == ‘get’:  ####可以获取访问清单的状态<br>        pass</p>
<p>效果图片展示 <img src="https://post.332b.com/wp-content/uploads/2018/11/20181109164710.png"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django实现首页不带参数访问目录第一页</title>
    <url>/posts/7882ff88.html</url>
    <content><![CDATA[<p>这段代码实现首页访问到目录页第一页，不用在后面加代码</p>
<p>from django.urls import path<br>from django.http import HttpResponse<br>atext = [“红楼梦”,”水浒传”,”安徒生通话”]<br>def index(requset,book_id=0):<br>    return HttpResponse(atext[book_id])<br>urlpatterns = [<br>    path(“”,index),<br>    path(“page/<a href="int:book\_id">int:book\_id</a>“,index)<br>]</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django数据库filter的条件查询Field查找</title>
    <url>/posts/61cb5a6a.html</url>
    <content><![CDATA[<p>查询数据库的方式一般是filter、exclude和get方法来查询 查询条件 但是”query”只能用在“QuerySet”对象上，不能用在普通的ORM模型上，如果你是用get来查询数据，它就返回的是一个普通的ORM模型，而不是一个“QuerySet”对象，你要是通过filter等等query对象的语法来查询的，就是“QuerySet”对象</p>
<p>def index(request):<br>    article = Artile.objects.filter(id__exact=1)<br>    ###在windows操作系统下的mysql,排序规则无论大小写都是不敏感的，但是在Linux就会区分大小写<br>    ###article = Artile.objects.filter(id__exact=None)<br>    ###如果我们将这个参数设为None，mysql执行原生语句的时候就会翻译为NULL<br>    print(article.query) ##打印执行的原生SQL语句<br>    #&lt; QuerySet[ &lt; Artile: Artile object(1) &gt;] &gt;<br>    #Like和=大部分情况下是等价的<br>    #exict和iexactde的区别就是=和Like的区别<br>    return HttpResponse(“str(article)”)</p>
<h5 id="icontains和contains"><a href="#icontains和contains" class="headerlink" title="icontains和contains"></a>icontains和contains</h5><p>contains：使用大小写敏感的判断来查询数据，icontains：忽略大小写敏感的判断来查询数据,他们两个都是模糊查找（匹配查找），也就是包含所查找的值想等才符合条件</p>
<h5 id="exict和iexactde的区别"><a href="#exict和iexactde的区别" class="headerlink" title="exict和iexactde的区别"></a>exict和iexactde的区别</h5><p>就是=和Like的区别，他们两个所对应的是精确查询，也就是必须所查找的值想等才符合条件 提取那些给定的field的值是否在给定的容器中。容器可以为list、tuple或者任何一个可以迭代的对象，包括QuerySet对象。 示例代码如下： <code>articles = Article.objects.filter(id_in=[l,2,3])</code></p>
<p>class Article(models.Model):<br>    title = models.CharField(max_length=200)<br>    content = models.TextField()<br>    cateogry models.ForeignKey( Category,on_delete=models.CASCADE,null= True,related_query_name=’articles’)<br>        class Meta:<br>            db table = ‘article’</p>
<p>因为在’cateogry’ 的’ ForeignKey’ 中指定了’ related_query_name’为’articles’ ,因此你不能再使用’article’来进行反向査询了,这时候就需要通过’ articles_id_in’来进行反向查询。 并且，如果在做反向查询的时候，如果查询的字段就是模型的主键，那么可以省略掉 这个字段，直接写成’article_in’就可以了，不需要这个了。 ‘in’不仅仅可以指定列表/元组，还可以为’QuerySet’ 。比如要查询“文章标题中包含有hello的所有分类”，那么可以通过以下代码来实现: <code>python--</code> <code>articles = Article.objects.filter(title_icontains=&quot;hello&quot; )</code> <code>categories = Category.objects.filter(articles_in=articles)</code> <code>for cateogry in categories:</code> <code>    print(cateogry)</code> <code>......</code></p>
<h5 id="gt："><a href="#gt：" class="headerlink" title="gt："></a>gt：</h5><p>某个field的值要大于给定的值。示例代码如下: <code>articles = Article.objects.filte(id_gt=4)</code> 以上代码的意思是将所有id大于4的文意全部都找出来。 将翻译成以下SQL语句： select …where id &gt; 4;</p>
<h5 id="gte："><a href="#gte：" class="headerlink" title="gte："></a>gte：</h5><p>类似于et，是大于等于。</p>
<h5 id="lt："><a href="#lt：" class="headerlink" title="lt："></a>lt：</h5><p>类似于是小于。</p>
<h5 id="lte：-类似于lt-是小于等于。"><a href="#lte：-类似于lt-是小于等于。" class="headerlink" title="lte： 类似于lt ,是小于等于。"></a>lte： 类似于lt ,是小于等于。</h5><h5 id="startswith："><a href="#startswith：" class="headerlink" title="startswith："></a>startswith：</h5><p>判断某个字段的值是否是以某个值开始的。大小写敏感。示例代码如下: articles = Article.objects.filter(title_startswith=’hello’) 以上代码的意思是提取所有标题以hello字符串开头的值。 将翻译成以下SQL语句： select … where title like •hello%*</p>
<h5 id="istartswith："><a href="#istartswith：" class="headerlink" title="istartswith："></a>istartswith：</h5><p>类似于startswith ,但是大小写是不敏感的。</p>
<h5 id="endswith："><a href="#endswith：" class="headerlink" title="endswith："></a>endswith：</h5><p>判断某个字段的是否以某个值结束并且大小写敏感。它的用法和startswith相反，是查找以某个值结束的语句</p>
<h5 id="iendswith："><a href="#iendswith：" class="headerlink" title="iendswith："></a>iendswith：</h5><p>用法同endswith，大小写不敏感</p>
<h5 id="range："><a href="#range：" class="headerlink" title="range："></a>range：</h5><p>判断某个field是否在给定的区间，也就是查找日期和日期之间的所有文章，在制定时间的时候要把给时间制定时区，不能让它变成一个幼稚时间，不然django会警告</p>
<p>from django.utils.timezone import make_aware<br>from datetime import datetime<br>    start_date = make_aware(datetime(year«2018,month=1,day=1))<br>    end_date = make_aware(datetime(year=2018,Jmonth=3,day=29,hour=16))<br>    articles = Article.objects.filter(pub_date_range=(start_date,end_date))</p>
<h5 id="data"><a href="#data" class="headerlink" title="data:"></a>data:</h5><p>查找某一天所有发表值，例如要查寻某天所有的文章</p>
<p>articles = Article.objects.filter(pub_date_data=data(2018,3,28))</p>
<h5 id="year和day"><a href="#year和day" class="headerlink" title="year和day"></a>year和day</h5><p>根据年或者某一天进行查找</p>
<h5 id="week-day"><a href="#week-day" class="headerlink" title="week_day"></a>week_day</h5><p>按照星期几来进行查找，1表示周日，2-6表示周一到周五，7表示周六</p>
<h5 id="time"><a href="#time" class="headerlink" title="time:"></a>time:</h5><p>根据时间进行查找，示例代码： <code>from django.utils.timezone import make_aware</code> <code>articles = Article.objects.filter(pub_date_time=make_aware(datetime.tim(12.12.12)))</code> 雷要注意的是，以上提取数据，不会包合最后一个值。也就是不会包合2018/12/12的文童。 而且另外一个重点，因为我们在settings.py中指定了 USE_TZ=True ,并且设值了 TIME.ZONE=’Asia/Shanghai’,因此我们在提取数 据的时候要使用 django.utils.timezone.make_aware 先将 datetime从 navie 时间转换为 aware 时间。make_aware 会将指定的时间转换为time.zone中指定的时区的时间 下面代码在查找时间对象的时候为空的解决办法，因为它在查找时间对象的时候，会执行sql语句时区转换命令，但是默认mysql不带有时区文件，要去官方下载 <code>def index7(request):</code> <code>     articles =Article.objects.filter(create_time_date=datetime(year=2018,month=4,day=4))</code> 注意，因为默认情况下MySQL的表中是没有存储时区相关的信息的。因此我们需要下载一些时区区表的文件，然后添加到Mysql的配路径中。 如果你用的是 windows操作系统。那么在 <a href="http://dev.mysql.com/downloads/timezones.html">http://dev.mysql.com/downloads/timezones.html</a> 下载timezone_2018d_posix.zip - POSIX standard。然后将下载下来的所有文件拷到 C:\ProgramData\MySQL\MySQL Server 5.7\Data\MySql中，如果提示文件名重复，那么选择覆盖即可◊ 如果用的是linux或者mac系统，那么在命令行中执行以下命令：mysql_tzinfo_to_sql /usr/share/zoneinfo mysql -D mysql -u root -p ,然后输入密码，从系统中加载时区文件更新到mysql中。</p>
<h5 id="isnull："><a href="#isnull：" class="headerlink" title="isnull："></a>isnull：</h5><p>True提取所有不为空的值，False提取所有为空的值</p>
<h5 id="regex和iregex"><a href="#regex和iregex" class="headerlink" title="regex和iregex"></a>regex和iregex</h5><p>可以按照正则表达式的值来提取值       豆腐干豆腐</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django开发项目前需要做的准备</title>
    <url>/posts/6dfa40a3.html</url>
    <content><![CDATA[<p>1.生成pip环境依赖模块的版本号，方便打包到生产环境中 生成requirements.txt文件 pip freeze &gt; requirements.txt 安装requirements.txt依赖 pip install -r requirements.txt     2.写JS规范，例如JQ、VUE等等js库要写在header里面，当前的页面js写在body后面，这样可以最大的减少错误的发生     3.django和vue.js 2.0模板之间的’ { { var } }’ 冲突推荐的解决办法 模板</p>
<div id="app">
    <p>{\[ message \]}</p>
</div>

<p>JS</p>
<p>var app = new Vue({<br>delimiters: [‘{[‘, ‘]}’],<br>  el: ‘#app’,<br>  data: {<br>    message: ‘Hello Vue!’<br>  }<br>})</p>
<p>注意：还有其他方法，但是不推荐，不方便编写代码，具体可以百度，vue.js 1.0和2.0冲突解决方法不一样     4.配置mysql，连接器为第三方mysqlclient，官方的连接器mysql-connector-python</p>
<p>DATABASES = {<br>    ‘default’: {<br>        ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘xfz’,<br>        ‘HOST’: ‘127.0.0.1’,<br>        ‘USER’:’root’,<br>        ‘PASSWORD’:’root’,<br>    }<br>}</p>
<p>官方mysql-connector-python连接方式</p>
<p>DATABASES = {<br>    ‘default’: {<br>        ‘NAME’: ‘user_data’,<br>        ‘ENGINE’: ‘mysql.connector.django’,<br>        ‘USER’: ‘mysql_user’,<br>        ‘PASSWORD’: ‘password’,<br>        ‘OPTIONS’: {<br>          ‘autocommit’: True,<br>        },<br>    }<br>}</p>
<p>    5.配置模板路径TEMPLATES选项中的dir可以配置路径，默认为当前目录的templates，如果是多层目录例如当前目录下的/xfz/templates目录，就可以这样设置</p>
<p>‘DIRS’: [os.path.join(BASE_DIR, ‘xfz’,’templates’)]</p>
<p>    6.配置静态路径，这里有更详细的设置方法：<a href="https://post.332b.com/post/226.html">https://post.332b.com/post/226.html</a> 在setting.py末尾添加如下代码即可，添加静态文件目录</p>
<p>STATICFILES_DIRS=[(os.path.join(BASE_DIR,’front’, ‘dist’))]</p>
<p>    7.设置时区 检查 ‘USE_TZ’ 是否为 ture 打开状态，再设置TIME_ZONE = ‘Asia/Shanghai’中国亚洲上海 添加mysql的时间储存库方法  <a href="https://post.332b.com/post/288.html">https://post.332b.com/post/288.html</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django数据库：ORM模型外键的使用</title>
    <url>/posts/3fa9f585.html</url>
    <content><![CDATA[<p>如果一张表中有一个非主键的字段指向了别一张表中的主键，就将该字段叫做外键。 district：严格模式(默认), 父表不能删除或更新一个被子表引用的记录。 cascade：级联模式, 父表操作后，子表关联的数据也跟着一起操作。 set null：置空模式,前提外键字段允许为NLL,  父表操作后，子表对应的字段被置空。 DJango使用外键方法使用方法</p>
<p>class Category(models.Model):<br>    name = models.CharField(max_length=100)</p>
<p>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    category = models.ForeignKey(‘Category’,on_delete=models.CASCADE)###定义一个本模块外键<br>    author = models.ForeignKey(‘front.Front’,on_delete=models.CASCADE,null=True)#####定义一个引用其他app目录模块中的外键</p>
<p>同时外键也可以将自己作为外键，这种用途一般作为多级评论</p>
<p>class Comment(models.Model):<br>    content = models.TextField()<br>    origin_comment = models.ForeignKey(‘self’,on_delete=models.CASCADE)</p>
<p>外键在视图函数中添加值的方法</p>
<p> article = Article(title=’abc’,content=’111’)<br> category = Category(name=’最新文字’)<br> category.save()<br> article.category = category<br> article.save()</p>
<p>在视图函数中调用的方法</p>
<p>def index(request):<br>    article = Article.objects.first()<br>    print(article.category.name)</p>
<h1 id="一对多的关系示意"><a href="#一对多的关系示意" class="headerlink" title="一对多的关系示意"></a><img src="https://post.332b.com/wp-content/uploads/2018/11/20181113160324.png">一对多的关系示意</h1><p>向外键的第一个ID添加值进去,下面是models</p>
<p>from django.db import models<br>class Category(models.Model):<br>    name = models.CharField(max_length=100)</p>
<p>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    category = models.ForeignKey(‘Category’,on_delete=models.CASCADE,null=True)</p>
<p>视图函数中操作</p>
<p>from django.http import HttpResponse<br>from .models import Article,Category<br>def index(request):<br>    article = Article(title=’钢铁是怎样炼成的12121’,content=’这是一本不错图书，推荐观看和阅读’)<br>    category = Category.objects.first()<br>    article.category = category<br>    article.save()<br>    return HttpResponse(“执行成功”)</p>
<p>在外键中查看一个外键的值所对应所有值的方法</p>
<p>def index(request):<br>    category = Category.objects.first()<br>    article = category.article_set.all()    ###返回的是一个列表<br>    for art in article:<br>        print(art)<br>    return HttpResponse(“执行成功”)</p>
<p>将某篇文章添加到某个分类当中方法</p>
<p>def index(request):<br>    category = Category.objects.first()<br>    article = Article(title=’东方国际很方便’,content=’ssfsadfsdfds’)<br>    category.article_set.add(article,bulk=False)<br>    return HttpResponse(“执行成功”)</p>
<h1 id="一对一的示意方法"><a href="#一对一的示意方法" class="headerlink" title="一对一的示意方法"></a>一对一的示意方法</h1>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：spaceless和autoescape标签去掉多余空格和关闭默认转义</title>
    <url>/posts/1b5bb0bd.html</url>
    <content><![CDATA[<p>spaceless标签是把标签之间所有无用的空行去掉，浓缩成一行，但是它不会去掉<strong>到</strong>之间无用的空格</p>
<p>{ % spaceless %}</p>
<p>
    <a href="url">url</a>
</p>
{ % endspaceless %}

<p>之前是上面这个样子，用了之后就是这个样子 <code>&lt;p&gt; &lt;a href=&quot;url&quot;&gt;url&lt;/a&gt; &lt;/p&gt;</code> Django中的DTL模板已经默认开启了转义，例如将“&lt;”转换成&lt;</p>
<p>text = {<br>    “baidu”:”&lt;a href=\“<a href="http://www.baidu.com//&quot;&gt;%E7%99%BE%E5%BA%A6">www.baidu.com\\&quot;&gt;百度</a></a>“<br>}<br>def index(request):<br>    return render(request,”index.html”,context=text)    ####urls.py</p>
<p>{ { baidu } }     ####index.html</p>
<p>如果将这个字典的key值直接输入到网页就是这样 <img src="https://post.332b.com/wp-content/uploads/2018/10/20181024150256-300x38.png"> 如果你使用了autoescape，那么它就会还原它本来的模样，将它变成超链接</p>
<p>{ % autoescape off %}<br>    { { baidu } }<br>{ % endautoescape %}         ####index.html</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django :URL视图参数</title>
    <url>/posts/782b166b.html</url>
    <content><![CDATA[<p>1.创建一个普通的url映射</p>
<p>from django.urls import path<br>urlpatterns = [<br>    path(“”,index),<br>]</p>
<p>  2.主项目的urls.py总文件指向，可以在setting.py出更改ROOT_URLCONF</p>
<p>ROOT_URLCONF = ‘xfz.urls’</p>
<p>  3.多个项目指定子urls.py方法 主urls.py文件，include后面为指定目录</p>
<p>from django.urls import path,include</p>
<p>urlpatterns = [<br>    path(‘cms/‘,include(‘apps.cms.urls’))<br>]</p>
<p>  4.app命令空间防止在视图函数指定reverse(“urlName”)出现混乱，故可以这样设置reverse(“AppZone:urlName”) URL</p>
<p>app_name = “appName”</p>
<p>urlpatterns = [<br>    path(“”,views.index,name=’index’),<br>]</p>
<p>视图</p>
<p>from django.shortcuts import redirect,reverse</p>
<p>def index(request):<br>        login_url = reverse(“appName:index”)   //如果存在多个app,只有index是无法让django识别的<br>        return redirect(login_url)</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：join、length、lower、random、safe、truncatechars标签</title>
    <url>/posts/27538b55.html</url>
    <content><![CDATA[<p>join标签类似python的join将指定的列表、元组、字符串拼接起来</p>
<p>text = {<br>    “akey”:[1,2,3,4]<br>}         ###urls.py</p>
<p>{ { akeyjoin:”/“ } } #index.html 输出结果为1/2/3/4</p>
<p>length标签获取元组、列表、字符串的长度，类似于python中的len</p>
<p>{ { akeylength } }       ######输出结果为4</p>
<p>lower标签将所有的大写字符转换成小写的形式，upper标签则相反，把所有的小写字母转换成大写</p>
<p>{ { “AAAAA”lower } }     输出结果为aaaaa<br>{ { “aaaaa”upper } }     输出结果为AAAAA</p>
<p>random标签是随机从字符串、列表、元组中随机获取一个元组</p>
<p>{ { “uqhuqhequ”random } }       输出结果为随机抽取一个</p>
<p>safe标签和autoespace用法差不多，都是关闭默认的转义，对应的字符直接输出</p>
<p>text = {<br>    “akey”:’<script>alert("我是弹窗");</script>‘<br>}                    ####urls.py<br>{ { akeysafe } }      #######index.html</p>
<p>  slice标签对字符串进行切片</p>
<p>{ { “gooddd”slice:”0:3” } }    ###输出结果为goo</p>
<p>striptags标签删除字符串里面所有的html标签</p>
<p>text = {<br>    “akey”:’<script>alert("我是弹窗");</script>‘<br>}       ####urls.py</p>
<p>{ { akeystriptags } }     ###index.html输出结果为alert(“我是弹窗”);</p>
<p>truncatechars标签切割字符串，一般做内容摘要的，用法truncatechars默认加参数时“…”要占用三个字符，所以要用5个字符</p>
<p>{ { “我是一个有长度的字符串”truncatechars:”5” } }    ###输出我是…</p>
<p>truncatechars_html标签切割字符串，但是它不会把html标签计入字数</p>
<p>text = {<br>    “akey”:”<p>我是一个有长度的字符串</p>“<br>}</p>
<p>{ { akeytruncatechars_html:”5” } }     ###输出结果为<p>我是…</p></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：URL标签使用以及制作简易导航栏</title>
    <url>/posts/a40e252b.html</url>
    <content><![CDATA[<p>在标签中我们经常要写一些url，在模板中使用反转，可以灵活的改动，方便易维护 一个普通的url反转参数示例</p>
<p>path(“book/“, book,name=”book”),   ###url.py</p>
<p>&lt;a href=”{ % url “book” %}”&gt;读书</a>   ###index.html</p>
<p>一个带有关键词参数的反转示例</p>
<p>path(“book/<fenlei>/detail/&lt;book_id&gt;”,book_detail,name=”book_detail”) #url.py</p>
<p>&lt;a href=”{ % url “book_detail” fenlei=”111” book_id=”1”  %}”&gt;最火的一篇文章</a>  ###index.html</p>
<p>一个带有查询字符串的反转</p>
<p>def login(request):<br>    next = request.GET.get(“next”)<br>    btext = “登录后跳转的url是：%s” % next<br>    return HttpResponse(btext)<br>path(“login/“,login,name=”login”),   ####urls.py</p>
<p>&lt;a href=”{ % url “login” %}?next=aaaaa”&gt;登录</a>   ####index.html</p>
<p>url.py文件</p>
<p>from django.contrib import admin<br>from django.urls import path<br>from django.shortcuts import render<br>from django.http import HttpResponse<br>def index(request):<br>    text = {</p>
<pre><code>&#125;
return render(request,&quot;index.html&quot;,context=text)
</code></pre>
<p>def login(request):<br>    next = request.GET.get(“next”)<br>    btext = “登录后跳转的url是：%s” % next<br>    return HttpResponse(btext)<br>def book(request):<br>    return HttpResponse(“读书首页”)<br>def movie(request):<br>    return HttpResponse(“电影首页”)<br>def kanbao(request):<br>    return HttpResponse(“看报首页”)<br>def book_detail(request,book_id,fenlei):<br>    atext = “你的书籍ID是：%s,分类是：%s” % (book_id,fenlei)<br>    return HttpResponse(atext)<br>urlpatterns = [<br>    path(‘admin/‘, admin.site.urls),<br>    path(“”,index,name=”index”),<br>    path(“book/“, book,name=”book”),<br>    path(“movie/“, movie,name=”movie”),<br>    path(“kanbao/“, kanbao,name=”kanbao”),<br>    path(“book/<fenlei>/detail/&lt;book_id&gt;”,book_detail,name=”book_detail”),<br>    path(“login/“,login,name=”login”),<br>]</p>
<p>index.html文件</p>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        .nav{
            overflow:hidden;
        }
        .nav li{
            float:left;
            list-style: none;
            margin: 0 20px;
        }
    </style>
</head>
<body>
    <ul class="nav">
        <li><a href="/">首页</a></li>
        <li><a href="{ % url "movie" %}">电影</a></li>
        <li><a href="{ % url "book" %}">读书</a></li>
        <li><a href="{ % url "kanbao" %}">看报</a></li>
        <li><a href="{ % url "book\_detail" fenlei="111" book\_id="1"  %}">最火的一篇文章</a></li>
        <li><a href="{ % url "login" %}?next=aaaaa">登录</a></li>
    </ul>
</body>
</html

<p>截图 <img src="https://post.332b.com/wp-content/uploads/2018/10/20181024141000-300x39.png"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：静态模板存放规则和目录</title>
    <url>/posts/51508a34.html</url>
    <content><![CDATA[<p>1、查看项目setting.py文件INSTALLED_APPS里面有没有<code>&#39;django.contrib.staticfiles&#39;</code> 2、查看项目setting.py文件STATIC_URL设置没有<code>STATIC_URL = &#39;/static/&#39;</code> 3、存放静态文件的方法，先创建一个app，并且在setting.py里面INSTALLED_APPS添加app，在app目录创建static目录，以后静态文件都可以放在static目录，用户在访问的时候，Django就会在static目录查找文件</p>
<p>{ % load static %}     ###载入静态文件目录<br>{ % static “2018.png” %}     ##载入2018.png文件</p>
<p>4.如果存在多个app，Django会在多个static目录查找文件，这样就会造成混淆，为了避免这种情况python建议的是你在当前app/static目录存放文件，那就在当前app/static再创建跟当前app一样的名字文件夹，例如：app/static/app，对应的url是<a href="http://www.xxx.com/static/app/,%E7%94%A8%E6%88%B7%E5%92%8CDjango%E8%AE%BF%E9%97%AE%E5%92%8C%E6%9F%A5%E6%89%BE%E6%96%87%E4%BB%B6%E7%9A%84%E6%97%B6%E5%80%99%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%B7%B7%E6%B7%86%E4%BA%86">www.xxx.com/static/app/,用户和Django访问和查找文件的时候就不会混淆了</a> 5.设置一个独立的static目录方法，在setting.py最后一行添加如下文本，这个是跟主项目templates一样放在同级别目录</p>
<p>STATICFILES_DIRS = (<br>    os.path.join(BASE_DIR,’static’),<br>)</p>
<p>6.每个html模板都要向下面这样load一下，我们才能载入静态标签非常麻烦</p>
<p>{ % load static %}      ###载入静态文件目录</p>
<p>在setting.py添加如下内容，就可以不要在每个模板中load，直接把static变成一个内置标签，在TEMPLATES中的OPTIONS添加<code>&#39;builtins&#39;:[&#39;django.templatetags.static&#39;],</code></p>
<p>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)]<br>        ,<br>        ‘APP_DIRS’: True,<br>        ‘OPTIONS’: {<br>            ‘builtins’:[‘django.templatetags.static’],<br>            ‘context_processors’: [<br>                ‘django.template.context_processors.debug’,<br>                ‘django.template.context_processors.request’,<br>                ‘django.contrib.auth.context_processors.auth’,<br>                ‘django.contrib.messages.context_processors.messages’,<br>            ],<br>        },<br>    },<br>]</p>
<p>7.当setting.py没有<code>&#39;django.contrib.staticfiles&#39;</code> 的另外一种替换方法，不过它对比之前的只能在主项目的static放静态文件，在app/static目录存放文件无效，这个方法是修改urls.py文件</p>
<p>from django.conf.urls.static import static<br>from django.conf import settings<br>urlpatterns = [</p>
<p>] + static(settings.STATIC_URL,document_root=settings.STATICFILES_DIRS[0])<br>####这个模板返回的是一个列表，所以要使用到加号</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：自定义一个过滤器</title>
    <url>/posts/697646bf.html</url>
    <content><![CDATA[<p>过滤器必须在任意app目录下载新建一个templatetags文件名的包，里面必须有__init__.py文件，将一个函数封装为过滤器时，一个函数最多只能有两个参数，新建一个article的app，在templatetags文件夹新建一个my_filter.py文件</p>
<p>from django import template     ###导入模板函数</p>
<p>register = template.Library()</p>
<p>####@register.filter       这一行和最后一行语法一样，取其一即可<br>def greet(value,word):<br>    return value + word</p>
<p>register.filter(“greet”,greet)    ###我是最后一行</p>
<p>在项目setting.py文件的<code>INSTALLED_APPS</code> 导入article这个app，在模板中调用这个过滤器方法</p>
<p>{ % load my_filter %}         #####在模板中导入过滤器<br>{ { “张三”greet:”你好” } }      ####输出结果为张三你好</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django模板：防止模板之间的变量冲突verbatim标签</title>
    <url>/posts/9d5bc76b.html</url>
    <content><![CDATA[<p>当我们使用两个不同模板的，他们可能会跟django自带的DTL模板冲突，例如{ % %}、{ { } }，为了避免这样的事情发生，我们可以使用verbatim标签，它就不会执行标签之间的语法，转交给其他模板执行避免冲突</p>
<p>{ % verbatim %}<br>{ { if } } sss{ { if } }<br>{ % endverbatim %}      ###index.html</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django笔记：虚拟环境和URL视图参数</title>
    <url>/posts/cf74a71f.html</url>
    <content><![CDATA[<p>1.虚拟环境安装：<code>pip install virtualenv</code> 创建virtualenv虚拟环境:<code>virtualenv [目录路径]</code> 进入虚拟环境Scripts目录或者bin目录执行<code>activate</code>命令，<code>deactivate</code>退出虚拟环境 2.高级虚拟环境virtualenvwrapper安装，Windows安装<code>pip install virtualenvwrapper-win</code> 创建virtualenv虚拟环境:<code>mkvirtualenv [目录路径]</code> 3.创建第一个Django项目：<code>django-admin startproject first_project</code> 4.启动Diango项目：<code>python manage.py runserver</code> 可选参数可加上本机IP地址:端口号，默认以8000端口启动，注意要修改setting.py里面的ALLOWED_HOSTS = []填入本机IP，否则其他机器无法访问 5.项目路径URL映射文件urls.py，URL规则如下</p>
<p>from django.urls import path<br>from django.http import HttpResponse</p>
<p>def index(request):<br>    return HttpResponse(“首页”)</p>
<p>def book(request):<br>    return HttpResponse(“书城”)</p>
<p>urlpatterns = [<br>    path(“”,index),<br>    #这个是首页<br>    path(“book/“,book)<br>    #这个是/book路径<br>]</p>
<p>6.创建一个项目app目录<code>python manage.py startapp [名称]</code>，DEBUG默认是开启的，它可以显示我们开发中出现错误的地方，在生产环境必须关掉DEBUG模式 7.在pycharm鼠标选择模块代码，快捷键Ctrl + B可以进入模块的目录文件 8.视图函数的第一个参数必须是request,视图函数的返回值必须是django.http.response.HttpResponseBase的子类 9.Django的URL映射配置是先到settting.py中寻找<code>ROOT_URLCONF = &#39;untitled.urls&#39;</code>  所配置的值，然后再去url.py寻找所对应的URL关系 10.URL传参数在url.py中的path()中可以用&lt;参数&gt;的方式来传参数 url.py文件中的部分</p>
<p>path(“book/detail_&lt;book_id&gt;.html”,views.book_detail)<br>#域名<a href="http://www.xxx.com/book/detail/_xxx.html">www.xxx.com/book/detail\_xxx.html</a></p>
<p>views.py文件中的部分</p>
<p>def book_detail(request,book_id):<br>    text = “你的ID是：%s” % book_id<br>    return HttpResponse(text)</p>
<p>11.查询字符串GET的方式传参数，他的参数是request.GET.get(“参数”),这个数据获取的方式get类似于字典，所获取的值也跟字典类似 url.py文件中的部分</p>
<p>path(“book/author”,views.author_detail)<br>#域名<a href="http://www.xxx.com/book/author?id=xxx">www.xxx.com/book/author?id=xxx</a></p>
<p>views.py文件中的部分</p>
<p>def author_detail(request):<br>    author_id = request.GET.get(“id”)<br>    author_text = “作者ID是：%s” % author_id<br>    return HttpResponse(author_text)</p>
<p>12.URL转换器共有5种类型，他可以为URL制定数据类型，可以例如url中的这段代码path(“book/detail_<a href="str:book\_id">str:book\_id</a>.html”,views.book_detail)，str:指定的是字符串类型，模块的命令是<code>from django.urls import converters</code> str:   除了“/”不行，其他都可以输入 int:  只能为纯数字 path:  可以为任意字符 uuid:  只能满足python自带模块uuid中的uuid.uuid4()的类型 slug:  阿拉伯数字和字母，英文中的横杠和下划线 13.让url映射可以在多个app的urls.py中配置的方法，主项目中的urls.py指定各app中的urls路径 主项目urls.py文件：</p>
<p>from django.urls import path,include</p>
<p>urlpatterns = [<br>    path(“book/“, include(‘book.urls’)),<br>]</p>
<p>book单个app目录urls.py</p>
<p>from django.urls import path<br>from . import views</p>
<p>urlpatterns = [<br>    path(“”, views.index),<br>    path(“denglu/“,views.login)<br>]</p>
<p>为一个URL指定名称在urls.py文件修改path，就相当于给url制定了一个login变量名称，singup则为login变量的值，app命令空间是为了防止各个app之间相同的反转URL变混淆，添加方法在urls.py中添加app_name = “应用空间名称” app目录urls.py的部分代码示例</p>
<p>app_name = “xlogin”</p>
<p>path(“singup/“,views.login,name=”login”)</p>
<p>在views.py使用方法：</p>
<p>rom django.http import HttpResponse<br>from django.shortcuts import redirect,reverse</p>
<p>def index(request):<br>    username = request.GET.get(“username”)<br>    if username:<br>        return HttpResponse(“前台首页”)<br>    else:<br>        login_url = reverse(“xlogin:login”)<br>        return redirect(login_url)</p>
<p>def login(request):<br>    return HttpResponse(“前台登陆页面”)</p>
<p>14.当一个app在总项目中的urls.py只指定一个URL叫做应用命名空间，当多个URL指向同一个app，多个URL之间URL反转会混淆，为了避免这种情况，可以使用实例命名空间 主项目urls.py的配置，在urls.py中配置namespace=”名称”</p>
<p>from django.urls import path,include</p>
<p>urlpatterns = [<br>    path(“”, include(‘login.url’)),<br>    path(“book/“, include(‘book.url’,namespace=”book”),),<br>    path(“book1/“, include(‘book.url’,namespace=”book1”)),<br>]</p>
<p>在app目录中配置views.py使用request.resolver_match.namespace来获取当前执行的命名空间避免混淆</p>
<p>def index(request):<br>    username = request.GET.get(“username”)<br>    if username:<br>        return HttpResponse(“书城首页”)<br>    else:<br>        current_namespace = request.resolver_match.namespace<br>        login_url = reverse(“%s:login”%current_namespace)<br>        return redirect(login_url)<br>def login(request):<br>    return HttpResponse(“书城登陆页面”)</p>
<p>要想使用实例命令空间，就必须要先指定应用命令空间，也就是在当前app目录中指定app_name = “名称” 15.文件urls.py中的include()函数用法 include(module,namespace=None) <code>path(&quot;book/&quot;, include(&#39;book.url&#39;,namespace=&quot;book&quot;),)</code> include((pattern_list,app_namespace),namespace=None) <code>path(&quot;book/&quot;, include(&#39;book.url&#39;,&quot;book&quot;))</code> include(pattern_list):</p>
<p>path(“book/“, include([<br>    path(“”,views.book),<br>    path(“list/“,views.booklist)<br>])),</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：cookie 和session</title>
    <url>/posts/292a9e36.html</url>
    <content><![CDATA[<h2 id="cookie的简介"><a href="#cookie的简介" class="headerlink" title="cookie的简介"></a>cookie的简介</h2><p>1. cookie：在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知 道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据(cookie)给浏览器，然后 浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器 通过浏览器携带的数据就能判断当前用户是哪个了，cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超 过4KB。因此使用cookie只能存储一些小量的数据。 2. session: session和cookie的作用有点类似，都是为了存储用户相关的信息。不同的是，cookie是存储在本地浏览 器，session是一个思路、一个概念、一个服务器存储授权信息的解决方案，不同的服务器，不同的棍架，不同的语言有不同的 实现。虽然实现不一样，但是他们的目的都是服务器为了方便存储数据的。session的出现，是为了解决cookie存储数据不安 全的问题的。 3. cookie和session结合使用：web开发发展至今，cookie和session的使用已经出现了一些非常成熟的方案。在如今的市场或 者企业里，一般有两种存储方式： 存储在服务端：通过cookie存储一个sessionid，然后具体的数据则是保存在session中。如果用户已经登录，则服务器 会在cookie中保存一个sessionid，下次再次请求的时候，会把该sessionid携带上来，服务器根 据sessionid在session库中获取用户的session数据。就能知道该用户到底是谁，以及之前保存的一些状态信息◊这种 专业术语叫做server side session，Django把session信息默认存储到数据痒中，当然也可以存储到其他地方，比如缓 存中，文件系统中等。存储在服务器的数据会更加的安全，不容易被窃职。但存储在服务器也有一定的弊端，就是会占用服 务器的资源，但现在服务器已经发展至今，一些session信息还是绰绰有余的。 将session数据加密，然后存储在cookie中。这种专业术语叫做client side session</p>
<h2 id="在-django-中操作cookie-和session"><a href="#在-django-中操作cookie-和session" class="headerlink" title="在 django 中操作cookie 和session:"></a>在 django 中操作cookie 和session:</h2><p>操作cookie: 设cookie是设置给浏览器的。因此我们需要通过response的对象来设置cookie可以通过response.set_cookie来设置,这个方法的相关参数如下： 设置cookie是设S值给浏览器的。因此我们需要通过response的对象来设设S cookie可以通过response.set_cookie来设 S,这个方法的相关参数如下： 1. key :这个 cookie 的 key 2. value :这个 cookie 的 value 3. max_age :最长的生命周期。单位是秒。 4. expires :过期时间。跟max_age是类似的，只不过这个参数需要传递一个具体的日期，比如datetime或者是符合日期格式的字 符串，如果设置了 max_age ,那么这个参数设置将无效。 5. path :对域名下哪个路径有效。默认是对域名下所有路径都有效。 6. domain :针对哪个域名有效。 7. secure :是否是安全的，如果设置为True，那么只能在https协议下才可用 8. httponly :默认是False 如果为True，那么在客户端不能通过JavaScript进行操作。 给cookies设置一个有效时间</p>
<p>def index(request):<br>    reponse = HttpResponse(‘index’)<br>    expires = datetime(year=2018,month=12,day=30,hour=8)<br>    expires = make_aware(expires)<br>    reponse.set_cookie(‘username’,’zhiliao’,expires=expiresmax_age)#当存在max_age（cookies剩余有效时间）时，优先调用expires<br>    return reponse</p>
<p>删除和清空一个cookies的值</p>
<p>reponse.delete_cookie(‘username’)</p>
<p>在其他网址调用cookies</p>
<p>def gete(request):<br>    cookies = request.COOKIES<br>    username = cookies.get(‘username’)<br>    return HttpResponse(username)</p>
<p>给cookies设置一个指定路径，这个cookies只会对<a href="http://www.xxx.com/cms/xxx%E6%9C%89%E6%95%88">www.xxx.com/cms/xxx有效</a></p>
<p>reponse.set_cookie(‘username’,’zhiliao’,expires=expires,path=’/cms/‘)</p>
<p>操作session: django中的session默认情况下是存储在服务器的数据库中的，在表中会根据sessionid来提取指定的session数据，然后再把这 个sessionid放到cookie中发送给浏览器存槠，浏览器下次在向服务器发送请求的时候会自动的把所有cookie信息都发送给服务 器，服务器再从cookie中获职sessionid，然后再从数据库中获取session数据。但是我们在操作session的时候，这些细节压根 就不用管。我们只需要通过request.session即可操作，示例代码如下： session常用的方法如下： 1. get :用来从session中获取指定值。 2. pop :从session中删除一个值。 3. keys :从session中获取所有的键。 4. items :从session中获取所有的值。 5. clear :清除当前这个用户的session数据。 6. flush :删除session并且删除在浏览器中存储的session_id，一般在注销的时候用得比较多 7. set_expiry(value)  :  设置session过期时间。</p>
<ul>
<li>  整形：代表秒数，表示多少秒后过期。</li>
<li>  0  :  代表只要浏览器关闭，session就会过期。</li>
<li>  None :会使用全局的session配晋,在settings.py中可以设置SESSION_COOKIE_AGE来配贾全局的过朗时间。默认是1209600秒，也就是2周的时间。</li>
</ul>
<p>8. clear_expired :清除过期的session Django并不会清除过期的session，需要定期手动的清理，或者是在终端，使用命令 行 python manage.py clearsessions 来清除过期的 session</p>
<h2 id="修改Session的存储机制"><a href="#修改Session的存储机制" class="headerlink" title="修改Session的存储机制"></a>修改Session的存储机制</h2><p>默认情况下，session数据是存储到数据库中的。当然也可以将session数据存储到其他地方。可以通过设罝SESSION_ENGINE来更 改session的存储位罝，这个可以配置为以下几种方案： 1. django.contrib.sessions.backends.db :使用数据库。默认就是这种方案。 2. django.contrib.sessions.backends.file :使用文件来存储session。 3. django.contrib.sessions.backends.cache :使用缓存来存储session。想要将数据存储到缓存中，前提是你必须要在settings.py中配置好CACHES ,并且是需要使用Memcached ,而不能使用纯内存作为缓存。 4. django.contrib.sessions.backends.cached_db :在存储数据的时候，会将数据先存到缓存中，再存到数据库中。这样就可以保证 万一缓存系统出现问题，session数据也不会丢失。在获职数据的时候，会先从缓存中获职，如果缓存中没有，那么就会从数据库中获 取。 5. django.contrib.sessions.backends.signed_cookies :将session信息加密后存储到浏览器的cookie中。这种方式要注意安全， 建议设置SESSION_COOKIE_HTTPONLY=True，那么在浏览器中不能通过js来操作session数据，并且还需要对settings.py中 的SECRET_KEY进行保密，因为一旦别人知道这个SECRET_KEY ,那么就可以进行解密。另外还有就是在cookie中，存储的数据不能 超过4k 在setting.py中设置，如果要使用cached要配置好[CACHES]，参考<a href="https://post.332b.com/post/398.html">https://post.332b.com/post/398.html</a></p>
<p>SESSION_ENGINE = ‘django.contrib.sessions.backends.cached_db’</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：add、cut和date过滤器拼接、替换和日期</title>
    <url>/posts/79e67bf9.html</url>
    <content><![CDATA[<p>因为Django中DTL是不支持给函数传参数的，所以就出现了过滤器，add过滤器的用法&lt;参数1&gt;add:&lt;参数2&gt;，当参数1和参数2是数字就会相加，如果都是列表或者字符串就会拼接</p>
<p>{ { “1”add:”12” } }  ###13</p>
<p>cut过滤器是将指定字符删掉，用法如下</p>
<p>{ { “good”cut:”d” } }    ###goo</p>
<p>date过滤器，是格式化字符串成为自己想要的模式</p>
<p>text = {<br>    “seer”:datetime.now()<br>}                       ####urls.py</p>
<p>{ { seerdate:”Y-m-d” } }   ####index.html 输入当前时间为“2018-10-24”这种格式</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：F表达式和Q表达式</title>
    <url>/posts/8b9a64b0.html</url>
    <content><![CDATA[<p>F表达式：动态的获取某个字段上的值，并且这个F表达式，不会真正的去数据库中查询数据，他相当于只是起一个标识的作用 F(‘price’)+10表示这个对象里的每个值都要+10，如果是普通命令就要把每个数据拿到内存里然后+10，有了F表达式可以避免这些操作</p>
<p>from django.db.models import F<br>def index(request):<br>Book.objects.update(price=F(‘price’)+10)<br>return HttpResponse(‘执行成功’)</p>
<p>Q表达式：可以实现多个复杂的条件进行查询，它可以执行非（~）、且（&amp;）、或（）这样的查询操作，他的查询条件可以是2个以上，下面是一些代码示例</p>
<p>def index(request):<br>    books = Book.objects.filter(Q(price__gte=100)  Q(price=95))##查询大于和等于100的价格或者价格等于95<br>    for book in books:<br>        print(book.name)<br>    return HttpResponse(‘执行成功’)</p>
<p>如果我们要查询所有价格不是大于和等于100的数字</p>
<p>books = Book.objects.filter(~Q(price__gte=100))</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：ORM模型来操作数据库</title>
    <url>/posts/8d6e45cc.html</url>
    <content><![CDATA[<p>ORM模型更方便我们来操作数据库，原生的SQL容易遭到攻击，ORM模型就可以尽可能的去避免这些事情的发生，经测试使用后性能损失不到5% 下面是已经创建了一个book的app，建好了数据库连接，已经将book安装到了setting.py里去了，下面这个对应的是book的models.py文件</p>
<p>from django.db import models<br>class book(models.Model):<br>    id = models.AutoField(primary_key=True)    ##将id设置成自动增涨，并设置为关键key<br>    name = models.CharField(max_length=100,null=False)   ###将name设置为字符串，长度为100个字符，null不能为空<br>    author = models.CharField(max_length=100,null=False)   ###同上<br>    price = models.FloatField(null=False,default=0)    ##将price设置为浮点数，null不能为空，如果没有值默认是0</p>
<p>下面生成迁移脚本和建立数据库连接关系</p>
<p>manage.py makemigrations ##生成迁移脚本<br>manage.py migrate ###映射数据库关系</p>
<p><img src="https://post.332b.com/wp-content/uploads/2018/11/20181111174010.png"> 如果你没有写数据库名字，那么他创建的数据库表就是，就是book_book（app的名字+class的名字），下面图片就是刚刚创建的 <img src="https://post.332b.com/wp-content/uploads/2018/11/20181111175828.png"> 猜猜这段代码什么意思？要不要自己动手试试效果</p>
<p>def __str__(self):<br>    return “<a href="Book:({name},{author},{price})">Book:({name},{author},{price})</a>“.format(name=self.name,author=self.author,price=self.price)</p>
<p>一些在视图函数views.py中操作CRM增删改查的方法</p>
<p>from .models import Book    ##先载入一下ORM模块<br>from django.http import HttpResponse<br>def index(requset):<br>    #一、增加数据<br>    # book = Book(name=’西游记’,author=’吴晨歌’,price=’501’)<br>    # book.save()<br>    #二、查询数据  1.通过主键key来查找   2.根据其他条件查询<br>    # book = Book.objects.get(pk=1)  ##get=只查找一条，通过key来查询，pk为primary key的缩写<br>    # print(book)<br>    # book = Book.objects.filter(name=’西游记’) ###通过其他条件查询，返回的是一个所有包含这个值的列表，可以在后面加个.first来获取第一个值<br>    # print(book)<br>    #三、删除数据<br>    # book = Book.objects.get(pk=1)  ##通过get到key之后，再进行删除<br>    # book.delete()<br>    #四、更改数据<br>    # book = Book.objects.get(pk=2)  ##先get到key，再直接通过属性进行修改<br>    # book.price = 2000<br>    # book.save()<br>    return HttpResponse(“书籍操作”)</p>
<h1 id="关于一些ORM数据类型的标签的含义"><a href="#关于一些ORM数据类型的标签的含义" class="headerlink" title="关于一些ORM数据类型的标签的含义"></a>关于一些ORM数据类型的标签的含义</h1><p>一、在CRM中定义一个主键，就必须要设置(primary_key=True)</p>
<h4 id="AutoField"><a href="#AutoField" class="headerlink" title="AutoField"></a>AutoField</h4><p>将值设置为任意值自动增涨，-1、0、1、2、3…………</p>
<h4 id="BigAutoField"><a href="#BigAutoField" class="headerlink" title="BigAutoField"></a>BigAutoField</h4><p>将值设置为从1开始自动增涨，它是64位整形</p>
<h4 id="Booleanfield-和-NullBooleanfield"><a href="#Booleanfield-和-NullBooleanfield" class="headerlink" title="Booleanfield 和 NullBooleanfield"></a>Booleanfield 和 NullBooleanfield</h4><p>从模板层接受True/False，存到数据为tinyint类，存储的时候就是1和0，不能为空null并且这个数据必须设置一个默认值，NullBooleanfield就可以为null</p>
<h4 id="CharField"><a href="#CharField" class="headerlink" title="CharField"></a>CharField</h4><p>是将值以字符串的形式存在数据库，它必须用max_length=100来设置最多长度，如果文字太多，就建议使用longText类型</p>
<h4 id="DateTimeField、TimeField和DateField"><a href="#DateTimeField、TimeField和DateField" class="headerlink" title="DateTimeField、TimeField和DateField"></a>DateTimeField、TimeField和DateField</h4><p>这是那个分别可以在数据库存日期和时间、时间和日期</p>
<h4 id="EmailFaild"><a href="#EmailFaild" class="headerlink" title="EmailFaild"></a>EmailFaild</h4><p>存储邮件字符串，他的长度最大为254个，它也可以是纯文本，他 CharField 文本字符串，最大只能255个字符</p>
<h4 id="FloatField"><a href="#FloatField" class="headerlink" title="FloatField"></a>FloatField</h4><p>浮点数类型</p>
<h4 id="IntegerField"><a href="#IntegerField" class="headerlink" title="IntegerField"></a>IntegerField</h4><p>整形，值的区间负10位到正10位之间的所有数字</p>
<h4 id="BigIntegerField"><a href="#BigIntegerField" class="headerlink" title="BigIntegerField"></a>BigIntegerField</h4><p>大整形，值的区间负19位到正19位之间的所有数字</p>
<h4 id="PostIntegerField"><a href="#PostIntegerField" class="headerlink" title="PostIntegerField"></a>PostIntegerField</h4><p>正整型，值区间为0到正十位数之间</p>
<h4 id="SmallIntegerField"><a href="#SmallIntegerField" class="headerlink" title="SmallIntegerField"></a>SmallIntegerField</h4><p>小整形，值的区间是-32760-32767</p>
<h4 id="PositiveSmallIntegerField"><a href="#PositiveSmallIntegerField" class="headerlink" title="PositiveSmallIntegerField"></a>PositiveSmallIntegerField</h4><p>正小整形，值的区间0-32767</p>
<h4 id="TextField"><a href="#TextField" class="headerlink" title="TextField"></a>TextField</h4><p>大量文本类型，映射数据库中的longtext类型</p>
<h4 id="UUIDField"><a href="#UUIDField" class="headerlink" title="UUIDField"></a>UUIDField</h4><p>只能存储uuid格式的字符串，uuid是一个32位的全球唯一的字符串，一般作为主键</p>
<h4 id="URLField"><a href="#URLField" class="headerlink" title="URLField"></a>URLField</h4><p>类似charfiled，只不过只能存储url格式的字符串，并且默认max_length是200</p>
<h1 id="关于一些ORM数据类型的参数的含义"><a href="#关于一些ORM数据类型的参数的含义" class="headerlink" title="关于一些ORM数据类型的参数的含义"></a>关于一些ORM数据类型的参数的含义</h1><p>null null代表空值，默认情况下代表它是False，不能为空值，空值不等于空字符串 blank 表示这个字段是否可以在表单中可以为空，默认情况下代表它是False，它是表单级别的，null是数据库级别的 db_column 这个字段可以设置数据库的名字，如果没有这个参数，那么将会使用模型中的属性名字 default 为字段设置一个默认的值，它除了可以是一个值以外还可以是一个函数，注意是函数，而不是一个函数的返回值（就是不加括号的函数） unique 在表这个字段中的值是否是唯一的值，一般是来设置手机号/邮箱，可以和null配合使用 primary_key 是否为主键，默认不是</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：QuerySet API详细讲解</title>
    <url>/posts/61c31679.html</url>
    <content><![CDATA[<p>QuerySet API 的对象返回的也是一个QuerySet对象，例如下面的book变量就是一个QuerySet，它可以再次被QuerySet的语法执行</p>
<p>books = Book.objects.filter()<br>###Book.objects.filter().filter()还可以这样玩哦</p>
<p>filter 过滤</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：Memcached缓存系统</title>
    <url>/posts/4b573984.html</url>
    <content><![CDATA[<p>memcached 什么足 memcached: I 1. memcached之前是danga的一个项目，最早是为LiveJoumal服务的，当初设计师为了加速LiveJournal访问速度而幵发的，后来 被很多大型项目采用。官网是<a href="http://www.danga.com或者是memcached.org/">www.danga.com或者是memcached.org</a> 2. Memcached是一个高性能的分布式的内存对象缓存系统，全世界有不少公司采用这个缓存项目来构建大负载的网站，来分担数据 库的压力。Memcached是通过在内存里维护一个统一的巨大的hash表，memcached能存储各种各样的数据，包括图像、视频、 文件、以及数据库检索的结果等。简单的说就是将数据调用到内存中，然后从内存中读取，从而大大提髙读取速度。 3. 哪些情况下适合使用Memcached :存储验证码（图形验证码、短信验证码）、登录session等所有不是至关重要的数据。 安装参考<a href="http://www.runoob.com/memcached/window-install-memcached.html">http://www.runoob.com/memcached/window-install-memcached.html</a> 3. 可能出现的问题： 。提示你没有权限：在打幵cmd的时候，右键使用管理员身份运行。 。提示缺少 pthreadGC2.dll 文件：将 pthreadGC2.dll 文件拷贝到 windows/System32 . 。不要放在含有中文的路径下面。 4. 启动 memcached : -d :这个参数是让memcached在后台运行。 -m :指定占用多少内存。以M为单位，默认为64M。 -p :指定占用的端口。對认端口是11211 -l :哪些ip地址可以链接 linux可以通过usr/bin/memcached执行带有参数的命令，如果正在运行，可以通过ps auxgrep memcached来查看进程ID来杀掉 telnet操作memcached      <code>telnet 127.0.0.1 11211</code>    IP和端口号 set       一个key对应一个值，如果这个key存在就会被覆盖  <code>set key 0(是否压缩) 60（保存时间秒） 7（字符长度）</code> get     获取一个key的值 delate   删除一个key的值 add    添加一个key，如果这个key存在侧会报错 flash_all      删除和清空所有值 incr      让值相加，值必须为数字 decr    让值相减，值必须为数字 stats     查看memcached状态 STAT curr_items 0  key和值的总数 STAT total_connections 4   从开启到现在的总共连接数 STAT curr_connections 1   当前连接数，默认最大连接数为1024</p>
<h2 id="Python-操作memcached"><a href="#Python-操作memcached" class="headerlink" title="Python   操作memcached"></a>Python   操作memcached</h2><p>pip install python-memcached，在代码中import memcache 连接单个服务器</p>
<p>mc = memcache.Client([‘127.0.0.1:11211’],debug=True)</p>
<p>连接多个服务器，达到分布式效果，它会根据自己的算法，随机将值存储到某个服务器</p>
<p>mc = memcache.Client([‘127.0.0.1:11211’,’192.168.1.1:11211’],debug=True)</p>
<p>添加一个值，如果不设置time，它默认是0</p>
<p>mc.set(‘username’,’pingg’,time=120)</p>
<p>添加多个值，值以字典的形式添加进去</p>
<p>mc.set_multi({<br>    ‘ping’:’双方都’,<br>    ‘lop’:’的双方都’<br>},time=120)</p>
<p>获取一个值</p>
<p>username = mc.get(‘username’)</p>
<p>删除一个值</p>
<p>mc.delete(‘ping’)</p>
<p>对值进行相加，如果没有传入delta默认加1</p>
<p>mc.incr(‘age’,delta=10)</p>
<h2 id="Django连接memcached"><a href="#Django连接memcached" class="headerlink" title="Django连接memcached"></a>Django连接memcached</h2><p>setting.py文件输入下面可以连接memcached</p>
<p>CACHES = {<br>    ‘default’: {<br>        ‘BACKEND’: ‘django.core.cache.backends.memcached.MemcachedCache’,<br>        ‘LOCATION’: [<br>            ‘127.0.0.1:11211’,<br>            ‘192.168.1.1:11211’<br>        ]<br>    }<br>}</p>
<p>views.py引用模块</p>
<p>from django.core.cache import cache</p>
<p>views.py在视图函数中添加值</p>
<p>cache.set(‘username’,’zhiliao’,100)</p>
<p>获取一个值</p>
<p>cache.get(‘username’)</p>
<p>自定义django储存值的规则</p>
<p>def KEY_FUNCTION(key, key_prefix, version):<br>    return ‘django:’+key<br>CACHES = {<br>    ‘default’: {<br>        ‘BACKEND’: ‘django.core.cache.backends.memcached.MemcachedCache’,<br>        ‘LOCATION’: [<br>            ‘127.0.0.1:11211’,<br>        ],<br>        ‘KEY_FUNCTION’:KEY_FUNCTION<br>    }<br>}</p>
<p>如果你觉得定个函数很麻烦，也可以用lambda一行代码来代替</p>
<p>lambda key, key_prefix, version:’django:’+key</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：URL规则re_path使用说明</title>
    <url>/posts/9ed28e8b.html</url>
    <content><![CDATA[<p>应用文件夹urls.py：</p>
<p>from django.urls import re_path<br>from . import views<br>urlpatterns = [<br>    re_path(“^$”,views.app_one),<br>    re_path(r”^list/(?P<youinput>\d{3}).html”,views.app_three),<br>##对应的<a href="http://www.xxx.com/list/xxx.html">www.xxx.com/list/xxx.html</a><br>    re_path(r”^book_(?P<youinput>\d{3})_(?P<youe>\d{3})”,views.app_two)<br>##对应的<a href="http://www.xxx.com/book/_xxx/_xxx">www.xxx.com/book\_xxx\_xxx</a><br>]</p>
<p>应用文件夹views.py：</p>
<p>from django.http import HttpResponse<br>def app_one(request):<br>    return HttpResponse(“APP首页”)</p>
<h1 id="Create-your-views-here"><a href="#Create-your-views-here" class="headerlink" title="Create your views here."></a>Create your views here.</h1><p>def app_two(request,youinput,youe):<br>    texta = “你的输入的是：%s”% youinput,youe<br>    return HttpResponse(texta)</p>
<p>def app_three(request,youinput):<br>    textb = “你的输入的是：%s”% youinput<br>    return HttpResponse(textb)</p>
<p>能用path就尽量用path，除非要使用正则表达式才用re_path这样不会把简单的事情搞得复杂</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：with标签的使用方法</title>
    <url>/posts/f6555796.html</url>
    <content><![CDATA[<p>在使用with标签的时候，我们输入<code>zs=person.0</code> 这个相等关系之间是不能有任何空格，with标签的主要作业是定义是在模板中定义变量，一直是with xx=xxx，另外一种是with xx as xxxx，变量只能爱当前with标签生效，开始于with结束于endwith urls.py文件</p>
<p>from django.contrib import admin<br>from django.urls import path<br>from django.shortcuts import render<br>def index(request):<br>    text = {<br>        “person”:[<br>            “张三”,<br>            “李四”,<br>            “王二”,<br>            “铁蛋”<br>        ]<br>    }<br>    return render(request,”index.html”,context=text)</p>
<p>urlpatterns = [<br>    path(‘admin/‘, admin.site.urls),<br>    path(“”,index)<br>]</p>
<p>index.html文件</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
{ % with zs=person.0 %}
    <p>{ { zs } }</p>
    <p>{ { zs } }</p>
    <p>{ { zs } }</p>
{ % endwith %}
{ % with person.1 as zs %}
        <p>{ { zs } }</p>
{ % endwith %}
</body>
</html>

<p>截图 <img src="https://post.332b.com/wp-content/uploads/2018/10/20181023173805.png"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：上下文处理器和中间件</title>
    <url>/posts/7eb155a5.html</url>
    <content><![CDATA[<h2 id="上下文处理器"><a href="#上下文处理器" class="headerlink" title="上下文处理器"></a>上下文处理器</h2><p>上下文处理器是可以返回一些数据，在全局摸板中都可以使用。比如登录后的用户信息，在很多页面中都需要使用，那么我们可以放 在上下文处理器中，就没有必要在每个视图函数中都返回这个对象。 在settings.TEMPLATES.OPTIONS.context_processors中，有许多内晋的上下文处理器。这些上下文处理器的作用如下： 1. django.template.context_processors.debug :増加一个debug和sql_queries变量。在摸板中可以通过他来查看到一些数据库查询。 2. django.template.context_processors.request :增加一个request变量。这个request变量也就是在视圈函数的第一个参数。 例如在模板中使用{ { request.path } }，就可以在模板中显示当前网址路径 3. django.contrib.auth.context_processors.auth : Django有内置的用户系统，这个上下文处理器会増加一个user对象。 例如下面示例中context[‘front_user’]，如果直接用[‘user’]可能会跟上面这个user冲突 4. django.contrib.messages.context_processors.messages :増加一个 messages 变量 在模板中singin.py</p>
<td>
    { % for message in messages %}
    { { message } }
    { % endfor %}
</td>

<p>在视图views.py</p>
<p>from django.contrib import messages<br>messages.add_message(request,messages.INFO,’用户名或者密码错误！’)<br>#也可以这样写messages.info(request,’用户名和密码错误！’)</p>
<p>5. django.template.context_processors.media :在模板中可以读取MEDIA_URL比如想要在模板中使用上传的文件，那么这时候 就需要使用settings.py中设罝的MEDIA_URL来拼接url示例代碍如下： <code>&lt;img src=&quot;&#123; &#123; MEDIA_URL&#125; &#125; &#123; &#123;user.avatar &#125; &#125;&quot; /&gt; </code>   user.avatar为存储到数据库的文件路径 6. django.template.conxext_processors.static :在模板中可以使用 STATIC_URL。 7. django.template.context_processors.csrf :在模板中可以使用 csrf_token 变量来生成一个 csrf_token 在setting.py中context_processors添加后，的直接在模板中的表单中添加</p>
<input type="hidden" name="csrfmiddlewaretoken" value="{ { csrf\_token } }">

<p>或者不添加，直接在模板中使用</p>
<p>{ % csrf_token %}</p>
<p>自定义上下文处理器： 有时候我们想要返回自己的数据。那么这时候我们可以自定义上下文处理器。自定义上下文处理器的步骤如下： 1. 你可以根据这个上下文处理器是属于哪个app，然后在这个app中创建一个文件专门用来存储上下文处理器。比如context_processors.py或者是你也可以专门创建一个Python,用来存储所有的上下文处理器。 setting.py</p>
<p>TEMPLATES = [<br>    {<br>        ‘BACKEND’: ‘django.template.backends.django.DjangoTemplates’,<br>        ‘DIRS’: [os.path.join(BASE_DIR, ‘templates’)]<br>        ,<br>        ‘APP_DIRS’: True,<br>        ‘OPTIONS’: {<br>            ‘context_processors’: [<br>                ‘django.template.context_processors.debug’,<br>                ‘django.template.context_processors.request’,<br>                ‘django.contrib.auth.context_processors.auth’,<br>                ‘django.contrib.messages.context_processors.messages’,<br>                ‘front.context_processors.front_user’,<br>            ],<br>        },<br>    },<br>]</p>
<p>2. 在你定义的上下文处理器文件中，定义一个函数，这个函数只有一个request参数。这个函数中处理完自己的逻辑后，把需要返 回给模板的数据，通过字典的形式返回。如果不需要返回任何数据，那么也必須返回一个空的字典。示例代码如下： context_processors.py</p>
<p>from .models import User<br>def front_user(request):<br>    user_id = request.session.get(‘user_id’)<br>    context = {}<br>    if user_id:<br>        try:<br>            user = User.objects.get(pk=user_id)     ###因为get获取不到值，就会出现异常报错，所以要用try处理一下<br>            context[‘front_user’] = user<br>        except:<br>            pass<br>    return context</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件是在request和response处理过程中的一个插件。比如在request到达视圏数之前，我们可以使用中间件来做一些相关的 事情，比如可以判断当前这个用户有没有登录，如果登录了，就绑定一个user对象到request上。也可以response到达浏览器 之前，做一些相关的处理，比如想要统一在response上设罝一cookie信息等。 自定义中间件： 中间件所处的位置没有规定，只要是放到项目当中即可。一般分为两种情况，如果中间件是属于某个app的，那么可以在这 个app下面创建一个python文件用来存放这个中间件，也可以专门创建一个Python包，用来存放本项目的所有中间件。创建中间 件有两种方式，一种是使用函数、一种是使用类，接下来对这两种方式做个介绍： 在setting.py中添加</p>
<p>MIDDLEWARE = [<br>    ‘django.middleware.clickjacking.XFrameOptionsMiddleware’,<br>    ‘front.middleware.Frontusermiddleware’<br>]</p>
<p>类中间件的添加方法</p>
<p>class Frontusermiddleware(object):<br>    def __init__(self,get_response):<br>        print(‘启动后执行的命令’)<br>        self.get_response = get_response<br>    def __call__(self, request):<br>        print(‘request到达视图前执行的命令’)<br>        user_id = request.session.get(‘user_id’)<br>        if user_id:<br>            try:<br>                user = User.objects.get(pk=user_id)<br>                request.front_user = user<br>            except:<br>                request.front_user = None<br>        else:<br>            request.front_user = None<br>        response = self.get_response(request)    #####分割线<br>        print(‘response到达浏览器前执行的代码’)<br>        return response</p>
<p>函数添加中间键的方法</p>
<p>def front_user_middlewrae(get_response):<br>    print(‘启动后执行的命令’)<br>    def middleware(request):<br>        print(‘request到达视图前执行的命令’)<br>        user_id = request.session.get(‘user_id’)<br>        if user_id:<br>            try:<br>                user = User.objects.get(pk=user_id)<br>                request.front_user = user<br>            except:<br>                request.front_user = None<br>        else:<br>            request.front_user = None<br>        response = get_response(request)<br>        print(‘response到达浏览器前执行的代码’)<br>        return response<br>    return middleware</p>
<p>1. django.middleware.common.CommonMiddleware :通用中间件他的作用如下： 限制settings.DISALLOWED_USER_AGENTS中指定的请求头来访问本网站。DISALLOWED_USER_AGENTS是一个正则表达式的列表。示例代码如下：</p>
<p>import re</p>
<p>DISALLOWED_USER_AGENTS =[</p>
<pre><code>re.compile(r&#39;^\\s$^$&#39;),

re .compile(r&#39;.\*PhantomJS.\*&#39;)
</code></pre>
<p>]</p>
<p>2.django.middleware.gzip.GZipMiddleware :将响应数据进行压缔。如果内容长度少于200个长度，那么就不会压缩。 3.django.contrib.messages.middleware.MessageMiddleware :消息处理相关的中间件。 4. django.middleware.security.SecurityNiddleware :做了一些安全处理的中件。比如设置XSS防御的请求头，比如做了http协议转https协议的工作等。 5. django.contrib.sessions.middleware.SessionMiddleware : session中间件。会给request 添加—个处理好的session对象。 6.django.contrib.auth.middleware.AuthenticationMiddleware :会给request添加一个user对象的中间件。 7. django.middleware.csrf.CsrfViewMiddleware : CSRF 保护的中间件。 8. django.middleware.clickjacking.XFrameOptionsMiddleware :做了clickjacking攻击的保护。clickjacking 保护是攻击者在 自己的病毒网站上，写一个诱惑用户点击的按钮，然后使用iframe的方式将受攻击的网站(比如银行网站)加载到自己的网站 上去，并将其设罝为透明的、用户就看不到、然后再把受攻击的网站(比如银行网站〉的转账按钮定位到病毒网站的按钮上，这 样用户在点击病毒网站上按钮的时候，实际上点击的是受攻击的网站(比如银行网站)上的按钮，从而实现了在不知不觉中给攻击者转账的功能。</p>
<h2 id="注意：Django-中间件的排序是有循序的"><a href="#注意：Django-中间件的排序是有循序的" class="headerlink" title="注意：Django 中间件的排序是有循序的"></a>注意：Django 中间件的排序是有循序的</h2>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：向网页输出以字典key和列表中值</title>
    <url>/posts/b45c3548.html</url>
    <content><![CDATA[<p>请先映射好URL链接，注意字典中的keys不能跟dict的语法同名，否者会造成冲突，views.py代码</p>
<p>from django.shortcuts import render<br>def index(requuest):<br>    xcontext = {<br>        “username” :”admin”<br>    }<br>    return render(requuest,”index.html”,context=xcontext)</p>
<p>模板index.html源码</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
{ { username } }
</body>
</html>

<p>这个是一个类，面对对象的引用方法 views.py文件代码</p>
<p>from django.shortcuts import render<br>class Person(object):<br>    def __init__(self,username):<br>        self.username = username<br>def index(requuest):<br>    p = Person(“zhiliao”)<br>    context = {<br>        “person” :p<br>    }<br>    return render(requuest,”index.html”,context=context)</p>
<p>模板文件index.html</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
{ { person.username } }
</body>
</html>

<h1 id="这个是获取列表中的值的方法"><a href="#这个是获取列表中的值的方法" class="headerlink" title="这个是获取列表中的值的方法"></a>这个是获取列表中的值的方法</h1><p>例如python中有个列表<code>p = [&quot;你好&quot;,&quot;很好&quot;,&quot;非常好&quot;]</code> ，在模板中怎么去实现呢？ 在模板不能用中括号，写入的方式类似字典，例如我要输出p列表中的第一个值，就这样写<code>&#123; &#123; p.0 &#125; &#125;</code></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：在模板index中执行判断if、else判断</title>
    <url>/posts/56aab06b.html</url>
    <content><![CDATA[<p>在Django模板中执行判断语句，可以执行if判断语句，它必须以{ % if %}开始，以{ % endif %if}结束，在模板中快速生成一个if和endif的快捷键为输入if后按下Tab键，在模板中使用注释的快捷键是Ctrl + / if判断url.py文件示例</p>
<p>from django.urls import path<br>from django.shortcuts import render</p>
<p>def index(request):<br>    return render(request,”index.html”,context=text)<br>text ={<br>    “age”:18<br>}</p>
<p>urlpatterns = [<br>    path(‘admin/‘, admin.site.urls),<br>    path(“”,index)<br>]</p>
<p>index.html示例</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
首页
{ % if age < 18 %}
    <p>你是未成年人，不能进入网吧</p>
{ % elif age >= 18 %}
    <p>你已经成年，可以进入网吧了</p>
{ % else %}
    <p>貌似有点异常</p>
{ % endif %}
</body>
</html>]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：在模板中执行for...in的循环和列表显示文字</title>
    <url>/posts/8c1091f5.html</url>
    <content><![CDATA[<p>1.在django模板当中reversed可以将for循环的结果倒序显示，用for循环字典，有三个语法items(取key和值)、keys（去所有的key）、values（取所有的值） 2.<code>forloop.counter</code> 从1开始获取当前循环次数，如果是<code>forloop.counter0</code> 则代表从0开始,<code>forloop.revcounter</code> 跟<code>forloop.counter</code> 得到的结果相反，用法一样 <code>forloop.first</code> 判断一个循环次数是否在第一次 <code>forloop.last</code> 判断一个循环次数是否在最后一次 <code>forloop.parentloop</code> 未知 3.除了for…in以外，还有一个for…in…empty跟for…in使用方法一样，for循环没有任何值的时候，它就会执行empty里面的语法，empty一般用在评论里面，假如没有评论就显示empty里面的语法“当前没有任何评论”，如果有就执行for…in…遍历评论 urls.py文件</p>
<p>from django.urls import path<br>from django.shortcuts import render</p>
<p>def index(request):<br>    return render(request,”index.html”,context=text)<br>text ={<br>    “danchi”:[“三国”,”日本”,”土匪”,”输入法”,”苹果皮”],<br>    “book”:[<br>        {“name”:”三国演义”,<br>         “author”:”罗贯中”,<br>         “price”:99},<br>        {“name”:”水浒传”,<br>         “author”:”施耐庵”,<br>         “price”:80<br>         },<br>        {“name”:”西游记”,<br>         “author”:”罗贯中”,<br>         “price”:89}]<br>}</p>
<p>urlpatterns = [<br>    path(‘admin/‘, admin.site.urls),<br>    path(“”,index)<br>]</p>
<p>index.html文件</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<ul>
    { % for foo in danchi reversed %}
        <li>{ { foo } }</li>
    { % endfor %}
</ul>
{ % for b1,b2 in book.0.items %}
<li>{ { b1 } }/{ { b2 } }</li>
{ % endfor %}
<table>
    <thead>
        <tr>
            <td>序号</td>
            <td>书面</td>
            <td>作者</td>
            <td>价格</td>
        </tr>
    </thead>
    <tbody>
        { % for b3 in book %}
                { % if forloop.parentloop %}
                    <tr style="background: red;">
                { % elif forloop.last %}
                    <tr style="background: aquamarine;">
                { % else %}
                    <tr>
                { % endif %}
                <td>{ { forloop.revcounter } }</td>
                <td>{ { b3.name } }</td>
                <td>{ { b3.author } }</td>
                <td>{ { b3.price } }</td>
            </tr>

<pre><code>    &#123; % endfor %&#125;

&lt;/tbody&gt;
</code></pre>
</table>

</body>
</html>

<p><img src="https://post.332b.com/wp-content/uploads/2018/10/20181023170213-256x300.png"></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：加载一个.html文件到网页当中去</title>
    <url>/posts/d4aa466c.html</url>
    <content><![CDATA[<p>现在项目templates新建一个index.html文件，在项目中做好url映射，在views.py设置如下函数 这个是代码示例一</p>
<p>from django.template.loader import render_to_string<br>from django.http import HttpResponse<br>def index(request):<br>    html = render_to_string(“index.html”)<br>    return HttpResponse(html)</p>
<p>这个是代码示例二</p>
<p>from django.shortcuts import render<br>def index(request):<br>    return render(request,”index.html”)</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：对用户注册数据进行限制</title>
    <url>/posts/98c3e256.html</url>
    <content><![CDATA[<p>下面代码实现一个简单的验证，主要作用 1.对输入的手机号检查是否是唯一的手机号 2.对输入的两次密码进行验证 forms.py  表单</p>
<p>from django import forms<br>from django.core import validators<br>from .models import User<br>class Index(forms.Form):<br>    user = forms.CharField(max_length=10)<br>    tel = forms.CharField(validators=[validators.RegexValidator(r’1[3456789]\d{9}’,message=’手机号码格式错误’)])<br>    pwd1 = forms.CharField(max_length=16,min_length=6)<br>    pwd2 = forms.CharField(max_length=16, min_length=6)</p>
<pre><code>def clean\_tel(self):
    tel = self.cleaned\_data.get(&#39;tel&#39;)  ###可以对tel字段进行二次验证,优先执行本段，然后去执行视图函数中的字段
    exists = User.objects.filter(tel=tel).exists()   ###查找是否有相同字段
    if exists:
        raise forms.ValidationError(message=&#39;tel验证失败，因为已经存在了&#39;) ###抛出异常，停止执行
    return tel

def clean(self):
    cleaned\_data = super().clean()
    pwd1 = cleaned\_data.get(&#39;pwd1&#39;)
    pwd2 = cleaned\_data.get(&#39;pwd2&#39;)
    if pwd1 != pwd2:
        raise forms.ValidationError(message=&#39;两次密码不一样&#39;)
    else:
        return cleaned\_data
</code></pre>
<p>views.py文件</p>
<p>from django.views.generic import View<br>from django.shortcuts import render<br>from .models import User<br>from .froms import Index<br>from django.http import HttpResponse<br>class Index1(View):<br>    def get(self,request):<br>        return render(request,’io.html’)<br>    def post(self,request):<br>        form = Index(request.POST)<br>        if form.is_valid():<br>            print(‘good2’)<br>            user1 = form.cleaned_data.get(‘user’)  ###提取已经验证过的数据<br>            tel1 = form.cleaned_data.get(‘tel’)<br>            User.objects.create(user=user1,tel=tel1)<br>            return HttpResponse(‘执行成功’)<br>        else:<br>            print(form.errors.get_json_data())<br>            return HttpResponse(‘执行失败’)</p>
<p>models.py</p>
<p>from django.db import models</p>
<p>class User(models.Model):<br>    user = models.CharField(max_length=10)<br>    tel = models.CharField(max_length=11)</p>
<p>index.html模板</p>
<form action="" method="post">
    <table>
        <tr>
            <td>用户名:</td>
            <td><input type="text" name="user"></td>
        </tr>
        <tr>
            <td>手机号：</td>
            <td><input type="text" name="tel"></td>
        </tr>
        <tr>
            <td>密码1：</td>
            <td><input type="password" name="pwd1"></td>
        </tr>
        <tr>
            <td>密码2：</td>
            <td><input type="password" name="pwd2"></td>
        </tr>
        <tr>
            <td></td>
            <td><input type="submit" value="提交"></td>
        </tr>
    </table>
</form>

<p>用户名和密码 froms.py</p>
<p>from django import forms<br>from django.core import validators<br>from .models import Book,User</p>
<p>class AddBookForm(forms.ModelForm):<br>    class Meta:<br>        model = Book<br>        fields = ‘__all__‘<br>        #fields = [‘title’,’page’]<br>        #exclude = [‘price’]<br>        error_messages = {<br>            ‘page’:{<br>                ‘required’:’请传入page参数’,<br>                ‘invalid’:’请输入一个可用的page参数’<br>            },<br>            ‘title’:{<br>                ‘max_length’:’title不能超过100字符’<br>            },<br>            ‘price’:{<br>                ‘max_value’:’最大不能超过100元’<br>            }</p>
<pre><code>    &#125;
</code></pre>
<p>class Reg(forms.ModelForm):<br>    pw1 = forms.CharField(max_length=16,min_length=6)<br>    pw2 = forms.CharField(max_length=16,min_length=6)<br>    def clean(self):<br>        cleaned_data = super().clean()    ###调用自身重写clean<br>        pw1 = cleaned_data.get(‘pw1’)<br>        pw2 = cleaned_data.get(‘pw2’)<br>        if pw1 != pw2:<br>            raise forms.ValidationError(message=’密码两次输入不一致哦’)<br>        return cleaned_data<br>    class Meta:<br>        model = User<br>        exclude = [‘password’]</p>
<p>models.py</p>
<p>from django.db import models<br>from django.core import validators<br>class Book(models.Model):<br>    title = models.CharField(max_length=100)<br>    page = models.IntegerField()<br>    price = models.FloatField(validators=[validators.MaxValueValidator(limit_value=100)])</p>
<p>class User(models.Model):<br>    username = models.CharField(max_length=100)<br>    password = models.CharField(max_length=16)<br>    telephone = models.CharField(max_length=11)</p>
<h1 id="Create-your-models-here"><a href="#Create-your-models-here" class="headerlink" title="Create your models here."></a>Create your models here.</h1><p>views.py</p>
<p>from django.shortcuts import render<br>from django.views.generic import View<br>from django.shortcuts import render<br>from .models import User<br>#from .froms import Index<br>#from .froms import AddBookForm<br>from django.views.decorators.http import require_POST<br>from .forms import AddBookForm,Reg<br>from django.http import HttpResponse<br>from django import forms<br>def index(request):<br>    return HttpResponse(‘执行首页’)<br>def add_book(request):<br>    form = AddBookForm(request.POST)<br>    if form.is_valid():<br>        # title = form.cleaned_data.get(‘title’)<br>        # page = form.cleaned_data.get(‘page’)<br>        # price = form.cleaned_data.get(‘price’)<br>        # print(‘title:%s’% title)<br>        # print(‘page:%s’ % page)<br>        # print(‘price:%s’% price)<br>        form.save()<br>        return HttpResponse(‘执行成功’)<br>    else:<br>        print(form.errors.get_json_data())<br>        return HttpResponse(‘执行失败’)</p>
<p>@require_POST<br>def reg(request):<br>    form = Reg(request.POST)<br>    if form.is_valid():<br>        user = form.save(commit=False)<br>        user.password = form.cleaned_data.get(‘pw1’)<br>        user.save()<br>        return HttpResponse(‘注册成功’)<br>    else:<br>        print(form.errors.get_json_data())<br>        return HttpResponse(‘注册失败’)</p>
<p>  3       3</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：导入模板和模板继承</title>
    <url>/posts/97763a3b.html</url>
    <content><![CDATA[<p>导入模板是为了避免代码反复写，可以通过将反复使用的代码定义成一个模板，导入到另外一个模板，最常使用的是页头和页脚这些重复的页面</p>
<p>{ % include “header.html” %}     ##在同一templates目录下</p>
<p>在导入header.html父模板的时候，在访问子模板的时候，父模板可以使用子模板的变量 1.A子模板引用了B父模板之后，在访问A的时候，那么B就可以使用A里面的所有变量， 2.A和C子模板同时引用了B父模板，当B里面有A的变量，在访问C模板的时候，是无法使用A的变量的。 如果你是上面第2个情况，C子模板引用了B父模板，B父模板有A的变量，要想在C模板使用A的变量，那就必须给A变量定义一个值</p>
<p>{ % include “header.html”  with akey=”zhilio” %}    ####假如这是C模板，#akey是A模板的变量，是无法直接使用，用with akey=”xxx”就可以给它定义一个值</p>
<p>模板继承是子模板继承父模板的所有内容，语法如下，extends标签它必须放在模板的第一行</p>
<p>{ % extends “base.html”%}         #子模板继承父模板base.html的方法</p>
<p>模板继承block语法的用法，相当于在父模板中开了一个口子，可以在子模板中添加任意内容到父模板中去 在父模板中开一个口子的方法</p>
<div calss="content" >
 { % block content %}
 { % endblock %}
</div>

<p>在子模板中添加内容进去的方法，block里面添加的内容才会显示，其他不会显示</p>
<p>{ % extends “base.html”%}<br>{ % block content %}<br>我是添加的内容，嘻嘻<br>{ % endblock %}</p>
<p>如果父模板和子模板的{ % block content %}和{ % endblock %}都有添加的内容，那访问子模板的时候只会显示子模板的内容，如果要同时显示子和父模板的内容</p>
<p>{ { block.super  } }      ###在子模板添加这个就会显示父模板的内容</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：相关的时间处理pytz模块navie和aware时间</title>
    <url>/posts/72f1cf69.html</url>
    <content><![CDATA[<h1 id="navie和aware时间的区别"><a href="#navie和aware时间的区别" class="headerlink" title="navie和aware时间的区别"></a>navie和aware时间的区别</h1><p>navie时间是不知道自己表示的是那个时区的时间 aware时间是明确的知道自己是那个时区的时间 ##注意：在windows中，这个选项被系统优化了</p>
<h1 id="pytz库"><a href="#pytz库" class="headerlink" title="pytz库:"></a>pytz库:</h1><p>在安装django的时候就会自动安装pytz库，它可以协助我们Django来处理时间</p>
<h1 id="astimezone方法："><a href="#astimezone方法：" class="headerlink" title="astimezone方法："></a>astimezone方法：</h1><p>将一个时区的时间转换成另一个时区的时间，这个转换对象不能为navie时间</p>
<h1 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h1><p>可以将时间的某些属性进行更改 import pytz from datetime import datetime now = datetime.now()   ##这是一个navie时间 utc_timezone = pytz.timezone(“UTC”)    ##定义一个UTC时间 utc_timezone = now.astimezone(utc_timezone)    ###将当前时间转换为UTC时区的时间 —<code>ValueError: astimezone() requires an aware datetime   ##执行会抛出一个异常，原因是navie时间不能调用astimezone方法</code> now = now.replace(tzinfo=pytz.timezone(‘Asia/Shanghai’))     ###通过添加时区参数，将navie转换awaretime，这样就不会报错 utc_timezone = now.astimezone(utc_timezone)</p>
<h1 id="DateTimeField中的auto-now-add和"><a href="#DateTimeField中的auto-now-add和" class="headerlink" title="DateTimeField中的auto_now_add和"></a>DateTimeField中的auto_now_add和</h1><h1 id="auto-now区别"><a href="#auto-now区别" class="headerlink" title="auto_now区别"></a>auto_now区别</h1><p>time = models.DateTimeField(auto_now_add=True) ###models.py文件</p>
<p>auto_now返回当前的时间，每次执行save都会将当前时间放入数据库，auto_now_add将当前时间放入数据库，如果已经执行了一次，就不会再执行</p>
<h1 id="关于setting-py中的USE-TZ和TIME-ZONE"><a href="#关于setting-py中的USE-TZ和TIME-ZONE" class="headerlink" title="关于setting.py中的USE_TZ和TIME_ZONE"></a>关于setting.py中的USE_TZ和TIME_ZONE</h1><p>TIME_ZONE = ‘Asia/Shanghai’<br>USE_TZ = True</p>
<p>如果你将USE_TZ设为False，那么获取的就是一个navie时间，TIME_ZONE设置成本机的时区，方便国际化</p>
<h1 id="django-utils-timezone中now和localtime"><a href="#django-utils-timezone中now和localtime" class="headerlink" title="django.utils.timezone中now和localtime"></a>django.utils.timezone中now和localtime</h1><p>同时他也有个now.astimezone的用法，类似datatime,astimezone</p>
<p>import django.utils.timezone from now,localtime<br>now()       ###返回的是一个UTC时间<br>localtime(now())     ###返回的是一个本地时间</p>
<h1 id="Django模版中的时间高级用法"><a href="#Django模版中的时间高级用法" class="headerlink" title="Django模版中的时间高级用法"></a>Django模版中的时间高级用法</h1><p>当你把now()输出到模版之后，Django输出网页会自动转换成用户当地时间</p>
<p>{ % load nowtime %}        ##也可以这样{ % load nowtimelocaltime %}</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：自带用户管理体系</title>
    <url>/posts/5c6810d1.html</url>
    <content><![CDATA[<p>验证和授权概述 Django有一个内置的授权系统。他用来处理用户、分组、权限以及基于cookie的会话系统。Django的授权系统包括验证和授权两 个部分。验证是验证这个用户是否是他声称的人（比如用户名和密码始证，角色验证〉、授权是给与他相应的权限。Django内置的 权限系统包括以下方面：</p>
<ol>
<li> 用户</li>
<li> 权限。</li>
<li> 分组。</li>
<li> 一个可以配置的密码哈希系统，</li>
<li> 一个可插拔的后台管理系统。</li>
</ol>
<p>使用授权系统： 默认中创建完一个django项目后，其实就已经集成了授权系统，那哪些部分是跟授权系统相关的配置呢。以下做一个简单列表： INSTALLED_APPS : 1. django.contrib.auth :包含了一个核心授权框架，以及大部分的模型定义。 2. django.contrib.contenttypes : Content Type 系统，可以用来关联模型和权限。 中间件 1. SessionMiddleware :用来管理 session 2. AuthenticationMiddieware :用来处理和当前session相关联的用户。   User摸型是这个框架的核心部分。他的完整的路径是在django.contrib.auth.models.User。以下对这个User对象倣一个简单了 解： 字段： 内罝的User模型拥有以下的字段： 1. username :用户名。150个字符以内。可以包含数字和英文字符，以及_、@、+、.和-字符。不能为空，且必须唯一 2. first_name :歪果仁的first_name ,在30;字符以内。可以为空。 3. last_name :歪果仁的last_name，在150个字符以内。可以为空。 4. email :邮箱。可以为空。 5. password :密码。经过哈希过后的密码。 6. groups :分组。一个用户可以属于多个分组，一个分组可以拥有多个用户。groups这个字段是跟Group的一个多对多的关 系。 7. user_permissions :权限。一个用户可以拥有多个权限，一个权限可以被多个用户所有用。和Permission属于一种多对多的关 系。 8. is_staff :是否可以进入到admin的站点，代表是否是员工。 9. is_active :是否是可用的。对于一些想要删除账号的数据，我们设晋这个值为False就可以了，而不是真正的从数据库中删 除。 10. is_superuser :是否是超级管理员。如果是超级管理员，那么拥有整个网站的所有权限。 11 last_login :上次登录的时间。 12. date_joined :账号创建的时间。</p>
<h2 id="在视图函数中操作账户"><a href="#在视图函数中操作账户" class="headerlink" title="在视图函数中操作账户"></a>在视图函数中操作账户</h2><p>1、添加一个普通账户</p>
<p>from django.contrib.auth.models import User<br>user = User.objects.create_user(username=’a84992’,email=’1140881@qq.com’,password=’111111’)   # 注册普通账户</p>
<p>2、添加一个管理账户</p>
<p>#user = User.objects.create_superuser(username=’a84991’, email=’1140882@qq.com’, password=’111111’)   #注册一个管理员账户</p>
<p>3.修改一个账户密码</p>
<p>user = User.objects.get(pk=1)<br>user.set_password(‘111111’)<br>user.save()     #修改密码</p>
<p>4.验证一个账户密码</p>
<p>from django.contrib.auth import authenticate      ##用户验证模块，如果错误返回None</p>
<p>user = ‘a84991’<br>password = ‘111111’<br>user = authenticate(request,username=user,password=password)<br>if user:    ###如果验证成功<br>    print(‘登陆成功：%s’% user.username)<br>else:<br>    print(‘用户名或密码错误！’)</p>
<p>扩展用户模型。 Django内置的User模型虽然已经足够强大了。但是有时候还是不能满足我们的需求。比如在验证用户登录的时候，他用的是用户名作为验证，而我们有时候需要通过手机号码或者邮箱来进行验证。还有比如我们想要增加一些新的字段。那么这时候我们就雷要扩 展用户模型了。扩展用户摸型有多种方式。这里我们来一一讨论下。 1.设置Proxy模型： 主要是针对User进行代理，只能添加属性，不能添加任何Field字段，否则报错 如果你对Django提供的字段，以及验证的方法都比较满意，没有什么需要改的。但是只是雷要在他原有的基础之上增加一些操作的 方法。那么建议使用这种方式。示例代码如下：</p>
<p>from django.contrib.auth.models import User<br>class Person(User):<br>    class Meta:<br>        proxy = True</p>
<pre><code>@classmethod              ###classmethod类方法，cls引用类本身
def get\_blacklist(cls):
    return cls.objects.filter(is\_active=False)
</code></pre>
<p>在以上，我们定义了一个Person类，让他继承自User，并且在Meta中设置proxy=True ,说明这个只是User的一个代理模型。 他并不会影响原来User模型在数据库中表的结构。以后如果你想方便的获取所有黑名单的人，那么你就可以通 过Person.get_blacklist()就可以获取到.并且User.objects.all()和Person.objects.all()其实是等价的。因为他们都是 从User这个模型中获取所有的数据。 2.一对一外键的方式实现User模型的扩展</p>
<p>####models.py<br>from django.db import models<br>from django.contrib.auth.models import User<br>from django.dispatch import receiver     #监听模块<br>from django.db.models.signals import post_save   #数据保存后通知模块<br>class UserExtension(models.Model):<br>    user = models.OneToOneField(User,on_delete=models.CASCADE,related_name=’extension’)<br>    telephone = models.CharField(max_length=11)<br>    school = models.CharField(max_length=100)</p>
<p>@receiver(post_save,sender=User)<br>def handler_user_extension(sender,instance,created,**kwargs):  #sender发送者，instance实例User在保存时候的对象，created是否是新创建，user是上面UserExtension中的user<br>    if created:<br>        UserExtension.objects.create(user=instance)<br>    else:<br>        instance.extension.save()</p>
<p>在视图中操作的方法</p>
<p>from django.http import HttpResponse<br>from django.contrib.auth.models import Userdef one_view(request):<br>    user = User.objects.create_user(username=’zhiliao3’,email=’2115445@qq.com’,password=’111111’)<br>    user.extension.telephone = ‘11111441111’<br>    user.save()<br>    return HttpResponse(‘one to one’)</p>
<p>如果需要使用验证用户手机号和密码，可以在视图中这样操作</p>
<p>def my_authenticate(tetephone,password):<br>    user = User.objects.filter(tetephone=tetephone).first()<br>    if user:<br>        is_correct = user.check_password(password)<br>        if is_correct:<br>            return user<br>        else:<br>            None<br>    else:<br>        None<br>def verify(request):<br>    telephone = request.POST.get(‘telephone’)<br>    password = request.POST.get(‘password’)<br>    user = my_authenticate(telephone,password)<br>    if user:<br>        print(‘验证成功’)<br>    else:<br>        print(‘验证失败’)</p>
<p>3.修改继承类AbstractUser，重新定义User，AbstractUser是User的父类 一、改变USER的结构，在USER里面直接添加字段 定义User首先在setting.py中添加制定用户模型，不用写成front.models.User，它会自动识别</p>
<p>AUTH_USER_MODEL = ‘front.User’</p>
<p>我们先来继承User所有的字段，定义新的字段或者直接覆盖原来的字段，USERNAME_FIELD制定新的验证字段为手机号，而不是原来的username</p>
<p>from django.contrib.auth.models import AbstractUser,UserManager</p>
<p>class User(AbstractUser):<br>    telephone = models.CharField(max_length=11,unique=True)<br>    school = models.CharField(max_length=100)<br>    USERNAME_FIELD = ‘telephone’</p>
<p>BaseUserManager定义保存属性，由于它默认定义的是username，我们要将它更改为手机号，所以也需要重新定义</p>
<p>class UserMangen(BaseUserManager):<br>    def _create_user(self,telephone,username,password,**kwargs):   #下划线开头为私有变量，只能在这个类里面使用<br>        if not telephone:<br>            raise ValueError(‘必须要传递一个手机号’)<br>        if not password:<br>            raise ValueError(‘必须要输入密码’)<br>        user = self.model(telephone=telephone,username=username,password=password,**kwargs)<br>        user.set_password(password)<br>        user.save()<br>        return user</p>
<pre><code>def create\_user(self,telephone,username,password,\*\*kwargs):
    kwargs\[&#39;is\_superuser&#39;\] = False
    return self.\_create\_user(telephone=telephone,username=username,password=password,\*\*kwargs)

def create\_superuser(self,telephone,username,password,\*\*kwargs):
    kwargs\[&#39;is\_superuser&#39;\] = True
    return self.\_create\_user(telephone=telephone, username=username, password=password,\*\*kwargs)
</code></pre>
<p>如果我们需要在视图中添加数据，就可以这样操作，如果要验证用户和密码，参考上面的‘’验证一个账户密码‘’，注意user是一个手机号，不再是一个用户名，authenticate(request,username=user,password=password)</p>
<p>from .models import User<br>from django.http import HttpResponse</p>
<p>def one(request):<br>    telephone = ‘18894148309’<br>    password = ‘111111’<br>    username = ‘zhiloiao’<br>    user = User.objects.create_user(telephone=telephone,username=username,password=password)<br>    print(user.username)<br>    return  HttpResponse(‘index’)</p>
<p>二、直接自定义USER的所有的字段 setting.py里面的AUTH_USER_MODEL = ‘front.User’不能少，下面是models.py的内容，如果要自己定义USER模型，那么必须在第一次运行migrate命令之前先创建好模型</p>
<p>from django.db import models<br>from django.contrib.auth.models import BaseUserManager,PermissionsMixin,UserManager<br>from django.contrib.auth.base_user import AbstractBaseUser</p>
<p>class UserMangen(BaseUserManager):<br>    def _create_user(self,telephone,username,password,**kwargs):   #下划线开头为私有变量，只能在这个类里面使用<br>        if not telephone:<br>            raise ValueError(‘必须要传递一个手机号’)<br>        if not password:<br>            raise ValueError(‘必须要输入密码’)<br>        user = self.model(telephone=telephone,username=username,password=password,**kwargs)<br>        user.set_password(password)<br>        user.save()<br>        return user</p>
<pre><code>def create\_user(self,telephone,username,password,\*\*kwargs):
    kwargs\[&#39;is\_superuser&#39;\] = False
    return self.\_create\_user(telephone=telephone,username=username,password=password,\*\*kwargs)

def create\_superuser(self,telephone,username,password,\*\*kwargs):
    kwargs\[&#39;is\_superuser&#39;\] = True
    return self.\_create\_user(telephone=telephone, username=username, password=password,\*\*kwargs)
</code></pre>
<p>class User(AbstractBaseUser,PermissionsMixin):     #PermissionsMixin为用户权限验证功能<br>    telephone = models.CharField(max_length=11,unique=True)<br>    email = models.CharField(max_length=100,unique=True)<br>    username = models.CharField(max_length=100)<br>    is_active = models.BooleanField(default=True)</p>
<pre><code>USERNAME\_FIELD = &#39;telephone&#39;
REQUIRED\_FIELDS = \[\]

objects = UserManager()

def get\_full\_name(self):
    return self.username
def get\_short\_name(self):
    return self.username
</code></pre>
<p>在views.py里面的字段，添加用户数据</p>
<p>from django.http import HttpResponse<br>from .models import User<br>def index(request):<br>    sd = User.objects.create_user(telephone=’18894148319’,username=’zhil1ao’,email=’1111@qq.com’,password=’1111111’)<br>    # sd.set_password(‘1111111’)<br>    # sd.save()<br>    return HttpResponse(‘index’)</p>
<p>我们可以用一个模块读取setting.py设置AUTH_USER_MODEL中的制定的User模型，这样就方便我们动态的去修改</p>
<p>from django.contrib.auth import get_user_model<br>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    author = models.ForeignKey(get_user_model(),on_delete=models.CASCADE)</p>
<p>权限和分组 登录、登录限制和注销，下面是代码演示下载，<a href="https://post.332b.com/wp-content/uploads/2018/12/login_and_logout.zip">login_and_logout.zip</a> 登录from django.contrib.auth import login 使用方法</p>
<p>def my_login(request):    ###千万不要直接用login函数，否则会跟django自带的函数冲突<br>    if request.method == ‘GET’:<br>        return render(request,’login.html’)<br>    else:<br>        form = Loginform(request.POST)<br>        if form.is_valid():<br>            telephone = form.cleaned_data.get(‘telephone’)<br>            password = form.cleaned_data.get(‘password’)<br>            remember = form.cleaned_data.get(‘remember’)<br>            user = authenticate(request,username=telephone,password=password)<br>            if user and user.is_active:<br>                login(request,user)<br>                if remember:<br>                    request.session.set_expiry(None)    #session两周过期<br>                    return HttpResponse(‘登录成功’)<br>                else:<br>                    request.session.set_expiry(0)   #session浏览器关闭就过期<br>                    next = request.GET.get(‘next’)<br>                    if next:<br>                        return redirect(next)         ###如果有传入来源url参数，登录成功就跳转到该URL<br>                    else:<br>                        return HttpResponse(‘登录成功’)<br>            else:<br>                #print(form.errors)<br>                return HttpResponse(‘手机号或者密码错误’)<br>        else:<br>            print(form.errors)<br>            return redirect(reverse(‘login’))</p>
<p>注销from django.contrib.auth import logout使用方法</p>
<p>def my_logout(request):<br>    logout(request)<br>    return HttpResponse(‘注销成功’)</p>
<p>登录限时模块的示例 from django.contrib.auth.decorators import login_required ##验证用的模块户是否登录</p>
<p>@login_required(login_url=r’/login/‘)   ###不指定login_url默认会跳转到accounts/login/?next=/view/<br>def logineded_view(request):<br>    return HttpResponse(‘个人中心，只有登录才能查看’)</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：聚合函数</title>
    <url>/posts/7c2366e.html</url>
    <content><![CDATA[<p>  1.所有的聚合函数都在’django.db.models’下面</p>
<h4 id="Avg为统计所对应的id所有值的平均值"><a href="#Avg为统计所对应的id所有值的平均值" class="headerlink" title="Avg为统计所对应的id所有值的平均值"></a>Avg为统计所对应的id所有值的平均值</h4><p>2.聚合函数不能单独的执行，需要放在一些可以执行聚合函数的方法下面去执行，比如‘aggregate’，示例代码</p>
<p>from django.http import HttpResponse<br>from .models import Book<br>from django.db.models import Avg<br>from django.db import connection<br>def index(request):<br>    result = Book.objects.aggregate(Avg(“price”))<br>    print(result)<br>    print(connection.queries)<br>    return HttpResponse(‘执行成功’)</p>
<p>执行之后 <code>&#123;&#39;price__avg&#39;: 94.75&#125;</code> <code>[21/Nov/2018 16:06:38] &quot;GET / HTTP/1.1&quot; 200 12</code> <code>[&#123;&#39;sql&#39;: &#39;SELECT @@SQL_AUTO_IS_NULL&#39;, &#39;time&#39;: &#39;0.024&#39;&#125;, &#123;&#39;sql&#39;: &#39;SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED&#39;, &#39;time&#39;: &#39;0.024&#39;&#125;, &#123;&#39;sql&#39;: &#39;SELECT AVG(`book`.`price`) AS `price__avg` FROM `book`&#39;, &#39;time&#39;: &#39;0.024&#39;&#125;]</code> 聚合函数执行完成后，给这个聚合函数的值取个名字。取名字的规则，默认就是‘filed+_+聚合函数的名字’，例如上面的<code>&#39;price__avg&#39;</code> price为Book模型中的price，avg为集合函数名字，如果不想使用这样的名字，可以给聚合函数传递关键字参数，参数的名字就是聚合函数执行完成的名字，代码如下</p>
<p>result = Book.objects.aggregate(avgst = Avg(“price”))</p>
<p>aggregate：返回的不是一个QuerySet对象，它返回的是一个字典，这个字典的key就是集合函数的名字，值就是执行后的结果 查看不是QuerySet的对象，执行的原生SQL语句可以用<code>connection.queries</code> “annotate”和”aggregate”不同的地方是，他返回的是一个QuerySet对象，而不是一个字典 相同的地方是两个方法可以执行聚合函数，不同的是”annotate”返回的是QuerySet对象，并且会在查找的模型上添加一个聚合函数的属性，”aggregate”不会对数据进行分组，它会求所有值的平均数，”annotate”会使用SQL语法group by按分组的数字进行求每一条数据的平均值。 Count统计所对应的id的单位总数，它有一个属性distinct=True可以剔除所有的重复的值</p>
<p>def index(request):<br>    books = Book.objects.annotate(book_sunms = Count(“bookorder”,distinct=True))<br>    for book in books:<br>        print(‘%s/%s’% (book.name,book.book_sunms))<br>    return HttpResponse(‘执行成功’)</p>
<p>Min统计所对应的对象中最小的值，Max则是最大的值</p>
<p>def index(request):<br>    result = Author.objects.aggregate(max=Max(‘age’),min=Min(‘age’))<br>    print(result)<br>    return HttpResponse(‘执行成功’)</p>
<p>Sum统计所对应的对象中所有值相加的和</p>
<p>def index(request):<br>    result = Author.objects.aggregate(min=Sum(‘age’))<br>    print(result)<br>    return HttpResponse(‘执行成功’)</p>
<p>提取2018年所有的图书的销售总额方法</p>
<p>def index(request):<br>    result = BookOrder.objects.filter(create_time__year=2018).aggregate(total=Sum(‘price’))<br>    print(result)<br>    return HttpResponse(‘执行成功’)</p>
<p>‘aggregate’和”annotate”可以使用在任何QuerySet对象上使用 如果要统计2018年，每一本图书的价格，代码如下</p>
<p>def index(request):<br>    books = Book.objects.filter(bookorder__create_time__year=2018).annotate(total=Sum(‘bookorder__price’))<br>    for book in books:<br>        print(‘%s/%s’% (book.name,book.total))<br>    return HttpResponse(‘执行成功’)</p>
<p><a href="https://post.332b.com/wp-content/uploads/2018/11/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0.zip">聚合函数</a></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：自建计算过去多久时间的过滤器</title>
    <url>/posts/86ad84ca.html</url>
    <content><![CDATA[<p>上文链接：<a href="https://post.332b.com/post/208.html">https://post.332b.com/post/208.html</a> 在文件中my_filter.py写入下面代码</p>
<p>@register.filter<br>def time_sinece(value):<br>    if not isinstance(value,datetime):<br>        return value<br>    now = datetime.now()<br>    timestamp = (now - value).total_seconds()<br>    if timestamp &lt; 60:<br>        return “刚刚发生”<br>    elif timestamp&gt;= 60 and timestamp &lt; 60*60:<br>        aminutes = int(timestamp / 60)<br>        return “过去%s分钟” % aminutes<br>    elif 60*60 &lt;= timestamp &lt; 60*60*24:<br>        ahour = int(timestamp/60/60)<br>        return “过去%s小时” % ahour<br>    elif 60*60*24 &lt;= timestamp &lt; 60*60*24*30:<br>        aday = int(timestamp/60/60/24)<br>        return “过去%s天” % aday<br>    else:<br>        return value.strftime(“%Y/%m/%d %H:%M”)</p>
<p>在模板index.html中载入过滤器后，加入如下代码就可以实现我们想要的效果，它会显示当前过去了多久</p>
<p>{ { mytimetime_sinece } }</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>DJango：模型MATA字段说明</title>
    <url>/posts/3a680437.html</url>
    <content><![CDATA[<p>class models(models.Model): class Mate: db_table = ‘db_name’ ordering = [‘id’,’user’] db_table 这个指模型映射到数据库中的表名，默认是使用模型的名次 ordering 对指定数据进行排序，如果要反序列显示，就在前面加个负号‘-’，例如ordering = [‘-id’,’user’]</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：连接mysql数据库方法</title>
    <url>/posts/2455b3ee.html</url>
    <content><![CDATA[<p>在settting.py修改如下成,Django会自动识别数据库连接件，常见的连接间有pymysql(Py语言编写)、mysqlclient(C语言编写)</p>
<p>DATABASES = {<br>    ‘default’: {<br>        ‘ENGINE’: ‘django.db.backends.mysql’,<br>        ‘NAME’: ‘db_name’,<br>        ‘USER’:’user’,<br>        ‘PASSWORD’:’password’,<br>        ‘HOST’:’localhost’,<br>        ‘PORT’:’3306’,<br>    }<br>}</p>
<p>在视图函数中的引用方法是</p>
<p>def index(request):<br>    cursor = connection.cursor()       ###获取游标<br>    cursor.execute(“select id,name,author from book”)    ####从book表中查找id,name,author字段，如果是*代表所有</p>
<h1 id="cursor-execute-“insert-into-book-id-name-author-values-null-’三国演义’-’罗贯中’-”-这个代表插入，id设置null是因为数据库设置了自动递减"><a href="#cursor-execute-“insert-into-book-id-name-author-values-null-’三国演义’-’罗贯中’-”-这个代表插入，id设置null是因为数据库设置了自动递减" class="headerlink" title="cursor.execute(“insert into book(id,name,author) values(null,’三国演义’,’罗贯中’)”)   ####这个代表插入，id设置null是因为数据库设置了自动递减"></a>cursor.execute(“insert into book(id,name,author) values(null,’三国演义’,’罗贯中’)”)   ####这个代表插入，id设置null是因为数据库设置了自动递减</h1><pre><code>rows = cursor.fetchall() return render(request,&quot;index.html&quot;,context=&#123;&quot;books&quot;:rows&#125;)
</code></pre>
<p>在模板中输出的方法</p>
<p>{ % for fo in books %}<br> <td>{ {fo} }</td><br>{ % endfor %}</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Django：表单及应用</title>
    <url>/posts/69f47e64.html</url>
    <content><![CDATA[<h2 id="一-Django中的表单使用方法"><a href="#一-Django中的表单使用方法" class="headerlink" title="一.Django中的表单使用方法"></a>一.Django中的表单使用方法</h2><p>HTML中的表单: 单纯从前端的html来说，表单是用来提交数据给服务器的，不管后台的服务盞用的是Django还是PHP语言还是其他语言。只要 把input标签放在form标签中，然后再添加一个提交按钮，那么以后点击提交按钮，就可以将input标签中对应的值提交给服务器 了。 Django中的表单： Django中的表单丰富了传统的HTML语言中的表单。在Django中的表单，主要做以下两件事： 1. 渲染表单模板。 2. 表单验证数据是否合法。 Django中表单使用流程： 在讲解Django表单的具体每部分的细节之前。我们首先先来看下整体的使用流程。这里以一个做一个留言板为例。首先我们在后台 服务器定义一个表单类，继承自django.forms.Form示例代码如下： 定义一个forms.py</p>
<p>from django import  forms<br>class MesssageBoardForm(forms.Form):<br>    title = forms.CharField(max_length=100,min_length=3,label=’标题’,error_messages={“输入错误”})<br>    content = forms.CharField(widget=forms.Textarea,label=’内容’)  ###forms.Textarea文本框<br>    email = forms.EmailField(label=’邮箱’)<br>    reply = forms.BooleanField(required=False,label=’是否需要回复？’)   ##required是否默认勾选</p>
<p>定义一个views.py</p>
<p>from django.shortcuts import render<br>from django.views.generic import View<br>from .forms import MesssageBoardForm<br>class IndexView(View):<br>    def get(self,request):<br>        form = MesssageBoardForm()     ###渲染这个表单<br>        return render(request,’index.html’,context={‘form’:form})<br>    def post(self,request):<br>        form = MesssageBoardForm(request.POST)<br>        if form.is_valid():                   #####如果验证成功<br>            title = form.cleaned_data.get(‘title’)  ####提取验证成功的’title’<br>            content = form.cleaned_data.get(‘content’)<br>            email = form.cleaned_data.get(‘email’)<br>            reply = form.cleaned_data.get(‘reply’)<br>            print(‘*‘*30)<br>            print(title,content,email,reply)<br>            print(‘*‘ * 30)<br>            return HttpResponse(‘执行成功’)<br>        else:<br>            print(form.errors.get_json_data())   ###如果验证失败，将错误代码转换城json数据<br>            return HttpResponse(‘验证失败’)</p>
<p>在index.html中去展示</p>
<form action="" method="post">
    <table>
        { { form.as\_table } }
        <tr>
            <td><input type="submit" value="提交"></td>
        </tr>
    </table>
</form>

<h2 id="二、验证表单中一些常用Field"><a href="#二、验证表单中一些常用Field" class="headerlink" title="二、验证表单中一些常用Field"></a>二、验证表单中一些常用Field</h2><p>用表单验证数据 常用的Field: 使用Field可以是对数据验证的第一步。你期待这个提交上来的数据是什么类型，那么就使用什么类型的Field .   CharField： 用来接收文本。 参数： • max_length：这个字段值的最大长度。 • min_length：这个字段值的最小长度。 • required：这个字段是否是必须的，默认是必须的。 • error_messages：在某个条件验证失败的时候，给出错误信息。   EmailField： 用来接收邮件，会自动验证邮件是否合法， 错误信息的key： required,invalid   FloatField： 用来接收浮点类型，并且如果验证通过后，会将这个字段的值转换为浮点类型， 参数： • max_value：最大的值。 • min_value：最小的值。 错误信息的key: required、invalid、max_value、min_value IntegerField： 用来接收整形，并且验证通过后，会将这个字段的值转换为整形。 参数： • max_value：最大的值。 • min_value：最小的值。 错误信息的key：required、 invalid、 max_value、 min_value URLField： 用来接收格式的字符串。 错误信息的key: required、invalid   常用验证器： 在验证某个字段的时候，可以传递一个validators参数用来指定捡证器，进一步对数据进行过滤。验证器有很多，但是很多验证器 我们其实已经通过这个Field或者一些参数就可以指定了。比如EmailValidator,我们可以通过EmailField来指定，比如MaxValueValidator ,我们可以通过max_value参数来指定。以下是一些常用的验证器： 1. MaxValueValidator :验证最大值。 2. MinValueValidator :验证最小值。 3. MinLengthValidator :验证最小长度。 4. MaxLengthValidator :验证最大长度。 5. EmailValidator :验证是邮箱格式。 6. URLValidator :验证是否是URL格式。 7. Regexvalidator :如果还需要更加复杂的验证，那么我们可以通过正则表达式的验证器：RegexValidator。比如现在要验证手 机号码是否合格，那么我们可以通过以下代码实现：</p>
<p>from django import  forms<br>from django.core import validators<br>class MesssageBoardForm(forms.Form):<br>    email = forms.CharField(validators=[validators.EmailValidator(message=’请输入正确格式的邮箱！’)])</p>
<h2 id="自定义字段验证"><a href="#自定义字段验证" class="headerlink" title="自定义字段验证"></a>自定义字段验证</h2><p>有时候对一个字段验证，不是一个长度，一个正则表达式能够写清楚的，还需要一些其他复杂的逻辑，那么我们可以对某个字段，进行自定义的验证。比如在注册的表单验证中，我们想要验证手机号码是否已经被注册过了，那么这时候就需要在数据库中进行判断才知道。对某个字段逬行自定义的验证方式是，定义一个方法，这个方法的名字定义规则是：clean.fieldname。如果验证失败、那么就抛出一个验证错误。比如要验证用户表中手机号码之前是否在数据库中存在，那么可以通过以下代码实现： 完整代码参考：<a href="https://post.332b.com/post/385.html">https://post.332b.com/post/385.html</a></p>
<p>def clean_tel(self):<br>    tel = self.cleaned_data.get(‘tel’)  ###可以对tel字段进行二次验证,优先执行本段，然后去执行视图函数中的字段<br>    exists = User.objects.filter(tel=tel).exists()   ###查找是否有相同字段<br>    if exists:<br>        raise forms.ValidationError(message=’tel验证失败，因为已经存在了’) ###抛出异常，停止执行<br>    return tel</p>
<h2 id="简化表单错误信息的提取"><a href="#简化表单错误信息的提取" class="headerlink" title="简化表单错误信息的提取"></a>简化表单错误信息的提取</h2><p>如果验证失败了，那么有一些错误信息是我们需要传给前端的。这时候我们可以通过以下属性来获取： 1. fom.errors :这个属性获取的错误信息是一个包含了html标签的错误信息。 2. form.errors.get_json_data() :这个方法获取到的是一个字典类型的错误信息。将某个字段的名字作为key，错误信息作为值的 一个字典。 3. fom.as_json():这个方法是将form.get_json_data()返回的字典dump成json格式的字符串，方便进行传输。 4. 上迷方法获取的字段的错误值，都是一个比较复杂的数据。比如以下：</p>
<p>class Index(forms.Form):<br>    def get_errors(self):<br>        errors = self.errors.get_json_data()<br>        new_errors = {}<br>        for key,message_dicts in errors.items():<br>            messages = []<br>            for message_dict in message_dicts:<br>                message = message_dict[‘message’]<br>                messages.append(message)<br>            new_errors[key] = messages<br>        return new_errors</p>
<h2 id="ModelForm"><a href="#ModelForm" class="headerlink" title="ModelForm"></a>ModelForm</h2><p>大家在写表单的时候，会发现表单中的Field和模型中的Field基本上是一模一样的，而且表单中需要验证的数据, 型中需要保存的。那么这时候我们就可以将模型中的字段和表单中的字段进行绑定。 比如现在有个Book的模型。示例代码如下：</p>
<p>from django.db import models<br>from django.core import validators<br>class Book(models.Model):<br>    title = models.CharField(max_length=100)<br>    page = models.IntegerField()<br>    price = models.FloatField(validators=[validators.MaxValueValidator(limit_value=100)])</p>
<p>那么在写表单的时候，就不需要把Article模型中所有的字段都一个个重复写一遍了。示例代码如下:</p>
<p>from django import forms<br>from .models import Book<br>class AddBookForm(forms.ModelForm):<br>    class Meta:<br>        model = Book<br>        fields = ‘__all__‘</p>
<p>对出一些出错的信息，可以进行中文化处理，方便理解</p>
<pre><code>class Meta:
    model= Book
    fields = &#39;\_\_all\_\_&#39;
    error\_messages = &#123;
&#39;page&#39;:&#123;
    &#39;required&#39;:&#39;请传入page参数&#39;,
    &#39;invalid&#39;:&#39;请输入一个可用的page参数&#39;
&#125;,
&#39;title&#39;:&#123;
    &#39;max\_length&#39;:&#39;title不能超过100字符&#39;
&#125;,
&#39;price&#39;:&#123;
    &#39;max\_value&#39;:&#39;最大不能超过100元&#39;
&#125;
</code></pre>
<p>}</p>
<h3 id="save方法："><a href="#save方法：" class="headerlink" title="save方法："></a>save方法：</h3><p>ModelForm还有save方法，可以在验证完成后直接调用save方法，就可以将这个数据保存到数据库中了，便捷又简单直接可以省掉6行代码，示例代码如下：</p>
<p>def add_book(request):<br>    form = AddBookForm(request.POST)<br>    if form.is_valid():<br>        ### title = form.cleaned_data.get(‘title’)<br>        ### page = form.cleaned_data.get(‘page’)<br>        ### price = form.cleaned_data.get(‘price’)<br>        ### print(‘title:%s’% title)<br>        ### print(‘page:%s’ % page)<br>        ### print(‘price:%s’% price)<br>        form.save()<br>        return HttpResponse(‘执行成功’)<br>    else:<br>        print(form.errors.get_json_data())<br>        return HttpResponse(‘执行失败’)</p>
<p>这个方法必须要在clean没有问题后才能使用，如果在clean之前使用、会抛出异常。另外，我们在调用save方法的时候，如果传 入一个commit=False ,那么只会生成这个模型的对象，而不会把这个对象真正的插入到数据库中。比如表单上验证的字段没有包合 模型中所有的字段，这时候就可以先创建对象，再根据填充其他字段，把所有字段的值都朴充完成后，再保存到数据库中。完整代码可以参考<a href="https://post.332b.com/post/385.html">https://post.332b.com/post/385.html</a>示例代码 如下：</p>
<p>def reg(request):<br>    form = Reg(request.POST)<br>    if form.is_valid():<br>        user = form.save(commit=False)<br>        user.password = form.cleaned_data.get(‘pw1’)<br>        user.save()<br>        return HttpResponse(‘注册成功’)<br>    else:<br>        print(form.errors.get_json_data())<br>        return HttpResponse(‘注册失败’)</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>文件上传是网站开发中非常常见的功能。这里详细讲述如何在Django中实现文件的上传功能。 前端HTML代码实现： 1.在前端中，我们雷要填入一个form标签，然后在这个form标签中指定enctype=”multipart/form-data” 2.在form标签中添加一个input标签，然后指定input标签的name ,以及type=”file”。 以上两步的示例代码如下：</p>
<form action="" method="post" enctype="multipart/form-data">
    <input type="file" name="myfile">
    <input type="submit" value="提交">
</form>

<p>后端的代码实现: 后端的主要工作是接收文件。然后存储文件。接收文件的方式跟接收POST的方式是一样的，只不过是通过FILES来实现。示例代码如下：</p>
<p>class IndexView(View):<br>    def get(self,request):<br>        return render(request,’index.html’)<br>    def post(self,request):<br>        myfile = request.FILES.get(‘myfile’)<br>        with open(‘somefile.txt’,’wb’) as fp:<br>            for chunk in myfile.chunks():<br>                fp.write(chunk)<br>        return HttpResponse(‘上传成功’)</p>
<h3 id="使用模型来处理上传的文件"><a href="#使用模型来处理上传的文件" class="headerlink" title="使用模型来处理上传的文件:"></a>使用模型来处理上传的文件:</h3><p>在定义模型的时候，我们可以给存储文件的字段指定为FileField，这个Field可以传递一个upload_to=’files’参数，用来指定上传上来的文件保存到哪里。比如我们让他保存到项目的files文件夹下，那么示例代码如下：</p>
<p>##models.py<br>from django.db import models<br>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    thumbnial = models.FileField(upload_to=’files’)</p>
<p>##views.py<br>class Fileindex(View):<br>    def get(self,request):<br>        return render(request,’fileindex.html’)<br>    def post(self,request):<br>        title = request.POST.get(‘title’)<br>        content = request.POST.get(‘content’)<br>        file = request.FILES.get(‘myfile’)<br>        Article.objects.create(title=title,content=content,thumbnial=file)<br>        return HttpResponse(‘执行成功’)</p>
<p>调用完Article.objects.create方法，就会把文件保存到files下面，并且会将这个文件的路径存储到数据库中。</p>
<h3 id="指定-MEDIA-ROOT-和-MEDIA-URL"><a href="#指定-MEDIA-ROOT-和-MEDIA-URL" class="headerlink" title="指定 MEDIA_ROOT 和 MEDIA_URL :"></a>指定 MEDIA_ROOT 和 MEDIA_URL :</h3><p>以上我们是使用了 upload_to来指定上传的文件的目录。我们也可以指定MEDIA_ROOT ,就不需要在FielField中指定upload_to ,他会自动的将文件上传到MEDIA_ROOT的目录下，下面是制定本项目的media文件的一个示例</p>
<p>####在setting.py中指定下面选项<br>MEDIA_ROOT = os.path.join(BASE_DIR,’media’)<br>MEDIA_URL = ‘/media/‘</p>
<p>然后我们可以在urls.py中添加MEDIA.ROOT目录下的访问路径。示例代码如下:</p>
<p>from django.urls import path<br>from django.conf import settings<br>from django.conf.urls.static import static<br>urlpatterns = [<br>] + static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)</p>
<p>如果我们同时指定MEDIA_ROOT和upload_to ,那么会将文件上传到MEDIA_ROOT下的upload_to文件夹中，如果是upload_to=’%Y/%m/%d’则会保存目录，按照年月日来归类，示例代码如下:</p>
<p>from django.db import models<br>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    thumbnial = models.FileField(upload_to=’files’)</p>
<h3 id="限制上传的文件拓展名"><a href="#限制上传的文件拓展名" class="headerlink" title="限制上传的文件拓展名:"></a>限制上传的文件拓展名:</h3><p>如果想要限制上传的文件的拓展名，那么我们就需要用到表单来进行限制。我们可以使用普通的form表单，也可以使 用ModelForm ,直接从模型中读取字段。示例代码如下：</p>
<p>##models.py<br>from django.db import models<br>from django.core import validators<br>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    thumbnial = models.FileField(validators=[validators.FileExtensionValidator([‘txt’,’pdf’],message=[‘只能上传TXT和PDF文档’])])</p>
<p>##forms.py<br>from django import forms<br>from .models import Article</p>
<p>class ArticleForm(forms.ModelForm):<br>    class Meta:<br>        model = Article<br>        fields = ‘__all__‘</p>
<p>###views.py<br>class Index1(View):<br>    def get(self,request):<br>        return render(request,’io.html’)</p>
<pre><code>def post(self,request):
    form = ArticleForm(request.POST,request.FILES)
    if form.is\_valid():
        form.save()
        return HttpResponse(&#39;执行成功&#39;)
    else:
        print(form.errors.get\_json\_data())
        return HttpResponse(&#39;错误&#39;)
</code></pre>
<p>上传图片： 注意：ImageField验证图片要安装pip install Pillow 上传图片跟上传普通文件是一样的。只不过是上传图片的时候Django会判断上传的文件是否是图片的格式（除了判断后缀名，还会 判断是否是可用的图片）。如果不是，那么就会验证失败。我们首先先来定义一个包含ImageField的模型。示例代码如下：</p>
<p>class Article(models.Model):<br>    title = models.CharField(max_length=100)<br>    content = models.TextField()<br>    thumbnial = models.ImageField()</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>Djiango模板：default、first、floatformat过滤器</title>
    <url>/posts/77530944.html</url>
    <content><![CDATA[<p>default的用法{ {&lt;当前值&gt;:default:&lt;定义的值&gt;} }是当这个值在if中判定为False，例如“”、{}、[]、None等等,就会使用它定义的值</p>
<p>{ { valuedefault:”fff” } }    ##输出fff</p>
<p>default_if_none的用法{ {&lt;当前值&gt;:default_if_none:&lt;定义的值&gt;} }是当这个值为None时就会使用定义的值，例如空列表、空字典等等，用法同上！</p>
<p>{ { valuedefault_if_none:”fff” } }    ##输出fff</p>
<p>first和last过滤器的用法分别是取一个列表元组或者字符串的第一个和最后一个元素</p>
<p>{ { valuelast } }<br>{ { valuefirst } }</p>
<p>floatformat过滤器的用法{ { valuefloatformat:&lt;数字参数&gt; } }是不加参数默认就保留小数点后面一位数字，有数字参数就按数字参数的次数来保留小数点后面的数 <code>&#123; &#123; valuefloatformat:3 &#125; &#125;</code></p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title>DRF    request视图api</title>
    <url>/posts/23df9497.html</url>
    <content><![CDATA[<p>request api</p>
<p>request.user 当用户登录时返回当前用户名，没有登录就返回AnonymousUser</p>
<p>request.data 返回用户提交过来的数据，当没有的时候为{}空字典</p>
<p>request.method 返回用户请求的方法</p>
<p>request.query_params 返回用户提交网址的查询参数，如果没有则为一个空对象</p>
]]></content>
      <categories>
        <category>django</category>
        <category>Django Rest Framework</category>
      </categories>
  </entry>
  <entry>
    <title>fedora30 安装后的初始化工作</title>
    <url>/posts/1c7081be.html</url>
    <content><![CDATA[<p>fedora30 安装后的初始化工作</p>
<p>所有软件更新到最新的版本</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo dnf update</span></span><br></pre></td></tr></table></figure>

<p>安装完整内核工具</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> kernel-headers kernel-devel</span><br></pre></td></tr></table></figure>

<p>安装中文输入法</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装输入法切换工具</span></span><br><span class="line">sudo dnf <span class="keyword">install</span> im-chooser</span><br><span class="line"><span class="comment"># 安装 fcitx</span></span><br><span class="line">sudo dnf <span class="keyword">install</span> fcitx</span><br><span class="line"><span class="comment"># 如果这一行无法执行，可以换成kde-config-fcitx</span></span><br><span class="line">sudo dnf <span class="keyword">install</span> kcm-fcitx</span><br><span class="line"><span class="comment"># 安装sunpinyin</span></span><br><span class="line">sudo dnf <span class="keyword">install</span> fcitx-sunpinyin</span><br></pre></td></tr></table></figure>

<p>如果要安装第三方下面下来的rpm包，同时又有依赖如果解决，可以用下面命令，自动安装依赖</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> yum -y localinstall <span class="regexp">*.rpm</span></span><br></pre></td></tr></table></figure>

<p>安装 virtualbox无法启动，可能是没有执行下面命令</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">sudo /sbin/vboxconfig</span><br><span class="line"></span><br><span class="line"><span class="meta"># [witt@localhost ~]$ sudo  /sbin/vboxconfig</span></span><br><span class="line"><span class="meta"># vboxdrv.sh: Stopping VirtualBox services.</span></span><br><span class="line"><span class="meta"># vboxdrv.sh: Starting VirtualBox services.</span></span><br><span class="line"><span class="meta"># vboxdrv.sh: Building VirtualBox kernel modules.</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>HTML代码学习：HTML表单标签</title>
    <url>/posts/d3122da2.html</url>
    <content><![CDATA[<p>input标签 明文输入框text</p>
<input type="text">

<p>暗文输入框password</p>
<input type="password">

<p>单选项radio，默认情况下是不会互斥的，设置了相同的name属性才会是单选，checked=”checked”是默认选择一个值</p>
<p><input type="radio" name="good">男<br><input type="radio" name="good">女<br><input type="radio" name="good" checked="checked">保密</p>
<p>多选项checkbox，它也可以使用checked=”checked”是默认选择一个值</p>
<p><input type="checkbox">篮球<br><input type="checkbox">足球<br><input type="checkbox">羽毛球</p>
<p>按钮button</p>
<input type="button" value="按钮">

<p>定义图像形式的提交按钮</p>
<input type="image" src="11..jpg">

<p>reset定义重置按钮。重置按钮会清除表单中的所有数据。</p>
<input type="reset" />

<p>hidden 定义隐藏字段。隐藏字段对于用户是不可见的。隐藏字段通常会存储一个默认值，它们的值也可以由 JavaScript 进行修改。</p>
<input type="hidden" name="country" value="Norway" />

<p>submit定义提交按钮。提交按钮用于向服务器发送表单数据。数据会发送到表单的 action 属性中指定的页面。</p>
<form action="form\_action.asp" method="get">
Email: <input type="text" name="email" />
<input type="submit" />
</form>

<p>lable标签：将文字和输入框绑定在一起，献给input定义一个id，然后在lable中用for关联到id完成绑定</p>
<form action="">
    <lable for="user">账号：</lable><input type="text" id="user">
</form>

<p>select属性是定义一个单选下拉框，option为选项，当数据太多的时候，我们可以通过optgroup来分类</p>
<select>
    <optgroup label="分组选项1">
        <option>选项一</option>
        <option>选项二</option>
    </optgroup>
    <optgroup label="分组选项2">
        <option>选项三</option>
        <option>选项四</option>
    </optgroup>
</select>

<p>textarea是一个多行文本框，clos定义列数，rows定义行数，随后可以定义行数和列数，但依旧还是可以无限向下输入</p>
<p><textarea cols="3" rows="5">我是文本</textarea></p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>HTML:列表标签的三种类型</title>
    <url>/posts/1cedc34a.html</url>
    <content><![CDATA[<p>列表的三种类型</p>
<ol>
<li> 无序列表     unorder list</li>
<li> 有序列表    order list</li>
<li> 定义列表   definition list</li>
</ol>
<p>无序列表 下面是无序列表的一个简单示例，他的作用不是为了给文字添加小圆点，html是给文本定义，css才是样式 WebStom 生成ul标签语法：ul&gt;li*3    生成一对ul标签和3对li标签</p>
<ul>
    <li>列表文字1</li>
    <li>列表文字2</li>
</ul>

<p>有序列表 它可以用来做排行，默认是以1、2、3数字排名，它自带一个属性type可以更改显示的类型</p>
<ol>
    <li>我是第一行</li>
    <li>我是第二行</li>
</ol>

<p>定义列表 它是由有dt和dd作为一对，一对里面dt是必须有的，dd可以没有，也可以有多个，他一般可以拿来做页脚或者其他的功能</p>
<dl>
    <dt>我是标题</dt>
    <dd>我是内容描述</dd>
    <dt>我是标题1</dt>
    <dd>我是内容描述1</dd>
    <dd>我是内容描述2</dd>
</dl>]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>HTML基础：段落、标题、链接、图像</title>
    <url>/posts/ba2aae76.html</url>
    <content><![CDATA[<p>1、段落是通过<p>文字</p>来实现的，下面是示例 <code>&lt;p&gt;我是一个段落&lt;/p&gt;</code> 2.标题是通过h1~h6来实现的，数字越大，在网页中显示的字体就越小，一个网页最多出现一个H1标签，否则会影响SEO搜索收录 <code>&lt;h1&gt;我是H1标签&lt;/h1&gt;</code> <code>&lt;h3&gt;我是H3标签&lt;/h3&gt;</code> <code>&lt;h6&gt;我是H6标签&lt;/h6&gt;</code> 3.链接是指将用户从一个网址导向另一个网址，是通过a标签<a href="网址">链接显示文字</a>，他的属性有 target可以控制跳转,_self不新建窗口直接跳转，_blank新建窗口打开网页 title是显示鼠标悬停上面显示的文本 在<head>和</head>添加<base target=\_blank>，可以统一实现所有链接_blank新建窗口打开网页效果，如果a标签中指定了target，那么就会执行a标签里面的target 假链接是指用户点击之后不会跳转的链接，通常有两种</p>
<ol>
<li> href=”#”   这种会点击会导致网页回到顶部</li>
<li> href=”javascript:”    这种点击了，什么都不会发生</li>
</ol>
<p><code>&lt;a href=&quot;www.baidu.com&quot;&gt;点击进入百度&lt;/a&gt;</code> a标签除了可以跳转到指定链接，还可以跳到当前页面指定位置，但得先给指定的位置指定一个id <code>&lt;a href=&quot;#aaa&quot;&gt;点击进入百度&lt;/a&gt;</code> <p id="aaa">这里真好，嘻嘻</p> 4.在网页中图像是通过img标签来展示的，<img src="图片"/>，如果要制定上一级的路径可以这样指定src=”../图片.img” 属性width来限制宽度，height来限制显示的高度， src是source的简写，中文意思是资源，手动制定高度和宽度可能会导致图片变形，单独制定高度或者宽度不会变形，但是会等比拉伸， title属性作用当鼠标悬停在图片，显示对图片的文本描述， alt标签作用是当图片资源失效或者无法显示的时候，会显示制定的文本 <code>&lt;img src=&quot;tu.jpg&quot; width=“600” height=&quot;600&quot;&gt;</code> 5.下划线可以通过单标签<code>&lt;hr /&gt;</code> 来表示，它叫做下划水平分割线 6.html注释一段文字方法<code>&lt;!--这个是注释的文字--&gt;</code> ,注释一段话的快捷键 Ctrl + / 7.<br />是指不另起一段换行，企业开发中很少用到br标签，企业中要使用到换行一般都是另起一个段落 home可以跳到一行的开头，end可以跳到一行的末尾，Ctrl + Alt + Ins可以新建一个html文件，ALT + 鼠标左键上下拖动可以让多行同时进行输入，Ctrl + D复制光标所在的那一行，Ctrl + X删除光标所在的那一行，Ctrl + Alt + T按下回车，可以给一段文本快速指定一个标签，编辑器-常规-勾选自动换行就可以超长文本自动换行</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>html  文档基本格式</title>
    <url>/posts/7f7e5a1.html</url>
    <content><![CDATA[<p>下标 和 上标代码如下 <code>这是 &lt;sub&gt; 下标&lt;/sub&gt; 和 &lt;sup&gt; 上标&lt;/sup&gt;</code> sub下标     sup上标 <strong>粗体</strong> ：<strong> _斜体_：<em> 更多html字体样式<a href="http://www.runoob.com/html/html-formatting.html">http://www.runoob.com/html/html-formatting.html</a> 在HTML文档中插入ID:</p>
<p><code>&lt;a id=&quot;tips&quot;&gt;有用的提示部分&lt;/a&gt;</code></p>
<p>在HTML文档中创建一个链接到”有用的提示部分(id=”tips”）”：</p>
<p><code>&lt;a href=&quot;#tips&quot;&gt;访问有用的提示部分&lt;/a&gt;</code></p>
<p>或者，从另一个页面创建一个链接到”有用的提示部分(id=”tips”）”：</p>
<p><code>&lt;a href=&quot;http://www.runoob.com/html/html-links.html#tips&quot;&gt;</code> <code>访问有用的提示部分&lt;/a&gt;</code></p>
<p>a标签中的href可以放入mailto，可以指定一个让用户发送邮件的地址</p>
<p>html  head标签详细讲解<a href="http://www.runoob.com/html/html-head.html">http://www.runoob.com/html/html-head.html</a></p>
<p>头部引入外部css方法</p>
<head>
<link rel\="stylesheet" type\="text/css" href\="mystyle.css"\>
</head>

<p>也可以直接在html当中指定css样式</p>
<p><code>&lt;h1 style=&quot;font-family:verdana;&quot;&gt;一个标题&lt;/h1&gt;</code></p>
<p>图片分区域点击</p>
<p>在html中，如果前面有浮动元素，后面的元素不想浮动，可用clear:both清除浮动</p>
<p>使用iframe来显示目标链接页面 iframe可以显示一个目标链接的页面目标链接的属性必须使用iframe的属性，如下实例: 实例 <code>&lt;iframe src=&quot;demo_iframe.htm&quot; name=&quot;iframe_a&quot;&gt;&lt;/iframe&gt;</code> <code>&lt;a href=&quot;http://www.runoob.com&quot; target=&quot;iframe_a&quot;&gt;点击在本页打开这个链接，因为制定了target=&quot;iframe_a&quot;&lt;/a&gt;</code></p>
<p>颜色：</p>
<p>background:rgba(255,0,0,0.5); /* #ff0000   最后一位是透明度，0代表全透明  */</p>
<p>特殊符号在html中的转义    &lt; &gt; © &amp; <a href="http://www.runoob.com/html/html-entities.html">http://www.runoob.com/html/html-entities.html</a> html常用标签速查列表：<a href="http://www.runoob.com/html/html-quicklist.html">http://www.runoob.com/html/html-quicklist.html</a></p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>HTML：表格</title>
    <url>/posts/9f83832e.html</url>
    <content><![CDATA[<caption></caption>是列表的标题（可选），<table></table>表格标签，<tr></tr>代表表格中的一行，<td></td>代表表格中一个单元格，表格默认是没有边框的，可以通过border="1"这个属性来设置标签，<th>可以作为表格列的标题；

<table border="1">
    <caption>
        <h2>我是列表标题</h2>
    </caption>
   <tr>
        <th>当前列标题1</th>
        <th>当前列标题2</th>
    </tr>
    <tr>
        <td>小苹果</td>
        <td>小苹果</td>
    </tr>
    <tr>
        <td>小苹果</td>
        <td>小苹果</td>
    </tr>
</table>

<h3 id="1-表格的高度和宽度使用方法"><a href="#1-表格的高度和宽度使用方法" class="headerlink" title="1.表格的高度和宽度使用方法"></a>1.表格的高度和宽度使用方法</h3><p>高度和宽度只能用在table和td标签，在table中width和height可以整个表格的高度，在td中width和height可以改变当前单元格的高度，不会影响整个单元格的高度</p>
<h3 id="2-水平对齐和垂直对齐"><a href="#2-水平对齐和垂直对齐" class="headerlink" title="2.水平对齐和垂直对齐"></a>2.水平对齐和垂直对齐</h3><p>水平对齐可以给table、td和tr标签使用，align属性的left、right和center控制水平方向左、右和居中   垂直对齐只能给table和td标签使用，vlign属性的top、middle和bottom可以控制垂直方向的顶部、中间和底部</p>
<h3 id="3-外边距和内边距"><a href="#3-外边距和内边距" class="headerlink" title="3.外边距和内边距"></a>3.外边距和内边距</h3><p>内边距和外边距只能给table使用，内边距是指单元格内的文字距离单元格的距离，cellpadding属性可以控制距离，默认是0px，外边距是表格中的单元格和单元格之间的距离，默认是2px的距离，cellspacing属性可以控制距离</p>
<h3 id="细线表格"><a href="#细线表格" class="headerlink" title="细线表格"></a>细线表格</h3><p>细线表格的实现，通过将整个背景颜色设置为黑色，单元格的背景颜色设置为白色，内边距设置为1，代码如下</p>
<table BGCOLOR="black" cellspacing-="1">
    <tr BGCOLOR="#f0f8ff">
        <td>111</td>
        <td>222</td>
    </tr>
    <tr bgcolor="#f0f8ff">
        <td>333</td>
        <td>444</td>
    </tr>
</table>

<p>一个超有趣的图案</p>
<table bgcolor="black" width="500px" height="300px" align="center">
    <tr bgcolor="white">
        <td colspan="2"></td>
        <td rowspan="2"></td>
    </tr>
    <tr bgcolor="white">
        <td rowspan="2"></td>
        <td bgcolor="black"></td>
    </tr>
    <tr bgcolor="white">
        <td colspan="2"></td>
    </tr>
</table>]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript 学习：Array</title>
    <url>/posts/578e9f64.html</url>
    <content><![CDATA[<p>属性</p>
<p>Array.length 给出数组的总数</p>
<p>Array.prototype 可以自己定义子属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   返回数组的第一个元素</span></span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">Array</span>.prototype.first) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.first = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(list.first())</span><br></pre></td></tr></table></figure>

<p>方法</p>
<p>Array.from(arrayLike[, mapFn[, thisArg]])</p>
<p>arrayLike<br>想要转换成数组的伪数组对象或可迭代对象。<br>mapFn (可选参数)<br>如果指定了该参数，新数组中的每个元素会执行该回调函数。<br>thisArg (可选参数)<br>可选参数，执行回调函数 mapFn 时 this 对象。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.<span class="keyword">from</span>(<span class="string">&#x27;foo&#x27;</span>));             <span class="regexp">//</span> &gt; <span class="built_in">Array</span> [<span class="string">&quot;f&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">console<span class="meta">.log(</span><span class="meta">Array</span>.<span class="meta">from</span>([1, 2, 3, 4], <span class="meta">x</span> =&gt; <span class="meta">x</span> + <span class="meta">x</span>));     // &gt; <span class="meta">Array</span> [2, 4, 6, 8]</span><br></pre></td></tr></table></figure>

<p>Array.isArray(obj) 检测数组是否是数组，正确返回true，错误返回false</p>
<p>Array.of(element0[, element1[, …[, elementN]]]) 可以将多个变量一起转换成一个数组</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.of和Array类似，但是他们在遇到整数时，是有区别的</span></span><br><span class="line"></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span><span class="keyword">of</span>(<span class="number">7</span>);           <span class="comment">// &gt; [7] </span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span><span class="keyword">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);     <span class="comment">// &gt; [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="constructor">Array(7)</span>;              <span class="comment">// &gt; [ , , , , , , ]</span></span><br><span class="line"><span class="constructor">Array(1, 2, 3)</span>;        <span class="comment">// &gt; [1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>list1.concat(list2) 将两个数组连接组成一个数组</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> list1 = <span class="literal">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span>;</span><br><span class="line"><span class="keyword">let</span> list2 = <span class="literal">[<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span>;</span><br><span class="line">alert(<span class="module-access"><span class="module"><span class="identifier">Array</span>.</span></span>from(list1.concat(list2)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>

<p>arr.copyWithin(target[, start[, end]]) 对指定位进行浅复制，并放到指定位置</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>];</span><br><span class="line"></span><br><span class="line">console.log(array1.copyWithin(<span class="number">5</span>));</span><br><span class="line"><span class="regexp">//</span> 复制前面的(<span class="number">0</span>,<span class="number">4</span>)放在<span class="number">5</span>的位置</span><br><span class="line"><span class="regexp">//</span> &gt; Array [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>]</span><br><span class="line"></span><br><span class="line">console.log(array1.copyWithin(<span class="number">1</span>,<span class="number">10</span>));</span><br><span class="line"><span class="regexp">//</span> 复制(<span class="number">10</span>,最后一位)放在<span class="number">1</span>的位置</span><br><span class="line"><span class="regexp">//</span> &gt; Array [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>]</span><br><span class="line"></span><br><span class="line">console.log(array1.copyWithin(<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>))</span><br><span class="line"><span class="regexp">//</span> 复制(<span class="number">2</span>,<span class="number">5</span>)放到<span class="number">1</span>的位置</span><br><span class="line"><span class="regexp">//</span> &gt; Array [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>arr.entries() 生成一个数组的迭代器，可以用arr.entries().next()依次执行，来获取每个值的序列号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  用for...of...来循环迭代器</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> p = array1.entries();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以用p.next()来依次执行，获取每个值和序号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> p) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>arr.fill(value[, start[, end]]) 用一个指定的值来填充指定的范围的每个元素</p>
<p>value：值 start：起始值，默认是0 end：结束值，默认是结尾</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">var array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用0来填充(2,4)中的所有值</span></span><br><span class="line">console.<span class="built_in">log</span>(array1.<span class="built_in">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 2, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用5来填充(1,最后一位)的所有值</span></span><br><span class="line">console.<span class="built_in">log</span>(array1.<span class="built_in">fill</span>(<span class="number">5</span>, <span class="number">1</span>));</span><br><span class="line"><span class="comment">// expected output: [1, 5, 5, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用6填充里面的所有值</span></span><br><span class="line">console.<span class="built_in">log</span>(array1.<span class="built_in">fill</span>(<span class="number">6</span>));</span><br><span class="line"><span class="comment">// expected output: [6, 6, 6, 6]</span></span><br></pre></td></tr></table></figure>

<p>arr.every(callback[, thisArg]) 用回调函数来得到每个值的true和false，数组内只要有一个值返回false，那么它就不会向下执行了，整个函数结果就返回false，如果每个值返回的都是true，那么它返回就是true</p>
<p><strong>注意：若收到一个空数组，此方法在一切情况下都会返回 true。</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">//element当前值，<span class="keyword">index</span>序号，<span class="keyword">array</span>当前执行的数组</span><br><span class="line"> <span class="keyword">function</span> iss(element,<span class="keyword">index</span>,<span class="keyword">array</span>) &#123;</span><br><span class="line">     alert(<span class="keyword">array</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> var array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>];</span><br><span class="line"> console.log(array1.every(iss));</span><br></pre></td></tr></table></figure>

<p>arr.filter(callback[, thisArg]) 过滤不符合的值，组成一个新的数组</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> iss(element,<span class="keyword">index</span>,<span class="keyword">array</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">index</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">console.log(array1.<span class="keyword">filter</span>(iss));</span><br></pre></td></tr></table></figure>

<p>arr.find(callback[, thisArg]) 返回符合条件的第一个值，否则返回 undefined</p>
<p>arr.findIndex(callback[, thisArg]) 返回符合条件的第一个值的索引</p>
<p>arr.flat(depth) 深度递归数组里面的每个数组，并把所有遍历到的结果组成一个新数组</p>
<p>depth 为递归深度，默认是1，如果值设置Infinity那就是无限制网下递归</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">var arr1 = <span class="comment">[1, 2, <span class="comment">[3, 4]</span>]</span>;</span><br><span class="line">arr1.flat(); </span><br><span class="line">// <span class="comment">[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">var arr2 = <span class="comment">[1, 2, <span class="comment">[3, 4, <span class="comment">[5, 6]</span>]</span>]</span>;</span><br><span class="line">arr2.flat();</span><br><span class="line">// <span class="comment">[1, 2, 3, 4, <span class="comment">[5, 6]</span>]</span></span><br><span class="line"></span><br><span class="line">var arr3 = <span class="comment">[1, 2, <span class="comment">[3, 4, <span class="comment">[5, 6]</span>]</span>]</span>;</span><br><span class="line">arr3.flat(2);</span><br><span class="line">// <span class="comment">[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span><br><span class="line">arr3.flat(Infinity); </span><br><span class="line">// <span class="comment">[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>

<p>arr.flatMap(depth) 遍历数组内的每个元素，并返回新值</p>
<p>function callback(currentValue[, index[, array]]<br>可以生成一个新数组中的元素的函数，可以传入三个参数：</p>
<p>currentValue<br>当前正在数组中处理的元素<br>index可选<br>可选的。数组中正在处理的当前元素的索引。<br>array可选<br>可选的。被调用的 map 数组<br>thisArg可选<br>可选的。执行 callback 函数时 使用的this 值。</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">//map和flatMap是有细微的区别的</span><br><span class="line">var arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">arr1.map(x =&gt; [x * <span class="number">2</span>]); </span><br><span class="line">// [[<span class="number">2</span>], [<span class="number">4</span>], [<span class="number">6</span>], [<span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">arr1.flatMap(x =&gt; [x * <span class="number">2</span>]);</span><br><span class="line">// [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span><br><span class="line">arr1.flatMap(x =&gt; [[x * <span class="number">2</span>]]);</span><br><span class="line">// [[<span class="number">2</span>], [<span class="number">4</span>], [<span class="number">6</span>], [<span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">let arr = [<span class="string">&quot;今天天气不错&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;早上好&quot;</span>]</span><br><span class="line"></span><br><span class="line">arr.map(s =&gt; s.split(<span class="string">&quot;&quot;</span>))</span><br><span class="line">// [[<span class="string">&quot;今&quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;气&quot;</span>, <span class="string">&quot;不&quot;</span>, <span class="string">&quot;错&quot;</span>],[<span class="string">&quot;&quot;</span>],[<span class="string">&quot;早&quot;</span>, <span class="string">&quot;上&quot;</span>, <span class="string">&quot;好&quot;</span>]]</span><br><span class="line"></span><br><span class="line">arr.flatMap(s =&gt; s.split(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">// [<span class="string">&quot;今&quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;天&quot;</span>, <span class="string">&quot;气&quot;</span>, <span class="string">&quot;不&quot;</span>, <span class="string">&quot;错&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;早&quot;</span>, <span class="string">&quot;上&quot;</span>, <span class="string">&quot;好&quot;</span>]</span><br></pre></td></tr></table></figure>

<p>arr.forEach(callback[, thisArg]); 为数组内的每个元素执行一次函数，它不会改变数组内的值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">iss</span>(<span class="params">element,index,<span class="keyword">array</span></span>) </span>&#123;</span><br><span class="line">        console.log(element+<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line">    array1.<span class="keyword">forEach</span>(iss);</span><br><span class="line"><span class="comment">// &gt; 1</span></span><br><span class="line"><span class="comment">// &gt; 2</span></span><br><span class="line"><span class="comment">// &gt; 3</span></span><br><span class="line">............</span><br></pre></td></tr></table></figure>

<p>arr.includes(valueToFind[, fromIndex]) 检测一个数组是否包含指定值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br></pre></td></tr></table></figure>

<p>arr.indexOf(searchElement[, fromIndex = 0]) 查找指定元素，返回指定元素的索引，如果没找到返回-1</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> start from index <span class="number">2</span></span><br><span class="line">console.log(beasts.indexOf(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>));</span><br><span class="line"><span class="regexp">//</span> expected output: <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>Array.join() 将数组内的元素拼接成字符串</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">var elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"></span><br><span class="line">console<span class="meta">.log(</span>elements.jo<span class="meta">in(</span>));</span><br><span class="line">// expected <span class="meta">output</span>: <span class="string">&quot;Fire,Air,Water&quot;</span></span><br><span class="line"></span><br><span class="line">console<span class="meta">.log(</span>elements.jo<span class="meta">in(</span><span class="string">&#x27;&#x27;</span>));</span><br><span class="line">// expected <span class="meta">output</span>: <span class="string">&quot;FireAirWater&quot;</span></span><br><span class="line"></span><br><span class="line">console<span class="meta">.log(</span>elements.jo<span class="meta">in(</span><span class="string">&#x27;-&#x27;</span>));</span><br><span class="line">// expected <span class="meta">output</span>: <span class="string">&quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure>

<p>arr.keys() 将数组的索引生成一个迭代器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = array1.keys(); </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key); <span class="comment">// expected output: 0 1 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &gt; 0</span></span><br><span class="line"><span class="comment">// &gt; 1</span></span><br><span class="line">&gt; <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>arr.lastIndexOf() 从数组的最后一个开始查找，查找成功返回索引，失败测返回-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = [<span class="string">&#x27;Dodo&#x27;</span>, <span class="string">&#x27;Tiger&#x27;</span>, <span class="string">&#x27;Penguin&#x27;</span>, <span class="string">&#x27;Dodo&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.lastIndexOf(<span class="string">&#x27;Dodo&#x27;</span>));</span><br><span class="line"><span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(animals.lastIndexOf(<span class="string">&#x27;Tiger&#x27;</span>));</span><br><span class="line"><span class="comment">// 输出: 1</span></span><br></pre></td></tr></table></figure>

<p>arr.map() 为每个值提供一个函数并返回一个新数组，它有回调function callback(currentValue[, index[, array]])</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建map</span></span><br><span class="line"><span class="keyword">const</span> map1 = array1.map(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map1);</span><br><span class="line"><span class="comment">// 输出新数组 [2, 8, 18, 32]</span></span><br></pre></td></tr></table></figure>

<p>arr.pop() 删除最后一个值并返回该值</p>
<p>arr.push() 在末尾追加新元素，可以添加一个或者多个</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">var animals <span class="operator">=</span> [<span class="string">&#x27;pigs&#x27;</span>, <span class="string">&#x27;goats&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>];</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(animals.push(<span class="string">&#x27;cows&#x27;</span>));</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 添加之后变成: <span class="number">4</span>个</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(animals);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 输出: <span class="keyword">Array</span> [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]</span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">&#x27;chickens&#x27;</span>, <span class="string">&#x27;good&#x27;</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(animals);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> 输出: <span class="keyword">Array</span> [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;, &quot;good&quot;]</span><br></pre></td></tr></table></figure>

<p>arr.reduce() 从左到右为每一个元素执行 一次reduce提供的函数，返回最后一次执行的累计结果</p>
<p>arr.reduceRight() 从右到左，方法同上</p>
<p>arr.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])</p>
<p>callback<br>执行数组中每个值的函数，包含四个参数：<br>accumulator<br>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。</p>
<p>currentValue<br>数组中正在处理的元素。<br>currentIndex可选<br>数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则为1。<br>array可选<br>调用reduce()的数组<br>initialValue可选<br>作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer));</span><br><span class="line"><span class="comment">// expected output: 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5 + 1 + 2 + 3 + 4</span></span><br><span class="line"><span class="built_in">console</span>.log(array1.reduce(reducer, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 15</span></span><br></pre></td></tr></table></figure>

<p>arr.reverse() 数组反转，颠倒数组的顺序</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">var array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line">console<span class="meta">.log(</span><span class="string">&#x27;array1: &#x27;</span>, array1);</span><br><span class="line">// expected <span class="meta">output</span>: <span class="meta">Array</span> [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>]</span><br><span class="line"></span><br><span class="line">var reversed = array1<span class="meta">.reverse(</span>); </span><br><span class="line">console<span class="meta">.log(</span><span class="string">&#x27;reversed: &#x27;</span>, reversed);</span><br><span class="line">// expected <span class="meta">output</span>: <span class="meta">Array</span> [<span class="string">&#x27;three&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;one&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>arr.shift() 删除数组的第一个值并返回</p>
<p>arr.slice() 截取数组的一部分并返回一个新数组</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">var animals = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>];</span><br><span class="line"></span><br><span class="line">console.log(animals.<span class="keyword">slice</span>(<span class="number">2</span>));</span><br><span class="line">// expected output: <span class="keyword">Array</span> [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span><br><span class="line"></span><br><span class="line">console.log(animals.<span class="keyword">slice</span>(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line">// expected output: <span class="keyword">Array</span> [&quot;camel&quot;, &quot;duck&quot;]</span><br></pre></td></tr></table></figure>

<p>arr.some() 为每一个值执行一次函数，只要有一个值返回true，那么它就返回true</p>
<p>arr.some(callback(element[, index[, array]])[, thisArg])</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> <span class="built_in">array</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">even</span> = function(element) &#123;</span><br><span class="line">  // checks whether an element <span class="built_in">is</span> <span class="built_in">even</span></span><br><span class="line">  <span class="built_in">return</span> element <span class="symbol">%</span> <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="built_in">array</span>.<span class="built_in">some</span>(<span class="built_in">even</span>));</span><br><span class="line">// expected output: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>arr.splice() 在指定位中删除或修改后，再新增元素，这个会改变原数组</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">var months = [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>];</span><br><span class="line">months.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;Feb&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> inserts at index <span class="number">1</span></span><br><span class="line">console.log(months);</span><br><span class="line"><span class="regexp">//</span> expected output: Array [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;June&#x27;</span>]</span><br><span class="line"></span><br><span class="line">months.splice(<span class="number">4</span>, <span class="number">1</span>, <span class="string">&#x27;May&#x27;</span>);</span><br><span class="line"><span class="regexp">//</span> replaces <span class="number">1</span> element at index <span class="number">4</span></span><br><span class="line">console.log(months);</span><br><span class="line"><span class="regexp">//</span> expected output: Array [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;March&#x27;</span>, <span class="string">&#x27;April&#x27;</span>, <span class="string">&#x27;May&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>arr.toString() 将数组转换成字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.toString());</span><br><span class="line"><span class="comment">// expected output: &quot;1,2,a,1a&quot;</span></span><br></pre></td></tr></table></figure>

<p>arr.unshift() 在开头添加一个或者多个值，并返回数组的长度</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">var <span class="built_in">array</span>1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">console.log(<span class="built_in">array</span>1.unshift(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line">console.log(<span class="built_in">array</span>1);</span><br><span class="line"><span class="comment">// expected output: Array [4, 5, 1, 2, 3]</span></span><br></pre></td></tr></table></figure>

<p>arr.values() 返回包含数组所有值的一个迭代器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">iterator</span> = array1.values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value of <span class="built_in">iterator</span>) &#123;</span><br><span class="line">  console.log(value); <span class="comment">// expected output: &quot;a&quot; &quot;b&quot; &quot;c&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript 标准库：Object</title>
    <url>/posts/ac170978.html</url>
    <content><![CDATA[<p>Object.assign(target, source) 将两个对象禁止复制返回一个新合成的对象，注意这个两个对象 target和source如果有相同的key，那么 source 将会覆盖 target 里面的值</p>
<p>Object.defineProperties(obj, props) 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。obj为一个对象，props为向里面添加key和value</p>
<p>Object.entries() 将对象转变一个可遍历的对象</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>]</span><br><span class="line">]);     <span class="comment">//就是转换成这种形式</span></span><br></pre></td></tr></table></figure>

<p>Object.fromEntries() 方法把键值对列表转换为一个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="built_in">Object</span>.fromEntries(entries);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// expected output: Object &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure>

<p>Object.freeze() 冻结一个对象，使得你无法修改添加和删除</p>
<p>Object.getPrototypeOf(object) 返回对象的原型对象</p>
<p>Object.is(value1, value2) 判断两个值是否相等</p>
<p>Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）</p>
<p>Object.isFrozen() 查看一个对象是否被冻结</p>
<p>Object.isSealed(obj) 查看一个对象是否被密封</p>
<p>Object.keys(Obj) 返回一个对象所有的key值的列表</p>
<p>Object.preventExtensions(obj) 方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。</p>
<p>obj.hasOwnProperty(prop) 检查对象是否包含某个值</p>
<p>obj.propertyIsEnumerable(prop) 查看指定值是否可以枚举（是否可以遍历）</p>
<p>object.toString() 方法返回一个表示该对象的字符串</p>
<p>Object.seal() 方法封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。</p>
<p>Object.values(obj) 将他的值变成一个可以枚举的数组（可遍历的数组）</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript中的ES5和ES6</title>
    <url>/posts/c739c9e4.html</url>
    <content><![CDATA[<p>ES6 1.块级作用域 let     变量 const    常量   for (let a = 1;a&lt;8;a++){ let a = 12 }   let不能被覆盖，上面for循环两个a是在两个单独和独立的块级作用域里面，他们是不能互相沟通 const 不能被修改，但是如果const定义的是个数组，是可以改变数组里面的值，这个是对象的特性，但是不能改变const赋值的类型 如果你想定义一个不能修改的对象，es6新增了一个OBject.freeze([‘1’,’2’])   es6中的暂时性死区 ｛ console.log(a) let = a; ｝ 当你还没定义变量A，却在定义之前使用了这个变量，定义这个变量前面的区域就称之为暂时性死区   2.解构赋值 let [a,b,p=3] = [1,2]; 列表赋值三个变量，也可以直接设置默认值</p>
<p>let {e,c,d} = {e:4,c:5,d:6}</p>
<p>对象也可以这样赋值</p>
<p>let f;</p>
<p>({f} = {f:7});</p>
<p>如果先声明变量，再进行赋值，外面包裹一层小括号，可以避免直接使用大括号当成块级作用域</p>
<p>3.字符串模版</p>
<p>var a = ‘小明’;</p>
<p>var str = `亲爱的${a}，你好!`</p>
<p>console.log(str);</p>
<p>注意变量str用的是反引号，不是普通的单双冒号</p>
<p>str.includes(‘a’)   返回所查找字符的位置的数字</p>
<p>str.indexOf(‘a’)     返回是否包含该字符的true或false</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript标准库 ：Math</title>
    <url>/posts/5d24a3b.html</url>
    <content><![CDATA[<p>Math.abs(a) 算绝对值，数字算出正数，null还是0，非数字和null返回Nan，即无法计算的数字</p>
<p>Math.cbrt(a) 算出一个值的立方根</p>
<p>Math.ceil(a) 向上取整（上为正数，中间是0，下为负数）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Math</span>.ceil(<span class="number">47</span>.<span class="number">8</span>)  // &gt; <span class="number">48</span></span><br><span class="line"><span class="attribute">Math</span>.ceil(<span class="number">47</span>.<span class="number">1</span>)  // &gt; <span class="number">48</span></span><br><span class="line"><span class="attribute">Math</span>.ceil(-<span class="number">47</span>.<span class="number">1</span>)  // &gt; -<span class="number">46</span></span><br></pre></td></tr></table></figure>

<p>Math.floor(a) 向下取整</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Math</span>.ceil(<span class="number">47</span>.<span class="number">8</span>)  // &gt; <span class="number">47</span></span><br><span class="line"><span class="attribute">Math</span>.ceil(<span class="number">47</span>.<span class="number">1</span>)  // &gt; <span class="number">47</span></span><br><span class="line"><span class="attribute">Math</span>.ceil(-<span class="number">47</span>.<span class="number">1</span>)  // &gt; -<span class="number">48</span></span><br></pre></td></tr></table></figure>

<p>Math.max(a,b,c…) 在多个值里面取出最大的</p>
<p>Math.min(a,b,c…) 找出多个值里面最小的</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">高级用法，算一个数组的最大或者最小值参考</span><br><span class="line">https:<span class="regexp">//</span>www.cnblogs.com<span class="regexp">/moqiutao/</span>p/<span class="number">7371988</span>.html</span><br></pre></td></tr></table></figure>

<p>Math.pow(x,y) 算出一个数字的多少次幂</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Math</span>.pow(<span class="number">3</span>,<span class="number">2</span>)   // &gt; <span class="number">9</span>   <span class="number">3</span>的<span class="number">2</span>次方（也就是平方）</span><br><span class="line"><span class="attribute">Math</span>.pow(<span class="number">3</span>,<span class="number">3</span>)   // &gt; <span class="number">27</span>  <span class="number">3</span>的<span class="number">3</span>次方（也就是立方）</span><br></pre></td></tr></table></figure>

<p>Math.round(x) 对一个值进行四舍五入</p>
<p>Math.random() 返回一个0-1之间的随机浮点数</p>
<p>Math.sign(x) 函数返回一个数字的符号, 指示数字是正数，负数还是零。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign(<span class="number">3</span>);     <span class="comment">//  1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign<span class="number">(-3)</span>;    <span class="comment">// -1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign(<span class="string">&quot;-3&quot;</span>);  <span class="comment">// -1</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign(<span class="number">0</span>);     <span class="comment">//  0</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign<span class="number">(-0)</span>;    <span class="comment">// -0</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign(NaN);   <span class="comment">// NaN</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign(<span class="string">&quot;foo&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">Math</span>.</span></span>sign<span class="literal">()</span>;      <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure>

<p>Math.sqrt(x) 返回一个数字的平方根</p>
<p>Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript对象：Data和map</title>
    <url>/posts/bda254b7.html</url>
    <content><![CDATA[<p>Date() 返回当前时间，也可以用来转换时间搓</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> <span class="built_in">console</span>.log(d)</span><br><span class="line"><span class="comment">// &gt; Thu Aug 01 2019 15:18:46 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1517446861000</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; Thu Feb 01 2018 09:01:01 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<p>Date.UTC()</p>
<p>year<br>1900 年后的某一年份。<br>month<br>0 到 11 之间的一个整数，表示月份。<br>date<br>1 到 31 之间的一个整数，表示某月当中的第几天。<br>hrs<br>0 到 23 之间的一个整数，表示小时。<br>min<br>0 到 59 之间的一个整数，表示分钟。<br>sec<br>0 到 59 之间的一个整数，表示秒。<br>ms<br>0 到 999 之间的一个整数，表示毫秒。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC(<span class="number">2018</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; Thu Feb 01 2018 09:01:01 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>

<p>Date.now() 返回当前时间的UTC时间戳，注意这个时间戳，是没有时区的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Date</span>.now());</span><br><span class="line"><span class="comment">// &gt; 1564644033035</span></span><br></pre></td></tr></table></figure>

<p>Date.parse() 将一个指定的时间转换成时间搓</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">var</span> unixTimeZero = Date.parse(&#x27;Thu Feb <span class="number">01</span> <span class="number">2018</span> <span class="number">09</span>:<span class="number">01</span>:<span class="number">01</span> GMT+<span class="number">0800</span> (中国标准时间)&#x27;);</span><br><span class="line"><span class="attribute">console</span>.log(unixTimeZero);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Map.size() 统计map中的所有所有键值数量</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> map1 = <span class="literal">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map1.<span class="built_in">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;alpha&#x27;</span>);</span><br><span class="line">map1.<span class="built_in">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;beta&#x27;</span>);</span><br><span class="line">map1.<span class="built_in">set</span>(<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;gamma&#x27;</span>);</span><br><span class="line"></span><br><span class="line">console.<span class="keyword">log</span>(map1.size);</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br></pre></td></tr></table></figure>

<p>Map.clear() 清除所有键值</p>
<p>Map.delete(key) 删除指定Key，如果不存在就返回false，存在就返回true</p>
<p>Map.entries() 将指定的map对象转换成一个迭代器</p>
<p>Map.forEach() 为每个值执行一次函数</p>
<p>myMap.forEach(callback[, thisArg])</p>
<p>callback 函数有三个参数:</p>
<p>value - 元素的值<br>key - 元素的键<br>Map - 当前正在被遍历的对象</p>
<p>Map.get(key) 通过键来获取值，如果找不到就是undefined</p>
<p>Map.has(key) 检测是否包含key，返回true或false</p>
<p>Map.keys() 生成一个包含所有keys值的迭代器</p>
<p>Map.set(key, value) 为map对象新建一个键和值</p>
<p>Map.values() 返回一个包含所有值的迭代器</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript标准库：Number</title>
    <url>/posts/cc46bdda.html</url>
    <content><![CDATA[<p>Number.EPSILON 表示1和大于1且最靠近1的那个浮点数之间的差值</p>
<p>Number.MAX_SAFE_INTEGER 为最大安全整数，2的53次方减1， 9007199254740991</p>
<p>Number.MAX_VALUE MAX_VALUE 属性值接近于 1.79E+308。大于 MAX_VALUE 的值代表 “Infinity”无穷大</p>
<p>Number.MIN_SAFE_INTEGER Number.MIN_SAFE_INTEGER 代表负的(2的53次方减1) -9007199254740991</p>
<p>Number.MIN_VALUE MIN_VALUE 的值约为 5e-324。小于 MIN_VALUE (“underflow values”) 的值将会转换为 0。</p>
<p>Number.NEGATIVE_INFINITY 负无穷大</p>
<p>Number.POSITIVE_INFINITY 正无穷大</p>
<p>Number.NaN 不是数字，不能表示的数字或不是有效数字</p>
<p>Number.isFinite(x) 方法用来检测传入的参数是否是一个有穷数，我理解是数字为true，非数字为false</p>
<p>Number.isInteger(x) 方法用来判断给定的参数是否为整数。</p>
<p>Number.isNaN(x) 方法确定传递的值是否为 NaN和其类型是 Number</p>
<p>Number.isSafeInteger(x) 方法用来判断传入的参数值是否是一个“安全整数，安全整数范围为 -(253 - 1)到 253 - 1 之间的整数</p>
<p>Number.parseFloatx() 将一个字符串转换成浮点数</p>
<p>Number.parseInt() 将一个字符串转换成整数</p>
<p>num.toExponential(x) 方法以指数表示法返回该数值字符串表示形式，我的理解是用科学计数法表示一个值，然后保留x位小数</p>
<p>Number.toFixed() 方法使用定点表示法来格式化一个数值，我的理解是格式化一个数字后保留小数点后多少位</p>
<p>Number.toPrecision() 方法以指定的精度返回该数值对象的字符串表示，我的理解：这个跟上面做对比，这个不能格式化数字</p>
<p>Num.toString(x) 把数字转换成字符串，X位进制单位，输出的进制单位可以在2-22之间</p>
<p>Number.valueOf() 方法返回一个被 Number 对象包装的原始值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numObj = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> numObj); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = numObj.valueOf();</span><br><span class="line"><span class="built_in">console</span>.log(num);           <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num);    <span class="comment">// number</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>linux系统：玩转ubuntu18.04 LTS长期稳定版(一)</title>
    <url>/posts/f1958246.html</url>
    <content><![CDATA[<p>ubuntu版本：18.04 linux内核：4.15自带内核，不建议自己手动升级内核，有些软件就基于这个内核，跟着官方走就行了   一.美化gnome桌面 <code>sudo apt install gnome-tweak-tool</code>   #中文名优化，一个高级扩展管理器<code>sudo apt-get install gnome-shell-extension-top-icons-plus gnome-tweaks</code>          ###开启程序托盘 软件商店搜索 Dynamic Top Bar     ##顶部状态栏透明插件 Dash to dock       ##自定义左侧状态栏 这个是在线安装插件<a href="https://extensions.gnome.org/%EF%BC%8C%E4%B8%8D%E8%BF%87%E4%B8%80%E8%88%AC%E4%BD%9C%E4%B8%BA%E5%A4%87%E7%94%A8%EF%BC%8C%E8%A6%81%E5%AE%89%E8%A3%85%E7%9B%B4%E6%8E%A5%E5%9C%A8%E5%95%86%E5%BA%97%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86">https://extensions.gnome.org/，不过一般作为备用，要安装直接在商店搜索插件就可以了</a> 在文件管理器主目录，Ctrl + H可以显示隐藏文件，就可以看到.local .local/share中新建themes、fonts、icons 三个文件夹，分别存放主题、字体和图标 。 windows或者mac风格主题桌面美化：<a href="https://github.com/vmavromatis/gnome-layout-manager">https://github.com/vmavromatis/gnome-layout-manager</a>     二.拼音输入法 安装ibus-sunpinyin 为什么要安装sunpinyin，因为gnome桌面集成了ibus，所以使用fcitx兼容性不好，我不想折腾，而且这个输入法也够用 <a href="https://launchpad.net/ubuntu/trusty/amd64/python-ibus/1.5.5-1ubuntu3.2">https://launchpad.net/ubuntu/trusty/amd64/python-ibus/1.5.5-1ubuntu3.2</a> 安装输入法 <code>apt install ibus-sunpinyin python-ibus libcanberra-gtk-module</code> 安装这个插件，避免有些设置界面打不开 <code>/usr/lib/ibus/ibus-setup-sunpinyin</code>   #打开输入法设置界面   安装fcitx-sogoupinyin搜狗输入法，也可以配合ibus输入法一起使用 官网：<a href="https://pinyin.sogou.com/linux/">https://pinyin.sogou.com/linux/</a> <code>wget  http://cdn2.ime.sogou.com/dl/index/1524572264/sogoupinyin_2.2.0.0108_amd64.deb?st=zUT1RU19mmznZaP98biXwg&amp;e=1548990251&amp;fn=sogoupinyin_2.2.0.0108_amd64.deb</code> <code>sudo dpkg -i sogoupinyin_2.2.0.0108_amd64.deb</code> <code>sudo apt -f install</code>       三、安装chrome浏览器 <code>sudo wget http://www.linuxidc.com/files/repo/google-chrome.list -P /etc/apt/sources.list.d/</code> <code>wget -q -O - https://dl.google.com/linux/linux_signing_key.pub sudo apt-key add -</code> <code>apt update</code> <code>sudo apt-get install google-chrome-stable</code>     四、安装flash player插件使用 <code>sudo apt-get install flashplugin-installer</code>     五、安装linux版本迅雷Uget <code>sudo apt install uget aria2</code>     六、安装office办公WPS软件 官网下载最新安装包 <a href="http://www.wps.cn/product/wpslinux">http://www.wps.cn/product/wpslinux</a> 解决WPS字体问题：<a href="https://post.332b.com/wp-content/uploads/2018/12/wps_symbol_fonts.zip">wps_symbol_fonts.zip</a> 1.自己下载字体压缩包，手动点击逐个安装 2.命令行安装，需要下载字体包</p>
<p>下载完成后，解压并进入目录中，继续执行： <code>sudo cp * /usr/share/fonts</code> 执行以下命令,生成字体的索引信息： <code>sudo mkfontscale</code> <code>sudo mkfontdir</code> 运行fc-cache命令更新字体缓存。重启wps <code>sudo fc-cache</code></p>
<p>下载最新包安装，下面做个示例 <code>wget http://kdl.cc.ksosoft.com/wps-community/download/6757/wps-office_10.1.0.6757_amd64.deb</code> <code>dpkg -i wps-office_10.1.0.6757_amd64.deb</code> <code>sudo apt -f install</code>     七、安装网易云音乐 官网：<a href="https://music.163.com/#/download">https://music.163.com/#/download</a> <code>wget http://d1.music.126.net/dmusic/netease-cloud-music_1.1.0_amd64_ubuntu.deb</code> <code>sudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu.deb</code> <code>sudo apt -f install</code> 解决无法直接点击打开，需要root权限或在<code>sudo netease-cloud-music</code> 才能打开 原文：<a href="https://blog.csdn.net/Handoking/article/details/81026651">https://blog.csdn.net/Handoking/article/details/81026651</a> <code>sudo gedit /etc/sudoers</code> 添加<code>YOURNAME ALL = NOPASSWD: /usr/bin/netease-cloud-music</code>到最后一行，YOURNAME为你的用户名，注意大小写 <code>sudo gedit /usr/share/applications/netease-cloud-music.desktop</code> 将Exec修改为<code>Exec=sudo netease-cloud-music %U</code> 已知问题：无法在输入框输入中文，可以在其他地方输入中文，然后复制粘贴    </p>
<p>八、Sublime text3安装： <code>wget http://download.sublimetext.com/files/sublime-text_build-3176_amd64.deb</code> <code>dpkg –i sublime-text_build-3176_amd64.deb</code> 下载最新版方法：<a href="http://download.sublimetext.com/files/sublime-text/_build-%E7%89%88%E6%9C%AC%E5%8F%B7/_amd64.deb">http://download.sublimetext.com/files/sublime-text\_build-版本号\_amd64.deb</a> 汉化和插件还有激活办法请自行百度，下面解决中文输入问题 克隆这个git仓库</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/Firef0x/</span>SublimeText-i18n-zh.git</span><br></pre></td></tr></table></figure>

<p>或者直接下载<a href="https://post.332b.com/wp-content/uploads/2019/01/foo.zip">foo.zip</a> 然后解压后给执行权限执行目录里的 <code>chmod 777 sublime-imfix &amp;&amp; ./sublime-imfix</code></p>
<p>汉化包<a href="https://post.332b.com/wp-content/uploads/2019/01/LocalizedMenu-master.zip">LocalizedMenu-master.zip</a>：<a href="https://github.com/zam1024t/LocalizedMenu">https://github.com/zam1024t/LocalizedMenu</a></p>
<p>复制到：<code>/home/user/.config/sublime-text-3/Packages</code> ，其中user为你的用户名</p>
<p>控制面板插件<a href="https://post.332b.com/wp-content/uploads/2019/01/Package-Control.zip">Package Control.zip</a>，复制到下面的目录即可</p>
<p>/opt/sublime_text/Packages</p>
<p>      九、安装数据库图形界面管理工具mysql workbench（<strong>非中文软件</strong>）</p>
<p>默认安装目录：/usr/lib/mysql-workbench</p>
<p>官网：<a href="https://dev.mysql.com/downloads/workbench/">https://dev.mysql.com/downloads/workbench/</a></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://cdn.mysql.com//Downloads/MySQLGUITools/mysql-workbench-community_<span class="number">8</span>.<span class="number">0</span>.<span class="number">14</span>-<span class="number">1</span>ubuntu<span class="number">18</span>.<span class="number">04</span>_amd<span class="number">64</span>.deb</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>linux系统：玩转ubuntu18.04 LTS长期稳定版(二)</title>
    <url>/posts/5ea41924.html</url>
    <content><![CDATA[<p>十、福昕PDF阅读器 官网：<a href="https://www.foxitsoftware.cn/products/reader/">https://www.foxitsoftware.cn/products/reader/</a> <code>wget http://cdn01.foxitsoftware.com/pub/foxit/reader/desktop/linux/2.x/2.4/en_us/FoxitReader.enu.setup.2.4.4.0911.x64.run.tar.gz</code> 解压后执行，就福昕阅读器跟windows安装软件一样 <code>sudo chmod 777 FoxitReader.enu.setup.2.4.4.0911(r057d814).x64.run &amp;&amp; ./FoxitReader.enu.setup.2.4.4.0911(r057d814).x64.run</code> 注意安装后的软件名字叫foxit reader，中文界面   十一、流量进程监控软件 sudo apt install libqt5charts5 libqt5charts5-dev</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>lubuntu   自动登录，去除黑边和创建桌面图标</title>
    <url>/posts/b42e815a.html</url>
    <content><![CDATA[<p>本系统版本为lubuntu 19.04，以下教程仅供参考</p>
<p>一、自动登录开关</p>
<p>修改文件/etc/sddm.conf就可以了</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装编辑器</span></span><br><span class="line">sudo apt install gedit </span><br><span class="line"></span><br><span class="line"><span class="comment">#打开文件</span></span><br><span class="line">sudo gedit <span class="regexp">/etc/</span>sddm.conf</span><br></pre></td></tr></table></figure>

<p>打开/etc/sddm.conf会看到如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">#  lubuntu 19.04的配置</span></span><br><span class="line"><span class="comment"># sddm.conf文件</span></span><br><span class="line"><span class="section">[Autologin]</span></span><br><span class="line"><span class="attr">Session</span>=Lubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置自动登录用户名，删除本行就代表关闭自动登录</span></span><br><span class="line"><span class="attr">User</span>=yourname</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lubuntu 18.04的配置</span></span><br><span class="line"><span class="comment"># sddm.conf文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name of session file for autologin session (if empty try last logged in)</span></span><br><span class="line"><span class="attr">Session</span>=lxqt.desktop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Username for autologin session</span></span><br><span class="line"><span class="attr">User</span>=yourname</span><br></pre></td></tr></table></figure>

<p>二、除去输入法黑边框和黑块背景</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/08/e03a5fff42e2cde863e50f04ef9b655e992807d2.png"></p>
<p>搜狗的皮肤严重依赖混成，可以用xcompmgr轻量级混成管理器来解决</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">sudo apt install xcompmgr</span><br><span class="line"></span><br><span class="line"><span class="meta"># 打开窗口阴影 / 半透明：</span></span><br><span class="line"></span><br><span class="line">xcompmgr -cC</span><br><span class="line"></span><br><span class="line"><span class="meta"># 如果不喜欢阴影，可以将透明度设为 0（完全透明）：</span></span><br><span class="line"></span><br><span class="line">xcompmgr -cC -o <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>一直放在命令行运行也不现实，你可以将它添加开机启动命令里面，就不用开这终端了</p>
<p>三、创建系统桌面快捷方式图标</p>
<p>点击左下角打开程序菜单，看到自己想要的程序，将它的图标拖动到桌面就可以，如果程序图标有感叹号，双击打开有提示是否执行，单机鼠标右键选择信任该执行文件，就不会弹提示，可以直接打开</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>lubuntu   挂机和休眠后黑屏无法启动</title>
    <url>/posts/d14dba64.html</url>
    <content><![CDATA[<p>原因很简单：xfce4默认锁屏挂了，我们无法打开界面，解决方法如下</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">install </span>gnome-<span class="keyword">screensaver</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>这个是gnome的锁屏，我们用它来替换xfce4的锁屏</span><br></pre></td></tr></table></figure>

<p>然后在设置中找到会话启动，设置 =》会话和启动</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/08/2019-08-21_15-16.png"></p>
<p>点击应用程序自启动，然后取消勾选Light locker，也就是锁屏锁，重启后就正常了</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/08/2019-08-21_15-20.png"></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>makemigrations错误</title>
    <url>/posts/d601e484.html</url>
    <content><![CDATA[<p>    出错原因：没有再setting.py只指定更改后的USER路径，AUTH_USER_MODEL = ‘front.User’   manage.py@untitled3 &gt; makemigrations “C:\Program Files\JetBrains\PyCharm 2018.1.4\bin\runnerw.exe” C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe “C:\Program Files\JetBrains\PyCharm 2018.1.4\helpers\pycharm\django_manage.py” makemigrations C:/Users/Administrator/PycharmProjects/untitled3 Tracking file by folder pattern: migrations SystemCheckError: System check identified some issues: ERRORS: auth.User.groups: (fields.E304) Reverse accessor for ‘User.groups’ clashes with reverse accessor for ‘User.groups’. HINT: Add or change a related_name argument to the definition for ‘User.groups’ or ‘User.groups’. auth.User.user_permissions: (fields.E304) Reverse accessor for ‘User.user_permissions’ clashes with reverse accessor for ‘User.user_permissions’. HINT: Add or change a related_name argument to the definition for ‘User.user_permissions’ or ‘User.user_permissions’. front.User.groups: (fields.E304) Reverse accessor for ‘User.groups’ clashes with reverse accessor for ‘User.groups’. HINT: Add or change a related_name argument to the definition for ‘User.groups’ or ‘User.groups’. front.User.user_permissions: (fields.E304) Reverse accessor for ‘User.user_permissions’ clashes with reverse accessor for ‘User.user_permissions’. HINT: Add or change a related_name argument to the definition for ‘User.user_permissions’ or ‘User.user_permissions’.</p>
]]></content>
      <categories>
        <category>技术分享</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql 的基本操作</title>
    <url>/posts/1b033b27.html</url>
    <content><![CDATA[<p><strong>一、修改/etc/mysql/my.conf</strong> 找到bind-address = 127.0.0.1这一行 改为bind-address = 0.0.0.0即可 <strong>二、为需要远程登录的用户赋予权限</strong> 1、新建用户远程连接mysql数据库 grant all on *.* to admin@’%’ identified by ‘123456’ with grant option; flush privileges; 允许任何ip地址(%表示允许任何ip地址)的电脑用admin帐户和密码(123456)来访问这个mysql server。 注意admin账户不一定要存在。 2、支持root用户允许远程连接mysql数据库 grant all privileges on *.* to ‘root’@’%’ identified by ‘123456’ with grant option; flush privileges; 修改数据库密码     mysqladmin -u root -p password 123456 mysql 5.6之前版本： update user set password=password(‘abc’) where User=’root’; mysql 5.7版本： update mysql.user set authentication_string=password(‘123456’) where user=’root’ and host=’%’;; mysql 8.0版本：ALTER user ‘root’@’localhost’ IDENTIFIED BY ‘123456’ 显示所有数据库 show databases 创建数据库 创建一个my_test数据库，并将它的数据库编码设置为utf8编码 create database my_test character set utf8; ##character [ˈkærəktɚ]  特征，特点； 选择和进入一个数据库   use my_test; 删除指定数据库   drop database user; 数据库一旦创建，名称是无法修改的，在mysql数据库中，字符串类型和日期类型的数据，必须要使用单双引号</p>
<h2 id="数据定义语言DDL"><a href="#数据定义语言DDL" class="headerlink" title="数据定义语言DDL"></a>数据定义语言DDL</h2><p><strong>查询</strong> 显示所有表 show tables 查看表字段   desc user ##desc在SQL语言中，代表降序 查看表详细结构，包含创建命令，表编码，表类型 show create table uers; <strong>新增</strong> 新建表 新建一个名称叫user的表，它包含三个字段id设置为整数，username设置为最长10位字符串，password最长为16位 create table user(id int,username varchar(10),password varchar(16)); 新增表字段 在一个表中新增一个mail字段，最大长度为30位 alter table user add mail varchar(30); ##alter [‘ɔltɚ]    变更，改变； <strong>修改</strong> 修改表字段数据类型 修改user表id字段的类型为bigint alter table user modify id bigint; #modify  [ˈmɑdɪfaɪ]    修改，修饰； 修改表的称 将表user改名为users rename table user to users; 修补表编码 修改users表的编码为utf8 alter table users character set utf8; 修改表的字段名（列名） 修改user表下的mail字段，新命名为mails数据类型varchar，限制成30位 alter table users change mail mails varchar(30); <strong>删除</strong> 删除表 drop table users; 删除表字段 删除一列的邮箱字段 alter table user drop mail; ##drop [drɑp] 下降，终止；</p>
<h2 id="数据操作语言DML"><a href="#数据操作语言DML" class="headerlink" title="数据操作语言DML"></a>数据操作语言DML</h2><p><strong>查询</strong> 查询表数据 查看users表所有数据 select * from users 查询指定列(字段)所有数据 select username,mails from users <strong>新增</strong> 新增(插入)表数据 在users新增一个id为2，名称为admin，密码为123456，邮箱为<a href="mailto:&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x31;&#x32;&#x33;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a>的数据，命令全部用空格隔开 insert into users (id,username,password,mails) values (2,’admin’,’123456’,‘123@qq.com’); 新增(插入)表多个数据 插入多个数据时，将多个数据用逗号‘ , ’隔开 insert into users (id,username,password,mails) values (1,’user’,’123456’,‘user@qq.com’),(2,’admin’,’123456’,‘123@qq.com’); <strong>修改</strong> 更改表数据 更新users表id为2的所有数据，将username更为‘admin’，如果没有where指定条件，则会更新这个表的全部数据的username update users set username=’admin’ where id=2; 表数据运算 更新users表username=‘admin’的所有数据，将id加1，除了加法，还可以加减乘除，但必须是数字；如果没有where指定条件，则会更新这个表的全部数据的id update users set id=id+1 where username=’admin’; <strong>删除</strong> 删除表中的所有的所有数据 delete from users; 删除表中的指定数据 删除users表中的id为1的数据 delete from users where id=1 清空表结构，并重新创建同样的表覆盖原表 它跟delete的区别是，delete支持数据找回，truncate不支持数据找回，并且truncate比delete执行速度快 truncate table users;</p>
<h2 id="数据查询语言DQL"><a href="#数据查询语言DQL" class="headerlink" title="数据查询语言DQL"></a>数据查询语言DQL</h2><p><strong>条件查询</strong> where后面可以跟的查询条件</p>
<ol>
<li> =（等于），!=（不等于，&lt;&gt;（不等于），&lt;（大于），&gt;（小于），&lt;=（大于或等于），&gt;=（小于或等于）；</li>
<li> between ……and :值在什么范围</li>
<li> in(1,2)    是否在这个范围里面</li>
<li> is null（为空）和is not null（不为空）</li>
<li> and: 与</li>
<li> or：或者</li>
<li> not；非</li>
</ol>
<p>根据上面的查询条件，给一些示例</p>
<ol>
<li> 查询id大于3  select * from users where id&gt;3;</li>
<li> 查询id的值在1和5之间的   select * from users where id between 1 and 5;</li>
<li> 查询id的值等于1、2和3    select * from users where id in(1,2,3);</li>
<li> 查询id不为空的   select * from users where id is not null;</li>
<li> 查询id等于1和username等于a123的     select * from users where id=1 and username=’a123’</li>
<li> 查询id等于1或者username等于a123的   select * from users where id=1 or usernmae=’a123’</li>
<li> 查询所有id不是1的    select * from users where not id=1;</li>
</ol>
<p><strong>模糊查询</strong> 模糊查询关键字like，%代表任意几个字符，_代表任意一个字符 查询users表username中以a字符开头和a字符结尾的任意字符 SELECT * FROM users WHERE username LIKE ‘a%’ 查询users表username中以a字符开头和a字符结尾的任意4位组成的字符 SELECT * FROM users WHERE username LIKE ‘a__a’ <strong>去重查询</strong> 查询users表中的username字段并且去除重复字段 SELECT DISTINCT username from users; distinct   [dɪˈstɪŋkt]   明显的，清楚的; <strong>查询结果运算</strong> 对查询字段直接进行相加，要输数据都是数字 提取users所有的字段，生成一个新字段，新字段的值为id+3 SELECT *,id+3 as newid from users; 判断如果id大于3就返回1，如果不大于3或者null就返回0 SELECT *,IF(id&gt;3,1,0) as newid from users; IFNULL(expr1,expr2)   expr1为判断对象，如果为null，那么它的值就为expr2 <strong>查询排序</strong> 倒序排序从大到小，默认是ASC从小到大 查询users里面的表，按照id从大到小排序 SELECT * from users ORDER BY id DESC; 指定二级排序 查询users里面的表，按照id从大到小排序，两个id一样时，那两个一样的id就按照number进行从大到小的排序 SELECT * from users ORDER BY id DESC,number DESC; <strong>聚合函数</strong> count 统计 统计表数据总数 统计users表中总共有多少条数据 SELECT COUNT(*) FROM users; 统计字段数据总数 统计在表中有id的数据总共有多少条，如果id为none就不会统计改值 SELECT COUNT(id) FROM users; 它后面还可以更上条件查询where，例如我们想查询id大于3数据的总数 SELECT COUNT(id) FROM users WHERE id&gt;3; AVG 统计平均值，SUM统计总和 统计id值大于3的总和and平均数 SELECT AVG(id),SUM(id) FROM users WHERE id&gt;3; MAX 最大数，MIN最小数 统计id值大于3的最大值and最小值 SELECT MAX(id),MIN(id) FROM users WHERE id&gt;3; GROUP BY分组查询</p>
<ol>
<li> GROUP BY  分组统计id字段</li>
<li> GROUP_CONCAT(score)  统计按照id来进行分组，score字段的所有数据</li>
<li> MIN(score)      统计每组score中最小值</li>
<li> MAX(score)     统计每组score中最大值</li>
</ol>
<p>SELECT id,GROUP_CONCAT(score),MIN(score),MAX(score) FROM users GROUP BY id; <img src="https://post.332b.com/wp-content/uploads/2019/01/QQ%E6%88%AA%E5%9B%BE20190123172412.png"> Hvaing二次条件查找 除了WHERE可以进行条件查找，HAVING可以根据WHERE查找出来的数据，进行二次查找 SELECT id FROM users WHERE id&gt;2 HAVING s&gt;50; WHERE和HAVING的区别 1.HAVING可以使用聚合函数，而WHERE不能使用聚合函数 2.HAVING可以放在GROUP BY后面，配合它进行结合使用，而WHERE必须放在GROUP BY的前面 SQL查询语句书写循序： select &gt; from &gt; where &gt; GROUP BY &gt; having &gt; order by &gt; limit 选择字段  》 来自哪个表 》查询条件 》分组查询 》二次条件查询 》排序</p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>mysql8基础操作（二）</title>
    <url>/posts/de755416.html</url>
    <content><![CDATA[<p>mysql8基础操作</p>
<p>1.union（去重，需要更多的性能）和union all（不会去重，速度快）查询结果对比</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> B</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A <span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> B</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201218160149.png"></p>
<p>2.笛卡尔集现象</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">SELECT * <span class="selector-tag">FROM</span> <span class="selector-tag">A</span>,<span class="selector-tag">B</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201218162628.png"></p>
<p>3.去除笛卡尔集，添加条件筛选</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201222101509.png"></p>
<p>4.内连接查询，inner join 就等于 join</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//img_innerjoin.gif"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A name_a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B name_b <span class="keyword">on</span> name_a.<span class="symbol">`name`</span> = name_b.<span class="symbol">`name`</span> <span class="keyword">WHERE</span> name_b.score &gt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201222104349.png"></p>
<p>5.左外连接查询，取左边的表的全部，右边的表按条件，符合的显示，不符合则显示null，left outer join 与 left join 等价， 一般写成left join</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//1074709-20171229170434726-2010021622.png"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A name_a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B name_b <span class="keyword">on</span> name_a.<span class="symbol">`name`</span> = name_b.<span class="symbol">`name`</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201222105222.png"></p>
<p>6.右外连接查询，取右边的表的全部，左边的表按条件，符合的显示，不符合则显示null，right outer join 与 right join等价，一般写成right join</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//1074709-20171229171503867-2027149651.png"></p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A name_a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B name_b <span class="keyword">on</span> name_a.<span class="symbol">`name`</span> = name_b.<span class="symbol">`name`</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201222105728.png"></p>
<p>7.多表联合查询</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> A name_a <span class="keyword">JOIN</span> B name_b <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> C name_c <span class="keyword">on</span> name_a.<span class="symbol">`name`</span> = name_b.<span class="symbol">`name`</span> <span class="keyword">AND</span>  name_b.<span class="symbol">`name`</span> = name_c.<span class="symbol">`name`</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//image-20201222111033326.png" alt="image-20201222111033326"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>MSYQL 重置密码的艰辛过程</title>
    <url>/posts/af5843f4.html</url>
    <content><![CDATA[<p>此片文章针对的8.0.17，如果你是差不多的版本，只建议参考，mysql 版本变更，导致一些语法也变更了，所以根据自己的实际情况来</p>
<p>我参考了下面链接，发现还是有部分问题</p>
<p><a href="https://blog.csdn.net/shenwuwangc/article/details/83959239">https://blog.csdn.net/shenwuwangc/article/details/83959239</a></p>
<p>先停掉mysql，然后用下面的命令启动，就可以直接任意密码进入</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">mysqld</span> --<span class="comment">console</span> --<span class="comment">skip</span><span class="literal">-</span><span class="comment">grant</span><span class="literal">-</span><span class="comment">tables</span> --<span class="comment">shared</span><span class="literal">-</span><span class="comment">memory</span></span><br></pre></td></tr></table></figure>

<p>先提供几个加密方式，以及对应的密码</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 加密方式      密码      加密后的字符串</span></span><br><span class="line"><span class="meta"># mysql_native_password     admin123    *01A6717B58FF5C7EAFFF6CB7C96F7428EA65FE4C</span></span><br><span class="line"><span class="meta"># 加密方式同上        S.admin123        *55778FA997BB023415F8507D1FAB1B380E83C011</span></span><br></pre></td></tr></table></figure>

<p>查看root密码的加密方式，主机地址等等</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt; select user,host,plugin,authentication_string from mysql.user where user=<span class="emphasis">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-----------------------+</span><br><span class="line"><span class="code"> user  host       plugin                 authentication_string </span></span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-----------------------+</span><br><span class="line"><span class="code"> root  localhost  mysql_native_password                        </span></span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>开始设置自己的密码，密码你可以选择自己想要的，我选择的是admin123</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mysql</span>&gt; update mysql.user set authentication_string=&#x27;*<span class="number">01</span>A<span class="number">6717</span>B<span class="number">58</span>FF<span class="number">5</span>C<span class="number">7</span>EAFFF<span class="number">6</span>CB<span class="number">7</span>C<span class="number">96</span>F<span class="number">7428</span>EA<span class="number">65</span>FE<span class="number">4</span>C&#x27; where user=&#x27;root&#x27;;</span><br><span class="line"><span class="attribute">Query</span> OK, <span class="number">1</span> row affected (<span class="number">0</span>.<span class="number">07</span> sec)</span><br><span class="line"><span class="attribute">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>查看是否修改成功，非常棒，OK！，如果你的加密方式不是mysql_native_password，你可以将上面的语句改动一下即可</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">mysql&gt;  select user,host,plugin,authentication_string from mysql.user where user=<span class="emphasis">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-------------------------------------------+</span><br><span class="line"><span class="code"> user  host       plugin                 authentication_string                     </span></span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-------------------------------------------+</span><br><span class="line"><span class="code"> root  localhost  mysql_native_password  *01A6717B58FF5C7EAFFF6CB7C96F7428EA65FE4C </span></span><br><span class="line"><span class="code">+------+</span>-----------<span class="code">+-----------------------+</span>-------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>刷新一下执行权限，退出命令行，重启mysql登录</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush <span class="keyword">privileges</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; quit</span><br><span class="line">Bye</span><br><span class="line"></span><br><span class="line">G:\mysql\mysql<span class="number">-8.0</span><span class="number">.17</span>-winx64\bin</span><br><span class="line">λ net <span class="keyword">start</span> mysql</span><br><span class="line">MySQL 服务正在启动 ..</span><br><span class="line">MySQL 服务已经启动成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 注意下面的-P4000，是指定端口为<span class="number">4000</span>，如果你端口是默认的<span class="number">3306</span>，可以不用添加</span><br><span class="line">G:\mysql\mysql<span class="number">-8.0</span><span class="number">.17</span>-winx64\bin</span><br><span class="line">λ mysql -u root -P4000 -p</span><br><span class="line">Enter <span class="keyword">password</span>: ********</span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL <span class="keyword">connection</span> id <span class="keyword">is</span> <span class="number">8</span></span><br><span class="line"><span class="keyword">Server</span> <span class="keyword">version</span>: <span class="number">8.0</span><span class="number">.17</span> MySQL Community <span class="keyword">Server</span> - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2019</span>, Oracle <span class="keyword">and</span>/<span class="keyword">or</span> its affiliates. <span class="keyword">All</span> rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span>/<span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line"><span class="keyword">Type</span> <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. <span class="keyword">Type</span> <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> <span class="keyword">input</span> <span class="keyword">statement</span>.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>mysql分组查询和聚合函数，数据截取和排序</title>
    <url>/posts/b232ec93.html</url>
    <content><![CDATA[<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031142611.png"></p>
<p>如图所示的上表，group by分组必须在select中存在，就在这样</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">正确</span><br><span class="line"><span class="keyword">SELECT</span> zuming <span class="keyword">AS</span> new_id <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming;</span><br><span class="line">错误一，因为指定了zuming分组，而<span class="type">name</span>却不知道怎么归类，所以报错了</span><br><span class="line"><span class="keyword">SELECT</span> <span class="type">name</span>,zuming <span class="keyword">AS</span> new_id <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming</span><br><span class="line">错误二</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming </span><br></pre></td></tr></table></figure>

<p>上面的错误使用会引发sql_mode=only_full_group_by，这是因为sql语法越来越严谨了，具体关闭方法百度，不推荐关闭</p>
<p>在查询语句中使用了groups和group均报错，所以就换成 zuming</p>
<p>SELECT zuming AS new_id FROM demo GROUP BY zuming;查询如图</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031143806.png"></p>
<p>如果我们要查询这个组的某个字段有那些值，我们可以用GROUP_CONCAT</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> zuming,GROUP_CONCAT(<span class="type">name</span>),GROUP_CONCAT(age) <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming</span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031144501.png"></p>
<p>如果GROUP BY指定了两个字段，就会这样，ORDER BY指定排序字段， DESC 可以让排序相反</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="type">name</span>,age,zuming,GROUP_CONCAT(salary),COUNT(age) <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming,<span class="type">name</span>,age <span class="keyword">ORDER</span> <span class="keyword">BY</span> zuming <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031151117.png"></p>
<p>GROUP BY 可以配合聚合函数来统计分组组的salary的总和，AS可以将字段改名</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> zuming,GROUP_CONCAT(<span class="type">name</span>),GROUP_CONCAT(salary),SUM(salary) <span class="keyword">as</span> salary_count <span class="keyword">FROM</span> demo <span class="keyword">GROUP</span> <span class="keyword">BY</span> zuming</span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031153129.png"></p>
<p>Limit number,number 第一个数字指定从第几个开始截取，第二个指定截取多少个</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> demo <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">5</span></span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2019/10/20191031154311.png"></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>Python datetime模块详解、示例</title>
    <url>/posts/c3d76eda.html</url>
    <content><![CDATA[<h3 id="一、datetime模块介绍"><a href="#一、datetime模块介绍" class="headerlink" title="一、datetime模块介绍"></a><strong>一、datetime模块介绍</strong></h3><h4 id="（一）、datetime模块中包含如下类："><a href="#（一）、datetime模块中包含如下类：" class="headerlink" title="（一）、datetime模块中包含如下类："></a><strong>（一）、datetime模块中包含如下类：</strong></h4><p>类名</p>
<p>功能说明</p>
<p>date</p>
<p>日期对象,常用的属性有year, month, day</p>
<p>time</p>
<p>时间对象</p>
<p>datetime</p>
<p>日期时间对象,常用的属性有hour, minute, second, microsecond</p>
<p>datetime_CAPI</p>
<p>日期时间对象C语言接口</p>
<p>timedelta</p>
<p>时间间隔，即两个时间点之间的长度</p>
<p>tzinfo</p>
<p>时区信息对象</p>
<h4 id="（二）、datetime模块中包含的常量"><a href="#（二）、datetime模块中包含的常量" class="headerlink" title="（二）、datetime模块中包含的常量"></a><strong>（二）、datetime模块中包含的常量</strong></h4><p>常量</p>
<p>功能说明</p>
<p>用法</p>
<p>返回值</p>
<p>MAXYEAR</p>
<p>返回能表示的最大年份</p>
<p>datetime.MAXYEAR</p>
<p>9999</p>
<p>MINYEAR</p>
<p>返回能表示的最小年份</p>
<p>datetime.MINYEAR</p>
<p>1</p>
<h3 id="二、date类"><a href="#二、date类" class="headerlink" title="二、date类"></a><strong>二、date类</strong></h3><h4 id="（一）、date对象构成"><a href="#（一）、date对象构成" class="headerlink" title="（一）、date对象构成"></a><strong>（一）、date对象构成</strong></h4><p><strong>1、date对象由<code>year</code>年份、<code>month</code>月份及<code>day</code>日期三部分构成：</strong></p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">date</span>（<span class="built_in">year</span>，<span class="built_in">month</span>，<span class="built_in">day</span>)</span><br></pre></td></tr></table></figure>

<p><strong>2、 通过<code>year</code>, <code>month</code>, <code>day</code>三个数据描述符可以进行访问：</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.date</span><span class="selector-class">.today</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>.year</span><br><span class="line"><span class="number">2017</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>.month</span><br><span class="line"><span class="number">3</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>.day</span><br><span class="line"><span class="number">22</span> </span><br></pre></td></tr></table></figure>

<p><strong>3、当然，你也可以用<code>__getattribute__(...)</code>方法获得上述值：</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;year&#x27;</span>)</span><br><span class="line"><span class="selector-tag">2017</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"><span class="selector-tag">3</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;day&#x27;</span>)</span><br><span class="line"><span class="selector-tag">22</span></span><br></pre></td></tr></table></figure>

<h4 id="（二）、date对象中包含的方法与属性"><a href="#（二）、date对象中包含的方法与属性" class="headerlink" title="（二）、date对象中包含的方法与属性"></a><strong>（二）、date对象中包含的方法与属性</strong></h4><h5 id="1、用于日期比较大小的方法"><a href="#1、用于日期比较大小的方法" class="headerlink" title="1、用于日期比较大小的方法"></a><strong>1、用于日期比较大小的方法</strong></h5><p>方法名</p>
<p>方法说明</p>
<p>用法</p>
<p>__eq__(…)</p>
<p>等于(x==y)</p>
<p>x.__eq__(y)</p>
<p>__ge__(…)</p>
<p>大于等于(x&gt;=y)</p>
<p>x.__ge__(y)</p>
<p>__gt__(…)</p>
<p>大于(x&gt;y)</p>
<p>x.__gt__(y)</p>
<p>__le__(…)</p>
<p>小于等于(x&lt;=y)</p>
<p>x.__le__(y)</p>
<p>__lt__(…)</p>
<p>小于(x</p>
<p>x.__lt__(y)</p>
<p>__ne__(…)</p>
<p>不等于(x!=y)</p>
<p>x.__ne__(y)</p>
<p>以上方法的返回值为True\False <strong>示例如下：</strong></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a=datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">b=datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">15</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__eq__(b)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__ge__(b)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__gt__(b)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__le__(b)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__lt__(b)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__ne__(b)</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h5 id="2、获得二个日期相差多少天"><a href="#2、获得二个日期相差多少天" class="headerlink" title="2、获得二个日期相差多少天"></a><strong>2、获得二个日期相差多少天</strong></h5><p>使用**<code>__sub__(...)</code><strong>和</strong><code>__rsub__(...)</code>**方法，其实二个方法差不太多，一个是正向操作，一个是反向操作：</p>
<p>方法名</p>
<p>方法说明</p>
<p>用法</p>
<p>__sub__(…)</p>
<p>x - y</p>
<p>x.__sub__(y)</p>
<p>__rsub__(…)</p>
<p>y - x</p>
<p>x.__rsub__(y)</p>
<p><strong>示例如下:</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span></span><br><span class="line"><span class="selector-tag">datetime</span><span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">b</span></span><br><span class="line"><span class="selector-tag">datetime</span><span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">15</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__sub__</span>(b)</span><br><span class="line"><span class="selector-tag">datetime</span><span class="selector-class">.timedelta</span>(<span class="number">7</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__rsub__</span>(b)</span><br><span class="line"><span class="selector-tag">datetime</span><span class="selector-class">.timedelta</span>(-<span class="number">7</span>)</span><br></pre></td></tr></table></figure>

<p>计算结果的返回值类型为<code>datetime.timedelta</code>, 如果获得整数类型的结果则按下面的方法操作：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>.__sub__(<span class="selector-tag">b</span>)<span class="selector-class">.days</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span>.__rsub__(<span class="selector-tag">b</span>)<span class="selector-class">.days</span></span><br><span class="line">-<span class="number">7</span></span><br></pre></td></tr></table></figure>

<h5 id="3、ISO标准化日期"><a href="#3、ISO标准化日期" class="headerlink" title="3、ISO标准化日期"></a><strong>3、ISO标准化日期</strong></h5><p>如果想要让所使用的日期符合ISO标准，那么使用如下三个方法: 1).<em>* <code>isocalendar(...)</code>*</em>:返回一个包含三个值的元组，三个值依次为：<code>year</code>年份，<code>week number</code>周数，<code>weekday</code>星期数（周一为1…周日为7)： <strong>示例如下</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.date</span>(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isocalendar</span>()</span><br><span class="line">(<span class="number">2017</span>, <span class="number">12</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isocalendar</span>()<span class="selector-attr">[0]</span></span><br><span class="line"><span class="number">2017</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isocalendar</span>()<span class="selector-attr">[1]</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isocalendar</span>()<span class="selector-attr">[2]</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>2). <strong><code>isoformat(...)</code></strong>: 返回符合ISO 8601标准 (<code>YYYY-MM-DD</code>) 的日期字符串； <strong>示例如下</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.date</span>(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isoformat</span>()</span><br><span class="line"><span class="string">&#x27;2017-03-22&#x27;</span></span><br></pre></td></tr></table></figure>

<p>3). <strong><code>isoweekday(...)</code></strong>: 返回符合ISO标准的指定日期所在的星期数（周一为1…周日为7) <strong>示例如下：</strong></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.isoweekday()</span></span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<p>4).与**<code>isoweekday(...)</code><strong>相似的还有一个</strong><code>weekday(...)</code>**方法，只不过是<code>weekday(...)</code>方法返回的周一为 0, 周日为 6 <strong>示例如下：</strong></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.weekday()</span></span><br><span class="line">2</span><br></pre></td></tr></table></figure>

<h5 id="4、其他方法与属性"><a href="#4、其他方法与属性" class="headerlink" title="4、其他方法与属性"></a><strong>4、其他方法与属性</strong></h5><p>1). <strong><code>timetuple(...)</code></strong>:该方法为了兼容<code>time.localtime(...)</code>返回一个类型为<code>time.struct_time</code>的数组，但有关时间的部分元素值为0：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = datetime.date(2017,3,22)</span><br><span class="line">&gt;&gt;&gt; a.timetuple()</span><br><span class="line">time.struct_time(<span class="attribute">tm_year</span>=2017, <span class="attribute">tm_mon</span>=3, <span class="attribute">tm_mday</span>=22, <span class="attribute">tm_hour</span>=0, <span class="attribute">tm_min</span>=0, <span class="attribute">tm_sec</span>=0, <span class="attribute">tm_wday</span>=2, <span class="attribute">tm_yday</span>=81, <span class="attribute">tm_isdst</span>=-1)</span><br><span class="line">&gt;&gt;&gt; a.timetuple().tm_year</span><br><span class="line">2017</span><br><span class="line">&gt;&gt;&gt; a.timetuple().tm_mon</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; a.timetuple().tm_mday</span><br><span class="line">22</span><br></pre></td></tr></table></figure>

<p>2).**<code>toordinal(...)</code>**： 返回公元公历开始到现在的天数。公元1年1月1日为1</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.date(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.toordinal()</span></span><br><span class="line">736410</span><br></pre></td></tr></table></figure>

<p>3). **<code>replace(...)</code>**：返回一个替换指定日期字段的新date对象。参数3个可选参数，分别为year,month,day。注意替换是产生新对象，不影响原date对象。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.date</span>(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">b</span> = <span class="selector-tag">a</span><span class="selector-class">.replace</span>(<span class="number">2017</span>,<span class="number">2</span>,<span class="number">28</span>)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">28</span>)</span><br></pre></td></tr></table></figure>

<p>4).**<code>resolution</code>**：date对象表示日期的最小单位。这里是天。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.date</span>.resolution</span><br><span class="line">datetime<span class="selector-class">.timedelta</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>5).**<code>fromordinal(...)</code>**：将Gregorian日历时间转换为date对象；Gregorian Calendar ：一种日历表示方法，类似于我国的农历，西方国家使用比较多。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.date</span>(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">b</span> = <span class="selector-tag">a</span><span class="selector-class">.toordinal</span>()</span><br><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.date</span><span class="selector-class">.fromordinal</span>(b)</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>6).**<code>fromtimestamp(...)</code>**：根据给定的时间戮，返回一个date对象</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span><span class="selector-class">.time</span>()</span><br><span class="line"><span class="number">1490165087.2242179</span></span><br><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.date</span><span class="selector-class">.fromtimestamp</span>(<span class="selector-tag">time</span><span class="selector-class">.time</span>())</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>7).**<code>today(...)</code>**：返回当前日期</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.date</span><span class="selector-class">.today</span>()</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<p>8).**<code>max</code>**： date类能表示的最大的年、月、日的数值</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.<span class="built_in">date</span>.<span class="keyword">max</span></span><br><span class="line">datetime.<span class="built_in">date</span>(<span class="number">9999</span>, <span class="number">12</span>, <span class="number">31</span>)</span><br></pre></td></tr></table></figure>

<p>9).**<code>min</code>**： date类能表示的最小的年、月、日的数值</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.<span class="built_in">date</span>.<span class="keyword">min</span></span><br><span class="line">datetime.<span class="built_in">date</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="（三）、日期的字符串输出"><a href="#（三）、日期的字符串输出" class="headerlink" title="（三）、日期的字符串输出"></a><strong>（三）、日期的字符串输出</strong></h4><p><strong>1、如果你想将日期对象转化为字符串对象的话，可以用到<code>__format__(...)</code>方法以指定格式进行日期输出：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">a</span> = datetime.<span class="built_in">date</span>(<span class="number">2017</span>,<span class="number">3</span>,<span class="number">22</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__format__(<span class="string">&#x27;%Y-%m-%d&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2017-03-22&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__format__(<span class="string">&#x27;%Y/%m/%d&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;2017/03/22&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__format__(<span class="string">&#x27;%y/%m/%d&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;17/03/22&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__format__(<span class="string">&#x27;%D&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;03/22/17&#x27;</span></span><br></pre></td></tr></table></figure>

<p>与此方法等价的方法为<code>strftime(...)</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.strftime</span>(<span class="string">&quot;%Y%m%d&quot;</span>)</span><br><span class="line"><span class="string">&#x27;20170322&#x27;</span></span><br></pre></td></tr></table></figure>

<p>关于格式化字符串的相关内容，请查阅本文最后的：<strong>附录：python中时间日期格式化符号</strong> <strong>2、如果只是相简单的获得日期的字符串，则使用<code>__str__(...)</code></strong></p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a.__str__()</span><br><span class="line">&#x27;<span class="number">2017-03-22</span>&#x27;</span><br></pre></td></tr></table></figure>

<p><strong>3、如果想要获得ctime样式的格式请使用<code>ctime(...)</code>:</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.ctime</span>()</span><br><span class="line"><span class="string">&#x27;Wed Mar 22 00:00:00 2017&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、time类"><a href="#三、time类" class="headerlink" title="三、time类"></a><strong>三、time类</strong></h3><h4 id="一-、time类的数据构成"><a href="#一-、time类的数据构成" class="headerlink" title="(一)、time类的数据构成"></a><strong>(一)、time类的数据构成</strong></h4><p><code>time</code>类由<code>hour</code>小时、<code>minute</code>分钟、<code>second</code>秒、<code>microsecond</code>毫秒和<code>tzinfo</code>五部分组成</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">time(<span class="comment">[hour<span class="comment">[, minute<span class="comment">[, second<span class="comment">[, microsecond<span class="comment">[, tzinfo]</span>]</span>]</span>]</span>]</span>)</span><br></pre></td></tr></table></figure>

<p>相应的，time类中就有上述五个变量来存储应该的值：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.time(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a</span></span><br><span class="line">datetime.time(12, 20, 59, 899)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.hour</span></span><br><span class="line">12</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.minute</span></span><br><span class="line">20</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.second</span></span><br><span class="line">59</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.microsecond</span></span><br><span class="line">899</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.tzinfo</span></span><br></pre></td></tr></table></figure>

<p>与<code>date</code>类一样，<code>time</code>类也包含<code>__getattribute__(...)</code>方法可以读取相关属性：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;hour&#x27;</span>)</span><br><span class="line"><span class="selector-tag">12</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;minute&#x27;</span>)</span><br><span class="line"><span class="selector-tag">20</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.__getattribute__</span>(<span class="string">&#x27;second&#x27;</span>)</span><br><span class="line"><span class="selector-tag">59</span></span><br></pre></td></tr></table></figure>

<h4 id="（二）、time类中的方法和属性"><a href="#（二）、time类中的方法和属性" class="headerlink" title="（二）、time类中的方法和属性"></a><strong>（二）、time类中的方法和属性</strong></h4><h5 id="1、比较时间大小"><a href="#1、比较时间大小" class="headerlink" title="1、比较时间大小"></a><strong>1、比较时间大小</strong></h5><p>相关方法包括：<code>__eq__(...)</code>, <code>__ge__(...)</code>, <code>__gt__(...)</code>, <code>__le__(...)</code>, <code>__lt__(...)</code>， <code>__ne__(...)</code> 这里的方法与<code>date</code>类中定义的方法大同小异，使用方法与一样，这里就不过多介绍了，示例如下：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.time(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">b = datetime.time(<span class="number">11</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">889</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__eq__(b)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__ne__(b)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__ge__(b)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__gt__(b)</span></span><br><span class="line">True</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__le__(b)</span></span><br><span class="line">False</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__lt__(b)</span></span><br><span class="line">False</span><br></pre></td></tr></table></figure>

<h5 id="2、-nonzero"><a href="#2、-nonzero" class="headerlink" title="2、__nonzero__(...)"></a><strong>2、<code>__nonzero__(...)</code></strong></h5><p>判断时间对象是否非零，返回值为True/False:</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a = datetime.time(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a.__nonzero__()</span></span><br><span class="line">True</span><br></pre></td></tr></table></figure>

<h5 id="3、其他属性"><a href="#3、其他属性" class="headerlink" title="3、其他属性"></a><strong>3、其他属性</strong></h5><p>1）、**<code>max</code>**：最大的时间表示数值：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.<span class="built_in">time</span>.<span class="built_in">max</span></span><br><span class="line">datetime.<span class="built_in">time</span>(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>, <span class="number">999999</span>)</span><br></pre></td></tr></table></figure>

<p>2）、**<code>min</code>**：最小的时间表示数值</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.<span class="built_in">time</span>.<span class="built_in">min</span></span><br><span class="line">datetime.<span class="built_in">time</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>3）、**<code>resolution</code>**：时间间隔单位为分钟</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.time</span>.resolution</span><br><span class="line">datetime<span class="selector-class">.timedelta</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="（三）、时间的字符串输出"><a href="#（三）、时间的字符串输出" class="headerlink" title="（三）、时间的字符串输出"></a><strong>（三）、时间的字符串输出</strong></h4><p><strong>1、如果你想将时间对象转化为字符串对象的话，可以用到<code>__format__(...)</code>方法以指定格式进行时间输出：</strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">a</span> = datetime.<span class="built_in">time</span>(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__format__(<span class="string">&#x27;%H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;12:20:59&#x27;</span></span><br></pre></td></tr></table></figure>

<p>与此方法等价的方法为<code>strftime(...)</code></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.time</span>(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.strftime</span>(<span class="string">&#x27;%H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;12:20:59&#x27;</span></span><br></pre></td></tr></table></figure>

<p>关于格式化字符串的相关内容，请查阅本文最后的：<strong>附录：python中时间日期格式化符号</strong> <strong>2、ISO标准输出</strong> 如果要使输出的时间字符符合ISO标准，请使用<code>isoformat(...)</code>:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.time</span>(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.isoformat</span>()</span><br><span class="line"><span class="string">&#x27;12:20:59.000899&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>3、如果只是相简单的获得时间的字符串，则使用<code>__str__(...)</code></strong></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">a</span> = datetime.<span class="built_in">time</span>(<span class="number">12</span>,<span class="number">20</span>,<span class="number">59</span>,<span class="number">899</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.__str__()</span><br><span class="line"><span class="string">&#x27;12:20:59.000899&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="四、datetime类"><a href="#四、datetime类" class="headerlink" title="四、datetime类"></a><strong>四、datetime类</strong></h3><h4 id="一-、datetime类的数据构成"><a href="#一-、datetime类的数据构成" class="headerlink" title="(一)、datetime类的数据构成"></a><strong>(一)、datetime类的数据构成</strong></h4><p><code>datetime</code>类其实是可以看做是<code>date</code>类和<code>time</code>类的合体，其大部分的方法和属性都继承于这二个类，相关的操作方法请参阅，本文上面关于二个类的介绍。其数据构成也是由这二个类所有的属性所组成的。</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">datetime(<span class="built_in">year</span>, <span class="built_in">month</span>, <span class="built_in">day</span>[, <span class="built_in">hour</span>[, <span class="built_in">minute</span>[, <span class="built_in">second</span>[, microsecond[,tzinfo]]]]])</span><br></pre></td></tr></table></figure>

<h4 id="（二）、专属于datetime的方法和属性"><a href="#（二）、专属于datetime的方法和属性" class="headerlink" title="（二）、专属于datetime的方法和属性"></a><strong>（二）、专属于datetime的方法和属性</strong></h4><h5 id="1、-date-…-：返回datetime对象的日期部分："><a href="#1、-date-…-：返回datetime对象的日期部分：" class="headerlink" title="**1、 date(…)**：返回datetime对象的日期部分："></a>**1、 date(…)**：返回datetime对象的日期部分：</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">494248</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.date</span>()</span><br><span class="line">datetime<span class="selector-class">.date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<h5 id="2、time-…-：返回datetime对象的时间部分："><a href="#2、time-…-：返回datetime对象的时间部分：" class="headerlink" title="**2、time(…)**：返回datetime对象的时间部分："></a>**2、time(…)**：返回datetime对象的时间部分：</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">494248</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span><span class="selector-class">.time</span>()</span><br><span class="line">datetime<span class="selector-class">.time</span>(<span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">494248</span>)</span><br></pre></td></tr></table></figure>

<h4 id="3、utctimetuple-…-：返回UTC时间元组："><a href="#3、utctimetuple-…-：返回UTC时间元组：" class="headerlink" title="**3、utctimetuple(…)**：返回UTC时间元组："></a>**3、utctimetuple(…)**：返回UTC时间元组：</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; a = datetime.datetime.now()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime.datetime(2017, 3, 22, 16, 9, 33, 494248)</span><br><span class="line">&gt;&gt;&gt; a.utctimetuple()</span><br><span class="line">time.struct_time(<span class="attribute">tm_year</span>=2017, <span class="attribute">tm_mon</span>=3, <span class="attribute">tm_mday</span>=22, <span class="attribute">tm_hour</span>=16, <span class="attribute">tm_min</span>=9, <span class="attribute">tm_sec</span>=33, <span class="attribute">tm_wday</span>=2, <span class="attribute">tm_yday</span>=81, <span class="attribute">tm_isdst</span>=0)</span><br></pre></td></tr></table></figure>

<h4 id="4、combine-…-：将一个date对象和一个time对象合并生成一个datetime对象："><a href="#4、combine-…-：将一个date对象和一个time对象合并生成一个datetime对象：" class="headerlink" title="**4、combine(…)**：将一个date对象和一个time对象合并生成一个datetime对象："></a>**4、combine(…)**：将一个date对象和一个time对象合并生成一个datetime对象：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">494248</span>)</span><br><span class="line">&gt;&gt;&gt;datetime<span class="selector-class">.datetime</span><span class="selector-class">.combine</span>(<span class="selector-tag">a</span><span class="selector-class">.date</span>(),<span class="selector-tag">a</span><span class="selector-class">.time</span>())</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, <span class="number">494248</span>)</span><br></pre></td></tr></table></figure>

<h4 id="5、now-…-：返回当前日期时间的datetime对象："><a href="#5、now-…-：返回当前日期时间的datetime对象：" class="headerlink" title="**5、now(…)**：返回当前日期时间的datetime对象："></a>**5、now(…)**：返回当前日期时间的datetime对象：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">16</span>, <span class="number">9</span>, <span class="number">33</span>, </span><br></pre></td></tr></table></figure>

<h4 id="6、utcnow-…-返回当前日期时间的UTC-datetime对象："><a href="#6、utcnow-…-返回当前日期时间的UTC-datetime对象：" class="headerlink" title="6、utcnow(…):返回当前日期时间的UTC datetime对象："></a><strong>6、utcnow(…)</strong>:返回当前日期时间的UTC datetime对象：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">a</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.utcnow</span>()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">26</span>, <span class="number">54</span>, <span class="number">935242</span>)</span><br></pre></td></tr></table></figure>

<h4 id="7、strptime-…-：根据string-format-2个参数，返回一个对应的datetime对象："><a href="#7、strptime-…-：根据string-format-2个参数，返回一个对应的datetime对象：" class="headerlink" title="**7、strptime(…)**：根据string, format 2个参数，返回一个对应的datetime对象："></a>**7、strptime(…)**：根据string, format 2个参数，返回一个对应的datetime对象：</h4><figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime.datetime.strptime(&#x27;<span class="number">2017</span>-<span class="number">3</span>-<span class="number">22</span> <span class="number">15</span>:<span class="number">25</span>&#x27;,&#x27;<span class="built_in">%Y</span>-<span class="built_in">%m</span>-<span class="built_in">%d</span> <span class="built_in">%H</span>:<span class="built_in">%M</span>&#x27;)</span><br><span class="line">datetime.datetime(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">15</span>, <span class="number">25</span>)</span><br></pre></td></tr></table></figure>

<h4 id="8、utcfromtimestamp-…-UTC时间戳的datetime对象，时间戳值为time-time-："><a href="#8、utcfromtimestamp-…-UTC时间戳的datetime对象，时间戳值为time-time-：" class="headerlink" title="8、utcfromtimestamp(…):UTC时间戳的datetime对象，时间戳值为time.time()："></a><strong>8、utcfromtimestamp(…)</strong>:UTC时间戳的datetime对象，时间戳值为time.time()：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; datetime<span class="selector-class">.datetime</span><span class="selector-class">.utcfromtimestamp</span>(<span class="selector-tag">time</span><span class="selector-class">.time</span>())</span><br><span class="line">datetime<span class="selector-class">.datetime</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">22</span>, <span class="number">8</span>, <span class="number">29</span>, <span class="number">7</span>, <span class="number">654272</span>)</span><br></pre></td></tr></table></figure>

<h3 id="五、timedelta类"><a href="#五、timedelta类" class="headerlink" title="五、timedelta类"></a><strong>五、timedelta类</strong></h3><p><code>timedelta</code>类是用来计算二个<code>datetime</code>对象的差值的。 此类中包含如下属性： <strong>1、<code>days</code></strong>:天数 **2、<code>microseconds</code>**：微秒数(&gt;=0 并且 &lt;1秒） **3、<code>seconds</code>**：秒数(&gt;=0 并且 &lt;1天）</p>
<h3 id="六、日期计算实操"><a href="#六、日期计算实操" class="headerlink" title="六、日期计算实操"></a><strong>六、日期计算实操</strong></h3><h4 id="1-获取当前日期时间："><a href="#1-获取当前日期时间：" class="headerlink" title="1.获取当前日期时间："></a><strong>1.获取当前日期时间：</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">now = datetime.datetime.now()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">now</span></span><br><span class="line">datetime.datetime(2017, 3, 22, 16, 55, 49, 148233)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today = datetime.date.today()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today</span></span><br><span class="line">datetime.date(2017, 3, 22)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">now.date()</span></span><br><span class="line">datetime.date(2017, 3, 22)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">now.time()</span></span><br><span class="line">datetime.time(16, 55, 49, 148233)</span><br></pre></td></tr></table></figure>

<h4 id="2-获取上个月第一天和最后一天的日期："><a href="#2-获取上个月第一天和最后一天的日期：" class="headerlink" title="2.获取上个月第一天和最后一天的日期："></a><strong>2.获取上个月第一天和最后一天的日期：</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today = datetime.date.today()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today</span></span><br><span class="line">datetime.date(2017, 3, 22)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">mlast_day = datetime.date(today.year, today.month, <span class="number">1</span>) - datetime.timedelta(<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">mlast_day</span></span><br><span class="line">datetime.date(2017, 2, 28)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">mfirst_day = datetime.date(mlast_day.year, mlast_day.month, <span class="number">1</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">mfirst_day</span></span><br><span class="line">datetime.date(2017, 2, 1)</span><br></pre></td></tr></table></figure>

<h4 id="3-获取时间差"><a href="#3-获取时间差" class="headerlink" title="3.获取时间差"></a><strong>3.获取时间差</strong></h4><p>时间差单位为秒</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">start_time = datetime.datetime.now()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">end_time = datetime.datetime.now()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">(end_time - start_time).seconds</span></span><br><span class="line">7</span><br></pre></td></tr></table></figure>

<p>差值不只是可以查看相差多少秒，还可以查看天(days), 秒(seconds), 微秒(microseconds).</p>
<h4 id="4-计算当前时间向后8个小时的时间"><a href="#4-计算当前时间向后8个小时的时间" class="headerlink" title="4.计算当前时间向后8个小时的时间"></a><strong>4.计算当前时间向后8个小时的时间</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">d1 = datetime.datetime.now()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">d2 = d1 + datetime.timedelta(hours = <span class="number">8</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">d2</span></span><br><span class="line">datetime.datetime(2017, 3, 23, 1, 10, 37, 182240)</span><br></pre></td></tr></table></figure>

<p>可以计算: 天(days), 小时(hours), 分钟(minutes), 秒(seconds), 微秒(microseconds).</p>
<h4 id="5-计算上周一和周日的日期"><a href="#5-计算上周一和周日的日期" class="headerlink" title="5.计算上周一和周日的日期"></a><strong>5.计算上周一和周日的日期</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">today = datetime.date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today</span></span><br><span class="line">datetime.date(2017, 3, 23)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today_weekday = today.isoweekday()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_sunday = today - datetime.timedelta(days=today_weekday)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_monday = last_sunday - datetime.timedelta(days=<span class="number">6</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_sunday</span></span><br><span class="line">datetime.date(2017, 3, 19)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_monday</span></span><br><span class="line">datetime.date(2017, 3, 13)</span><br></pre></td></tr></table></figure>

<h4 id="6-计算指定日期当月最后一天的日期和本月天数"><a href="#6-计算指定日期当月最后一天的日期和本月天数" class="headerlink" title="6.计算指定日期当月最后一天的日期和本月天数"></a><strong>6.计算指定日期当月最后一天的日期和本月天数</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">date = datetime.date(<span class="number">2017</span>,<span class="number">12</span>,<span class="number">20</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="function"><span class="keyword">def</span> <span class="title">eomonth</span>(<span class="params">date_object</span>):</span></span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">if</span> date_object.month == <span class="number">12</span>:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">        next_month_first_date = datetime.date(date_object.year+<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">else</span>:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">        next_month_first_date = datetime.date(date_object.year, date_object.month+<span class="number">1</span>, <span class="number">1</span>)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">return</span> next_month_first_date - datetime.timedelta(<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">eomonth(date)</span></span><br><span class="line">datetime.date(2017, 12, 31)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">eomonth(date).day</span></span><br><span class="line">31</span><br></pre></td></tr></table></figure>

<h4 id="7-计算指定日期下个月当天的日期"><a href="#7-计算指定日期下个月当天的日期" class="headerlink" title="7.计算指定日期下个月当天的日期"></a><strong>7.计算指定日期下个月当天的日期</strong></h4><p>这里要调用上一项中的函数<code>eomonth(...)</code></p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">date = datetime.date(<span class="number">2017</span>,<span class="number">12</span>,<span class="number">20</span>)                                            </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="function"><span class="keyword">def</span> <span class="title">edate</span>(<span class="params">date_object</span>):</span>                                                     </span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">if</span> date_object.month == <span class="number">12</span>:                          </span></span><br><span class="line"><span class="meta">...</span> <span class="python">        next_month_date = datetime.date(date_object.year+<span class="number">1</span>, <span class="number">1</span>,date_object.day)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">else</span>:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">        next_month_first_day = datetime.date(date_object.year,date_object.month+<span class="number">1</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">        <span class="keyword">if</span> date_object.day &gt; eomonth(last_month_first_day).day:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">            next_month_date = datetime.date(date_object.year,date_object.month+<span class="number">1</span>,eomonth(last_month_first_day).day)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">        <span class="keyword">else</span>:</span></span><br><span class="line"><span class="meta">...</span> <span class="python">            next_month_date = datetime.date(date_object.year, date_object.month+<span class="number">1</span>, date_object.day)</span></span><br><span class="line"><span class="meta">...</span> <span class="python">    <span class="keyword">return</span> next_month_date</span></span><br><span class="line"><span class="meta">...</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">edate(date)</span></span><br><span class="line">datetime.date(2018, 1, 20)</span><br></pre></td></tr></table></figure>

<h4 id="8-获得本周一至今天的时间段并获得上周对应同一时间段"><a href="#8-获得本周一至今天的时间段并获得上周对应同一时间段" class="headerlink" title="8.获得本周一至今天的时间段并获得上周对应同一时间段"></a><strong>8.获得本周一至今天的时间段并获得上周对应同一时间段</strong></h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today = datetime.date.today()</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">this_monday = today - datetime.timedelta(today.isoweekday()-<span class="number">1</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_monday = this_monday - datetime.timedelta(<span class="number">7</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_weekday = today -datetime.timedelta(<span class="number">7</span>)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">this_monday</span></span><br><span class="line">datetime.date(2017, 3, 20)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">today</span></span><br><span class="line">datetime.date(2017, 3, 23)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_monday</span></span><br><span class="line">datetime.date(2017, 3, 13)</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">last_weekday</span></span><br><span class="line">datetime.date(2017, 3, 16)</span><br></pre></td></tr></table></figure>

<h3 id="附录：python中时间日期格式化符号："><a href="#附录：python中时间日期格式化符号：" class="headerlink" title="附录：python中时间日期格式化符号："></a><strong>附录：python中时间日期格式化符号：</strong></h3><p>符号</p>
<p>说明</p>
<p><code>%y</code></p>
<p>两位数的年份表示（00-99）</p>
<p><code>%Y</code></p>
<p>四位数的年份表示（000-9999）</p>
<p><code>%m</code></p>
<p>月份（01-12）</p>
<p><code>%d</code></p>
<p>月内中的一天（0-31）</p>
<p><code>%H</code></p>
<p>24小时制小时数（0-23）</p>
<p><code>%I</code></p>
<p>12小时制小时数（01-12）</p>
<p><code>%M</code></p>
<p>分钟数（00=59）</p>
<p><code>%S</code></p>
<p>秒（00-59）</p>
<p><code>%a</code></p>
<p>本地简化星期名称</p>
<p><code>%A</code></p>
<p>本地完整星期名称</p>
<p><code>%b</code></p>
<p>本地简化的月份名称</p>
<p><code>%B</code></p>
<p>本地完整的月份名称</p>
<p><code>%c</code></p>
<p>本地相应的日期表示和时间表示</p>
<p><code>%j</code></p>
<p>年内的一天（001-366）</p>
<p><code>%p</code></p>
<p>本地A.M.或P.M.的等价符</p>
<p><code>%U</code></p>
<p>一年中的星期数（00-53）星期天为星期的开始</p>
<p><code>%w</code></p>
<p>星期（0-6），星期天为星期的开始</p>
<p><code>%W</code></p>
<p>一年中的星期数（00-53）星期一为星期的开始</p>
<p><code>%x</code></p>
<p>本地相应的日期表示</p>
<p><code>%X</code></p>
<p>本地相应的时间表示</p>
<p><code>%Z</code></p>
<p>当前时区的名称</p>
<p><code>%%</code></p>
<p>%号本身</p>
<h3 id="——————–-作者：cmzsteven-来源：CSDN-原文：https-blog-csdn-net-cmzsteven-article-details-64906245-utm-source-copy-版权声明：本文为博主原创文章，转载请附上博文链接！"><a href="#——————–-作者：cmzsteven-来源：CSDN-原文：https-blog-csdn-net-cmzsteven-article-details-64906245-utm-source-copy-版权声明：本文为博主原创文章，转载请附上博文链接！" class="headerlink" title="-——————– 作者：cmzsteven 来源：CSDN 原文：https://blog.csdn.net/cmzsteven/article/details/64906245?utm\_source=copy 版权声明：本文为博主原创文章，转载请附上博文链接！"></a>-——————– 作者：cmzsteven 来源：CSDN 原文：<a href="https://blog.csdn.net/cmzsteven/article/details/64906245?utm%5C_source=copy">https://blog.csdn.net/cmzsteven/article/details/64906245?utm\_source=copy</a> 版权声明：本文为博主原创文章，转载请附上博文链接！</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python ORM数据库操作框架大全</title>
    <url>/posts/c2ed5e85.html</url>
    <content><![CDATA[<p><img src="https://post.332b.com/wp-content/uploads/2019/10/ORM_Perf-1024x451.png"></p>
<p>python ORM框架对比图，来自 Tortoise ORM 官网，仅供参考</p>
<p>1.django 内置OREM框架</p>
<p>django自带框架，不能与其他程序配合，django独有的</p>
<p>2. peewee</p>
<p>链接： <a href="https://pypi.org/project/peewee/">https://pypi.org/project/peewee/</a></p>
<p>文档： <a href="http://docs.peewee-orm.com/en/latest/">http://docs.peewee-orm.com/en/latest/</a></p>
<p>安装方式</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> peewee</span><br></pre></td></tr></table></figure>

<p>3.storm</p>
<p>链接： <a href="https://pypi.org/project/storm/">https://pypi.org/project/storm/</a></p>
<p>安装方式：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> storm</span><br></pre></td></tr></table></figure>

<p>4.SQLAlchemy</p>
<p>链接： <a href="https://pypi.org/project/SQLAlchemy/">https://pypi.org/project/SQLAlchemy/</a></p>
<p>文档： <a href="https://docs.sqlalchemy.org/en/13/">https://docs.sqlalchemy.org/en/13/</a></p>
<p>安装方式</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> SQLAlchemy</span><br></pre></td></tr></table></figure>

<p>5.sqlobject</p>
<p>链接： <a href="https://pypi.org/project/SQLObject/">https://pypi.org/project/SQLObject/</a></p>
<p>文档： <a href="http://www.sqlobject.org/#documentation">http://www.sqlobject.org/#documentation</a></p>
<p>安装方式</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> SQLObject</span><br></pre></td></tr></table></figure>

<p>6.pony</p>
<p>链接：<a href="https://pypi.org/project/pony/">https://pypi.org/project/pony/</a></p>
<p>文档： <a href="https://docs.ponyorm.org/">https://docs.ponyorm.org/</a></p>
<p>安装方式</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pony</span><br></pre></td></tr></table></figure>

<p>7.Tortoise</p>
<p>使用了新特性 asyncio 的构造的orm框架，需要较新的python 3.6+,，只支持SQLite和MySQL，将来有可能会有变动，建议先观察</p>
<p>链接： <a href="https://pypi.org/project/tortoise-orm/">https://pypi.org/project/tortoise-orm/</a></p>
<p>文档：<a href="https://tortoise-orm.readthedocs.io/en/latest/">https://tortoise-orm.readthedocs.io/en/latest/</a></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> tortoise-orm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>python yield理解</title>
    <url>/posts/4635b714.html</url>
    <content><![CDATA[<p>先看实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;starting...&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        res = <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;res:&quot;</span>,res)</span><br><span class="line"><span class="comment"># 迭代器</span></span><br><span class="line">g = foo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行第一次，yield相当于return，所以就返回 4</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次执行，就从res = 的开始执行，yield已经将前面的值return出去了，所以就成了None</span></span><br><span class="line"><span class="comment"># yield 前面加‘=’，相当于可以产出该值，还可以接受过调试者传过来的值比如下面</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向生成器传值</span></span><br><span class="line">g.send(<span class="string">&#x27;11111111111&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>再看打印结果</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 最终答应结果为</span></span><br><span class="line"><span class="meta"># starting...</span></span><br><span class="line"><span class="meta"># 4</span></span><br><span class="line"><span class="meta"># res: None</span></span><br><span class="line"><span class="meta"># 4</span></span><br><span class="line"><span class="meta"># res: 11111111111</span></span><br></pre></td></tr></table></figure>

<p>函数内如果有yield，就代表这个函数是迭代器</p>
<p>注意：迭代器如果没有可以迭代的对象，执行next()就会报错</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>OperationalError at /onetoone和no such table: auth_use</title>
    <url>/posts/98f95c5b.html</url>
    <content><![CDATA[<p>CommandError: Can’t find xgettext. Make sure you have GNU gettext tools 0.15 or newer installed. 下载： <a href="http://gnuwin32.sourceforge.net/packages/gettext.htm">http://gnuwin32.sourceforge.net/packages/gettext.htm</a> 配置环境变量 C:\Program Files (x86)\GnuWin32\bin 输出以下结果，就ok了，记得重启命令行 C:\Users\admin&gt;xgettext xgettext: no input file given Try `(null) –help’ for more information. django会爆出这样的错误，我检查了代码并没有发现什么问题，最后发现是因为没有进行数据库映射导致的，makemigrations和migrate操作一下 Not Found: / [02/Jan/2019 11:35:42] “GET / HTTP/1.1” 404 2032 Internal Server Error: /onetoone Traceback (most recent call last): sqlite3.OperationalError: no such table: auth_user The above exception was the direct cause of the following exception: django.db.utils.OperationalError: no such table: auth_user  </p>
<p>Request Method:</p>
<p>GET</p>
<p>Request URL:</p>
<p><a href="http://127.0.0.1:8000/onetoone">http://127.0.0.1:8000/onetoone</a></p>
<p>Django Version:</p>
<p>2.1.4</p>
<p>Exception Type:</p>
<p>OperationalError</p>
<p>Exception Value:</p>
<p>no such table: auth_user</p>
<p>Exception Location:</p>
<p>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\sqlite3\base.py in execute, line 296</p>
<p>Python Executable:</p>
<p>C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe</p>
<p>Python Version:</p>
<p>3.7.1</p>
<p>Python Path:</p>
<p>[‘C:\\Users\\Administrator\\PycharmProjects\\untitled1’,<br> ‘C:\\Users\\Administrator\\PycharmProjects\\untitled1’,<br> ‘C:\\Users\\Administrator\\PycharmProjects\\untitled\\venv\\Scripts\\python37.zip’,<br> ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python37\\DLLs’,<br> ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python37\\lib’,<br> ‘C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python37’,<br> ‘C:\\Users\\Administrator\\PycharmProjects\\untitled\\venv’,<br> ‘C:\\Users\\Administrator\\PycharmProjects\\untitled\\venv\\lib\\site-packages’,<br> ‘C:\\Users\\Administrator\\PycharmProjects\\untitled\\venv\\lib\\site-packages\\setuptools-39.1.0-py3.7.egg’,<br> ‘C:\\Program Files\\JetBrains\\PyCharm ‘<br> ‘2018.1.4\\helpers\\pycharm_matplotlib_backend’]</p>
<p>Server time:</p>
<p>Wed, 2 Jan 2019 03:35:56 +0000</p>
<h2 id="Traceback-Switch-to-copy-and-paste-view"><a href="#Traceback-Switch-to-copy-and-paste-view" class="headerlink" title="Traceback Switch to copy-and-paste view"></a>Traceback <a href="http://127.0.0.1:8000/onetoone#">Switch to copy-and-paste view</a></h2><ul>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>_execute</code><ol start="85">
<li><pre><code>             return self.cursor.execute(sql, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\sqlite3\base.py</code> in <code>execute</code><ol start="296">
<li><pre><code>     return Database.Cursor.execute(self, query, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><h3 id="The-above-exception-no-such-table-auth-user-was-the-direct-cause-of-the-following-exception"><a href="#The-above-exception-no-such-table-auth-user-was-the-direct-cause-of-the-following-exception" class="headerlink" title="The above exception (no such table: auth_user) was the direct cause of the following exception:"></a>The above exception (no such table: auth_user) was the direct cause of the following exception:</h3></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\core\handlers\exception.py</code> in <code>inner</code><ol start="34">
<li><pre><code>         response = get\_response(request)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\core\handlers\base.py</code> in <code>_get_response</code><ol start="126">
<li><pre><code>             response = self.process\_exception\_by\_middleware(e, request)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\core\handlers\base.py</code> in <code>_get_response</code><ol start="124">
<li><pre><code>             response = wrapped\_callback(request, \*callback\_args, \*\*callback\_kwargs)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled1\front\views.py</code> in <code>one_view</code><ol start="8">
<li><pre><code> user = User.objects.create(username=&#39;zhiliao1&#39;,email=&#39;2115445@qq.com&#39;)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▼ Local vars</a>  Variable  Value  request  &lt;WSGIRequest: GET ‘/onetoone’&gt;</li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\manager.py</code> in <code>manager_method</code><ol start="82">
<li><pre><code>             return getattr(self.get\_queryset(), name)(\*args, \*\*kwargs)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\query.py</code> in <code>create</code><ol start="413">
<li><pre><code>     obj.save(force\_insert=True, using=self.db)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\contrib\auth\base_user.py</code> in <code>save</code><ol start="73">
<li><pre><code>     super().save(\*args, \*\*kwargs)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\base.py</code> in <code>save</code><ol start="718">
<li><pre><code>                    force\_update=force\_update, update\_fields=update\_fields)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\base.py</code> in <code>save_base</code><ol start="748">
<li><pre><code>         updated = self.\_save\_table(raw, cls, force\_insert, force\_update, using, update\_fields)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\base.py</code> in <code>_save_table</code><ol start="831">
<li><pre><code>         result = self.\_do\_insert(cls.\_base\_manager, using, fields, update\_pk, raw)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\base.py</code> in <code>_do_insert</code><ol start="869">
<li><pre><code>                            using=using, raw=raw)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\manager.py</code> in <code>manager_method</code><ol start="82">
<li><pre><code>             return getattr(self.get\_queryset(), name)(\*args, \*\*kwargs)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\query.py</code> in <code>_insert</code><ol start="1136">
<li><pre><code>     return query.get\_compiler(using=using).execute\_sql(return\_id)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\models\sql\compiler.py</code> in <code>execute_sql</code><ol start="1289">
<li><pre><code>             cursor.execute(sql, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>execute</code><ol start="100">
<li><pre><code>         return super().execute(sql, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>execute</code><ol start="68">
<li><pre><code>     return self.\_execute\_with\_wrappers(sql, params, many=False, executor=self.\_execute)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>_execute_with_wrappers</code><ol start="77">
<li><pre><code>     return executor(sql, params, many, context)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>_execute</code><ol start="85">
<li><pre><code>             return self.cursor.execute(sql, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\utils.py</code> in <code>__exit__</code><ol start="89">
<li><pre><code>             raise dj\_exc\_value.with\_traceback(traceback) from exc\_value
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\utils.py</code> in <code>_execute</code><ol start="85">
<li><pre><code>             return self.cursor.execute(sql, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
<li><code>C:\Users\Administrator\PycharmProjects\untitled\venv\lib\site-packages\django\db\backends\sqlite3\base.py</code> in <code>execute</code><ol start="296">
<li><pre><code>     return Database.Cursor.execute(self, query, params)
</code></pre>
</li>
</ol>
<pre><code>  ...
</code></pre>
  <a href="http://127.0.0.1:8000/onetoone#">▶ Local vars</a></li>
</ul>
]]></content>
      <categories>
        <category>技术分享</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python @property  动态属性和setter重新赋值</title>
    <url>/posts/1e12185b.html</url>
    <content><![CDATA[<p>直接上代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._value_b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value_a</span>(<span class="params">self</span>):</span></span><br><span class="line">        a = <span class="number">128</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加了@property就可以将这个函数的返回值，当成属性来使用</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value_b</span>(<span class="params">self</span>):</span></span><br><span class="line">        b = <span class="number">256</span></span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="meta">    @value_b.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value_b</span>(<span class="params">self,value</span>):</span></span><br><span class="line">        self._value_b = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    abc = Abc()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;abc.value_a:&#x27;</span>,abc.value_a())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;abc.value_b:&#x27;</span>,abc.value_b)</span><br><span class="line">    <span class="comment"># 重新赋值</span></span><br><span class="line">    abc.value_b = <span class="number">30</span></span><br><span class="line">    <span class="comment"># 重新赋值后，但是也不起作用，打印的还是原值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;重新赋值abc.value_b:&#x27;</span>, abc.value_b)</span><br><span class="line">    <span class="comment"># 然后使用setter，打印的值就是我们想要的了</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;abc._value_b:&#x27;</span>, abc._value_b)</span><br></pre></td></tr></table></figure>

<p>这里是打印结果</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># abc.value_a: 128</span></span><br><span class="line"><span class="meta"># abc.value_b: 256</span></span><br><span class="line"><span class="meta"># 重新赋值的abc.value_b: 256</span></span><br><span class="line"><span class="meta"># abc._value_b: 30</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>python 文件操作高级模块</title>
    <url>/posts/c5346ab1.html</url>
    <content><![CDATA[<p>警告：即使是更高级别的文件复制功能（<a href="https://docs.python.org/zh-cn/3.7/library/shutil.html#shutil.copy"><code>shutil.copy()</code></a>， <a href="https://docs.python.org/zh-cn/3.7/library/shutil.html#shutil.copy2"><code>shutil.copy2()</code></a>）也无法复制所有文件元数据。</p>
<p>在POSIX平台上，这意味着文件所有者和组以及ACL都会丢失。在Mac OS上，不使用资源分支和其他元数据。这意味着资源将丢失，文件类型和创建者代码将不正确。在Windows上，不会复制文件所有者，ACL和备用数据流。</p>
<p>linux shell查看文件的元数据 metadata</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line">stat test1.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 文件：test1.txt</span></span><br><span class="line"><span class="meta"># 大小：13        块：8          IO 块：4096   普通文件</span></span><br><span class="line"><span class="meta"># 设备：802h/2050dInode：2234255     硬链接：1</span></span><br><span class="line"><span class="meta"># 权限：(0664/-rw-rw-r--)  Uid：( 1000/    witt)   Gid：( 1000/    witt)</span></span><br><span class="line"><span class="meta"># 最近访问：2019-09-10 17:28:03.153571882 +0800</span></span><br><span class="line"><span class="meta"># 最近更改：2019-09-10 17:27:46.825308133 +0800</span></span><br><span class="line"><span class="meta"># 最近改动：2019-09-10 17:27:46.825308133 +0800</span></span><br><span class="line"><span class="meta"># 创建时间：-</span></span><br></pre></td></tr></table></figure>

<p>**copyfileobj(fsrc, fdst, length=16*1024)**： 将fsrc文件内容复制至fdst文件，length为fsrc每次读取的长度，用做缓冲区大小</p>
<ul>
<li>  fsrc： 源文件</li>
<li>  fdst： 复制至fdst文件</li>
<li>  length： 缓冲区大小，即fsrc每次读取的长度</li>
</ul>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> shutil </span><br><span class="line"><span class="attr">f1</span> = open(<span class="string">&quot;file.txt&quot;</span>,<span class="string">&quot;r&quot;</span>) </span><br><span class="line"><span class="attr">f2</span> = open(<span class="string">&quot;file_copy.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>) </span><br><span class="line">shutil.copyfileobj(f1,f2,<span class="attr">length=1024)</span></span><br></pre></td></tr></table></figure>

<p><em>follow_symlinks = True</em></p>
<p>这个参数的作用是，当为false时，你想复制的文件为软链接那就复制这个软链接到目标目录，如果是True，就直接复制这个文件，默认是Ture，下面的函数中，大部分都有这个</p>
<p><strong>copyfile(src, dst)</strong></p>
<p>复制文件到目标目录，如果文件已存在会被覆盖</p>
<p>src和dst相同会引发错误SameFileError，如果src或dst路径错误引发FileNotFoundError</p>
<p><strong>copymode(src, dst)</strong></p>
<p>复制文件权限，不会修改文件</p>
<p><strong>copystat(src, dst)</strong></p>
<p>复制元数据 metadata，不会修改文件</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>python  列表解析式、三元表达式和lambda</title>
    <url>/posts/f87a8e5c.html</url>
    <content><![CDATA[<p><strong>列表解析 List Comprehensions</strong>表达式：[expression for iter_val in iterable if cond_expr]</p>
<ul>
<li>  **[expression]**：最后执行的结果</li>
<li>  **[for iter_val in iterable]**：这个可以是一个多层循环</li>
<li>  **[if cond_expr]**：两个for间是不能有判断语句的，判断语句只能在最后；顺序不定，默认是左到右。</li>
</ul>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;332b.com&#x27;</span></span><br><span class="line"></span><br><span class="line">s = [s.upper() <span class="keyword">for</span> s in <span class="built_in">str</span> <span class="keyword">if</span> s.isdigit() or s.isalpha()]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#  输出结果  [<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;M&#x27;</span>]</span><br><span class="line"></span><br><span class="line"># s.upper() : 单词首字母大写     s.isdigit()：判断是否是数字     s.isalpha()：判断是否字母</span><br><span class="line"></span><br><span class="line"># 执行最后的结果首字母大写，<span class="keyword">for</span>...in循环<span class="built_in">str</span>字符串，<span class="keyword">if</span>如果满足条件才会得到结果</span><br></pre></td></tr></table></figure>

<p><strong>三元表达式</strong> a if b else c</p>
<ul>
<li>  a : 真值</li>
<li>  b : 判断条件，true时执行真值，false时执行假值</li>
<li>  c : 假值</li>
</ul>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">def <span class="function"><span class="keyword">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"></span><br><span class="line">print(<span class="function"><span class="keyword">func</span><span class="params">(<span class="number">1</span>,<span class="number">3</span>)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  输出3</span></span><br></pre></td></tr></table></figure>

<p><strong>匿名函数</strong> lambda x,y :x*3</p>
<p>前面为参数，后面是返回结果，以分号隔开，可以和三元表达式配合使用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line"><span class="attribute">print</span>((lambda x,y: x*y)(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="attribute">func</span> = lambda x,y: x*y</span><br><span class="line"><span class="attribute">print</span>(func(<span class="number">2</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python 类对象私有属性</title>
    <url>/posts/4eac8846.html</url>
    <content><![CDATA[<p>__<strong>doc__</strong> 打印类描述信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Abc</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;你好,我好,大家好!&#x27;</span></span><br><span class="line">    a = <span class="number">111</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Abc.__doc__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印&#x27;你好,我好,大家好!&#x27;</span></span><br></pre></td></tr></table></figure>

<p>__<strong>module__</strong> ,__name__, __del__</p>
<p>__<strong>module__</strong> 打印类所在的模块</p>
<p>__class__ 打印类型,如果是class().__class__ 则会打印模块+类名</p>
<p>__del__ 在执行class()完毕后,执行这个</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu18.04  python3 和3.7 虚拟环境</title>
    <url>/posts/1a63df8e.html</url>
    <content><![CDATA[<p>为什么需要虚拟环境？因为ubuntu很多模块已经依赖了系统自带python，如果我们也使用自带环境，可能会导致系统混乱，使用虚拟环境是最保险的</p>
<p>安装虚拟环境</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">apt-<span class="built_in">get</span> install <span class="keyword">python3</span>-venv <span class="keyword">python3</span>-dev <span class="keyword">python3</span>-pip</span><br></pre></td></tr></table></figure>

<p>创建虚拟环境</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">python3 -m venv <span class="keyword">new</span><span class="type">Name</span></span><br></pre></td></tr></table></figure>

<p>newName:虚拟环境名称</p>
<p>进入虚拟环境目录激活</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">source bin/<span class="built_in">activate</span> </span><br></pre></td></tr></table></figure>

<p>退出虚拟环境</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure>

<p>Python3.7环境如下</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> apt install python<span class="number">3</span>.<span class="number">7</span> python<span class="number">3</span>.<span class="number">7</span>-dev python<span class="number">3</span>.<span class="number">7</span> </span><br><span class="line"><span class="attribute">python3</span>.<span class="number">7</span>  -m venv newName   #创建python<span class="number">3</span>.<span class="number">7</span>环境</span><br></pre></td></tr></table></figure>

<p><a href="https://www.jianshu.com/p/936dce766c66">https://www.jianshu.com/p/936dce766c66</a></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python 读取一个文件下面的所有文件和目录</title>
    <url>/posts/ec26267d.html</url>
    <content><![CDATA[<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"># 获取当前执行文件路径</span><br><span class="line">filepath = <span class="built_in">os</span>.getcwd()</span><br><span class="line"></span><br><span class="line"># 文件循环</span><br><span class="line">def fileloop(filepath):</span><br><span class="line">    fileList = <span class="built_in">os</span>.listdir(filepath)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fileList:</span><br><span class="line">        # 如果是目录，就调用自身，继续执行</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">path</span>.isdir(filepath + <span class="string">&#x27;/&#x27;</span> + i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;目录:&#x27;</span>, filepath+ <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">            fileloop(filepath + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">        elif <span class="built_in">os</span>.<span class="built_in">path</span>.isfile(filepath + <span class="string">&#x27;/&#x27;</span> + i):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;文件:&#x27;</span>, filepath + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;无法识别文件:&#x27;</span>, filepath + <span class="string">&#x27;/&#x27;</span> + i)</span><br><span class="line"></span><br><span class="line">fileloop(filepath)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3登录12306购票网站教程</title>
    <url>/posts/8e46587d.html</url>
    <content><![CDATA[<p>import re,requests,base64<br>def aui(indexs):<br>    amap = {<br>        ‘1’: ‘34,40’,<br>        ‘2’: ‘111,43’,<br>        ‘3’: ‘180,40’,<br>        ‘4’: ‘254,40’,<br>        ‘5’: ‘34,120’,<br>        ‘6’: ‘111,120’,<br>        ‘7’: ‘180,120’,<br>        ‘8’: ‘254,120’,<br>    }</p>
<pre><code>temp =\[\]
for item in indexs:
    temp.append(amap\[item\])
return &#39;,&#39;.join(temp)
</code></pre>
<p>session = requests.Session()<br>session.headers[‘User-Agent’] = ‘Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36’<br>session_url = ‘<a href="https://kyfw.12306.cn/otn/login/conf&#39;">https://kyfw.12306.cn/otn/login/conf&#39;</a><br>session.post(session_url)<br>captcha_url = ‘<a href="https://kyfw.12306.cn/passport/captcha/captcha-image64?login%5C_site=E&amp;module=login&amp;rand=sjrand&amp;1542247405099&amp;callback=jQuery19105989645797476608%5C_1542247401866&amp;%5C_=1542247401867&#39;">https://kyfw.12306.cn/passport/captcha/captcha-image64?login\_site=E&amp;module=login&amp;rand=sjrand&amp;1542247405099&amp;callback=jQuery19105989645797476608\_1542247401866&amp;\_=1542247401867&#39;</a><br>captcha_base64 = session.get(captcha_url)<br>captcha_encode = re.findall(r’”image”:”(.*?)”‘, captcha_base64.text)[0]<br>captcha_img = base64.b64decode(captcha_encode)<br>with open(‘captcha.png’, ‘wb’) as f:<br>    f.write(captcha_img)<br>check_url = ‘<a href="https://kyfw.12306.cn/passport/captcha/captcha-check?callback=jQuery1910937049112524313%5C_1542250866358&amp;rand=sjrand&amp;login%5C_site=E&amp;%5C_=1542250866360&#39;">https://kyfw.12306.cn/passport/captcha/captcha-check?callback=jQuery1910937049112524313\_1542250866358&amp;rand=sjrand&amp;login\_site=E&amp;\_=1542250866360&#39;</a></p>
<p>check_response = session.get(check_url,params={‘answer’:aui(input(‘请输入坐标图片序号：’))})    ###传入图片坐标<br>check_code = re.findall(r’”result_code”:”(\d)”‘,check_response.text)[0]<br>if check_code == ‘4’:<br>    print(‘1.验证码效验成功’)<br>    login_url = ‘<a href="https://kyfw.12306.cn/passport/web/login&#39;">https://kyfw.12306.cn/passport/web/login&#39;</a><br>    data_user = {<br>        ‘username’:input(‘请输入你的用户名：’),<br>        ‘password’:input(‘请输入你的密码：’),<br>        ‘appid’:’excater’<br>    }<br>    login_sucess = session.post(login_url,data=data_user)</p>
<h1 id="print-login-sucess-text"><a href="#print-login-sucess-text" class="headerlink" title="print(login_sucess.text)"></a>print(login_sucess.text)</h1><pre><code>if login\_sucess.json()\[&#39;result\_code&#39;\] == 0:
    print(&#39;2.用户名和密码校验成功！&#39;)
    tk\_url = &#39;https://kyfw.12306.cn/passport/web/auth/uamtk&#39;
    tk\_url\_post =session.post(tk\_url,data=&#123;&#39;appid&#39;: &#39;excater&#39;&#125;)
    if tk\_url\_post.json()\[&#39;result\_code&#39;\] == 0:
        print(&quot;3.tk效验成功&quot;)
        check\_tk\_url = &#39;https://exservice.12306.cn/excater/uamauthclient&#39;
        check\_tk\_post = session.post(check\_tk\_url,data=&#123;&#39;tk&#39;:tk\_url\_post.json()\[&#39;newapptk&#39;\]&#125;)
        print(check\_tk\_post.text)
</code></pre>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Python3格式化输出文本语法</title>
    <url>/posts/88977851.html</url>
    <content><![CDATA[<h4 id="示例下面代码，跟用户交互然后显示该用户资料"><a href="#示例下面代码，跟用户交互然后显示该用户资料" class="headerlink" title="示例下面代码，跟用户交互然后显示该用户资料"></a>示例下面代码，跟用户交互然后显示该用户资料</h4><p>name = input(“名字：”) age = input(“年龄：”) job = input(“工作：”) home = input(“家乡：”) print(“———关于”,name,”信息——-“) print(“姓名：”,name) print(“年龄：”,age) print(“工作：”,job) print(“家乡：”,home) print(“———–结束—————“)</p>
<h4 id="第二种实现方式"><a href="#第二种实现方式" class="headerlink" title="第二种实现方式"></a>第二种实现方式</h4><p>name = input(“名字：”) age = input(“年龄：”) job = input(“工作：”) home = input(“家乡：”) info = “”” ———关于 %s 个人信息———– 姓名：%s 年龄：%s 工作：%s 家乡：%s ———结束———————- “”” % (name,name,age,job,home) print(info) <strong>%作为连接符，与上面的占位符 %s 关系依次对应，%s = string（字符串），%d = digit（数字），%f = flota（浮点数）</strong> 格式化输出，只允许年龄填入数字修改后的代码 name = input(“名字：”) age = int(input(“年龄：”)) job = input(“工作：”) home = input(“家乡：”) info = “”” ———关于 %s 个人信息———– 姓名：%s 年龄：%d 工作：%s 家乡：%s ———结束———————- “”” % (name,name,age,job,home) print(info)</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3模块：随机取数random模块</title>
    <url>/posts/9b7b87f8.html</url>
    <content><![CDATA[<p>程序中有很多地方需要用到随机字符，比如登录网站的随机验证码，通过random模块可以很容易生成随机字符串</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.randrange(<span class="number">1</span>,<span class="number">10</span>) <span class="comment">#返回1-10之间的一个随机数，不包括10</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment">#返回1-10之间的一个随机数，包括10</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.randrange(<span class="number">0</span>, <span class="number">100</span>, <span class="number">2</span>) <span class="comment">#随机选取0到100间的偶数</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.random()  <span class="comment">#返回一个随机浮点数</span></span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.choice(<span class="string">&#x27;abce3#$@1&#x27;</span>) <span class="comment">#返回一个给定数据集合中的随机字符</span></span></span><br><span class="line">&#x27;#&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.sample(<span class="string">&#x27;abcdefghij&#x27;</span>,<span class="number">3</span>)  <span class="comment">#从多个字符中选取特定数量的字符</span></span></span><br><span class="line">[&#x27;a&#x27;, &#x27;d&#x27;, &#x27;b&#x27;]</span><br><span class="line"></span><br><span class="line">#生成随机字符串</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="keyword">import</span> string </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python"><span class="string">&#x27;&#x27;</span>.join(random.sample(string.ascii_lowercase + string.digits, <span class="number">6</span>)) </span></span><br><span class="line">&#x27;4fvda1&#x27;</span><br><span class="line"></span><br><span class="line">#洗牌</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a</span></span><br><span class="line">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">random.shuffle(a)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="python">a</span></span><br><span class="line">[3, 0, 7, 2, 1, 6, 5, 8, 9, 4]</span><br></pre></td></tr></table></figure>

<p><strong>random.random</strong> random.random()用于生成一个0到1的随机符点数: 0 &lt;= n &lt; 1.0 **random.uniform** random.uniform(a, b)，用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。如果a &gt; b，则生成的随机数n: a &lt;= n &lt;= b。如果 a &lt;b， 则 b &lt;= n &lt;= a</p>
<p>代码如下:</p>
<p>print random.uniform(10, 20) print random.uniform(20, 10) # 18.7356606526 # 12.5798298022</p>
<p>  <strong>random.randint</strong> random.randint(a, b)，用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a &lt;= n &lt;= b</p>
<p>代码如下:</p>
<p>print random.randint(12, 20)  # 生成的随机数 n: 12 &lt;= n &lt;= 20 print random.randint(20, 20)  # 结果永远是20 # print random.randint(20, 10)  # 该语句是错误的。下限必须小于上限</p>
<p>  <strong>random.randrange</strong> random.randrange([start], stop[, step])，从指定范围内，按指定基数递增的集合中 获取一个随机数。如：random.randrange(10, 100, 2)，结果相当于从[10, 12, 14, 16, … 96, 98]序列中获取一个随机数。random.randrange(10, 100, 2)在结果上与 random.choice(range(10, 100, 2) 等效 <strong>random.choice</strong> random.choice从序列中获取一个随机元素。其函数原型为：random.choice(sequence)。参数sequence表示一个有序类型。这里要说明 一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence。有关sequence可以查看python手册数据模型这一章。下面是使用choice的一些例子：</p>
<p>代码如下:</p>
<p>print random.choice(“学习Python”) print random.choice([“JGood”, “is”, “a”, “handsome”, “boy”]) print random.choice((“Tuple”, “List”, “Dict”))</p>
<p>  <strong>random.shuffle</strong> random.shuffle(x[, random])，用于将一个列表中的元素打乱。如:</p>
<p>代码如下:</p>
<p>p = [“Python”, “is”, “powerful”, “simple”, “and so on…”] random.shuffle(p) print p # [‘powerful’, ‘simple’, ‘is’, ‘Python’, ‘and so on…’]</p>
<p>  <strong>random.sample</strong> random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列</p>
<p>代码如下:</p>
<p>list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] slice = random.sample(list, 5)  # 从list中随机获取5个元素，作为一个片断返回 print slice print list  # 原有序列并没有改变</p>
<p>  随机整数：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; random.randint(0,99) # 21</p>
<p>  随机选取0到100间的偶数：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; random.randrange(0, 101, 2) # 42</p>
<p>  随机浮点数：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; random.random() 0.85415370477785668 &gt;&gt;&gt; random.uniform(1, 10) # 5.4221167969800881</p>
<p>  随机字符：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; random.choice(‘abcdefg&amp;#%^*f’) # ‘d’</p>
<p>  多个字符中选取特定数量的字符：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random random.sample(‘abcdefghij’, 3) # [‘a’, ‘d’, ‘b’]</p>
<p>  多个字符中选取特定数量的字符组成新字符串：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; import string &gt;&gt;&gt; string.join( random.sample([‘a’,’b’,’c’,’d’,’e’,’f’,’g’,’h’,’i’,’j’], 3) ).replace(“ “,””) # ‘fih’</p>
<p>  随机选取字符串：</p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; random.choice ( [‘apple’, ‘pear’, ‘peach’, ‘orange’, ‘lemon’] ) # ‘lemon’</p>
<p>  洗牌：  </p>
<p>代码如下:</p>
<p>&gt;&gt;&gt; import random &gt;&gt;&gt; items = [1, 2, 3, 4, 5, 6] &gt;&gt;&gt; random.shuffle(items) &gt;&gt;&gt; items # [3, 2, 5, 6, 4, 1]</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3:返回一个中文时间值</title>
    <url>/posts/6a98a665.html</url>
    <content><![CDATA[<p>使用time.strftime直接添加中文会报错，会显示下面的错误</p>
<p>UnicodeEncodeError: ‘locale’ codec can’t encode character ‘\u7684’ in position 4: Illegal byte sequence</p>
<p>可以直接修改成下面代码，返回中文格式化时间</p>
<p>time.strftime(‘%Y{y}%m{m}%d{d} %H{h}%M{f}%S{s}’).format(y=’年’,m=’月’,d=’日’,h=’时’,f=’分’,s=’秒’)</p>
<p>time模块的其他用法</p>
<p>import time<br>print(“time.time时间戳:”,time.time())<br>print(“time.localtime本地时间struct_time:”,time.localtime())<br>print(“time.gmtime标准UTC +0时间:”,time.gmtime())<br>print(“将struct_time转换成时间戳：”,time.mktime(time.localtime()))<br>print(time.strftime(“%Mds的”),time.localtime())</p>
<p>将某些中文显示时间转换成struct_time的方法</p>
<p>a,b = ‘2017年7月23日9时1分1秒’,”年月日时分秒”<br>for i in b:a = a.replace(i,” “,1)<br>print(time.strptime(a,”%Y %m %d %H %M %S “))</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3科学计数法，浮点数高精度取法和列表</title>
    <url>/posts/c835ef79.html</url>
    <content><![CDATA[<p>1.科学计数法1300 = 1.3 x 10^3 = 1.3e3 或者 1.3E3 2.浮点数只能存17位，也就是小数点后16位数，越到后面越不准确，并且在输出的时候的默认会四舍五 3.浮点数高精度取法，使用模块Decimal中的getcontext()来取值</p>
<p>getcontext()=Context(prec=6, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[Inexact, Rounded], traps=[InvalidOperation, DivisionByZero, Overflow])</p>
<p>from decimal import *     ##导入decimal模块## getcontext().prec = 50    ##getcontext设置精度位数## print(Decimal(2) / Decimal(3)) ##打印2除以3的得数## 得到输出结果：0.66666666666666666666666666666666666666666666666667</p>
<p>n = [1,2,3,4,5,6,7,8,6,4,2,3,4,7,8,3,5,4,4,2,4,3,5,7,7,7,5,[1,2,3]]<br>print(n[1]) ##输出数据列表n第二位数据<br>print(n[-1][1]) ##输出数据列表n子列表中第二位数据<br>print(n.index(4)) ##输出查询数字4的首个索引值位置<br>print(n[n.index(4)]) ##输出查询数字4的首个索引值位置的数字<br>s = n.index(4) ##将变量s设置为列表n查询数字4的首个索引值位置值<br>print(n[s])  ##输出它<br>print(n[0:3])  ##输出结果为：[1, 2, 3]，输出列表n索引值0—3之间的值，不包含索引值3的值，注意这个是顾头不顾尾<br>print(n[:3])   ##输出结果为：[1, 2, 3]，输出列表n索引值0—3之间的值，不包含索引值3的值，注意这个是顾头不顾尾<br>print(n[-5:-1])   ##输出结果为：[7, 7, 7, 5]，输出列表n索引值-5—-1之间的值，不包含索引值-1的值，注意这个是顾头不顾尾<br>print(n[-5:])   ##输出结果为：[7, 7, 7, 5, [1, 2, 3]]，输出列表n索引值-5—-1之间的所有的值<br>print(n[::3])   ##输出结果为：[1, 4, 7, 4, 4, 3, 4, 3, 7, [1, 2, 3]]，输出列表n所有索引值隔二取一<br>n2 = [‘good’,’lin’,’join’,’oppo’] </p>
<p>n2 = [‘good’,’lin’,’join’,’oppo’]<br>print(n2)<br>del n2[2] ##删除列表n2当中的第三个索引<br>print(n2)<br>n2[2] = 122  ##修改列表n2当中的第三个索引值为112<br>print(n2)<br>print(len(n2))  ##输出列表n2的长度<br>print(n2 + [“ff”,”rtttt”])   ##让两个列表数据相加<br>print(n2 * 4)  ##让n2的列表数据重复4遍<br>print(“good” in n2)   ##判断字符串good是否在列表n2里面<br>for good in n2:       ##如果good字符串在列表n2中，则返回列表n2中的每个值，如果不存在则会报错<br>    print(“单词：”,good)<br>n3 = [1,2,3,4,5,6,7,8]<br>print(max(n3))    ##输出列表n3最大值，如果列表中有字符串则会报错<br>print(min(n3))    ##输出列表n3最小值，如果列表中有字符串则会报错<br>n3.append(“good”)   ##向列表里n3添加一个任意元素，可以是元祖，添加两个则会报错<br>n3.append([“lo”,”pow”])  ##向列表n3添加两个字符串<br>n3.extend([“liyq”,”opqw”])  ##entend只能添加列表元素，向列表n3添加两个字符串，注意append和extend的区别<br>print(n3)</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3：函数递归的基本理解</title>
    <url>/posts/dcbddbc8.html</url>
    <content><![CDATA[<p>我刚开始接触递归的时候，就被它难到了，如果一个函数在函数中调用自己，这个就叫做递归，在使用递归时候必须得有一个明确的结束条件，否则它会无限递归下去，sys.setrecursionlimit语法可以修改最大次数；</p>
<p>def fun(n):<br>    if n == 1:<br>        return 1<br>    return n + fun(n-1)<br>print(fun(5))<br>import sys    ## 修改递归最大次数<br>sys.setrecursionlimit(1500) ## 修改递归最大次数</p>
<p>上面这个函数解决的是什么问题呢？ 它计算的是这个数列：1+2+3+4…….+n-1+n，它的计算公式（n+1）*n/2，而上面我们用递归的方式把它算出来了，下面我们用程序的语言算出结果 fun(5) 5 + fun(4) 5 + (4 + fun(3)) 5 + (4 +(3 + fun(2))) 5 + (4 + (3 + (2 + fun(1)))) 5 + (4 + (3 + (2 + 1))) 5 + (4 + (3 + 3)) 5 + (4 + 6) 5 + 10 15</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3：正则规则模块re</title>
    <url>/posts/5f414185.html</url>
    <content><![CDATA[<h2 id="本节重点："><a href="#本节重点：" class="headerlink" title="本节重点："></a>本节重点：</h2><ul>
<li>  使学员掌握re模块的使用</li>
</ul>
<blockquote>
<p><strong>本节时长需控制在50分钟内</strong></p>
</blockquote>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>请从以下文件里取出所有的手机号</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">姓名        地区    身高    体重    电话</span><br><span class="line">况咏蜜     北京   <span class="number"> 171 </span>  <span class="number"> 48 </span>   13651054608</span><br><span class="line">王心颜     上海   <span class="number"> 169 </span>  <span class="number"> 46 </span>   13813234424</span><br><span class="line">马纤羽     深圳   <span class="number"> 173 </span>  <span class="number"> 50 </span>   13744234523</span><br><span class="line">乔亦菲     广州   <span class="number"> 172 </span>  <span class="number"> 52 </span>   15823423525</span><br><span class="line">罗梦竹     北京   <span class="number"> 175 </span>  <span class="number"> 49 </span>   18623423421</span><br><span class="line">刘诺涵     北京   <span class="number"> 170 </span>  <span class="number"> 48 </span>   18623423765</span><br><span class="line">岳妮妮     深圳   <span class="number"> 177 </span>  <span class="number"> 54 </span>   18835324553</span><br><span class="line">贺婉萱     深圳   <span class="number"> 174 </span>  <span class="number"> 52 </span>   18933434452</span><br><span class="line">叶梓萱    上海   <span class="number"> 171 </span>  <span class="number"> 49 </span>   18042432324</span><br><span class="line">杜姗姗   北京   <span class="number"> 167 </span>  <span class="number"> 49 </span>      13324523342</span><br></pre></td></tr></table></figure>

<p>你能想到的办法是什么？</p>
<p>必然是下面这种吧？</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;兼职白领学生空姐模特护士联系方式.txt&quot;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&quot;gbk&quot;</span>)</span><br><span class="line"></span><br><span class="line">phones = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">line</span> in f:</span><br><span class="line">    name,city,<span class="built_in">height</span>,weight,phone = <span class="built_in">line</span>.<span class="built_in">split</span>()</span><br><span class="line">    <span class="keyword">if</span> phone.startswith(<span class="string">&#x27;1&#x27;</span>) and len(phone) == <span class="number">11</span>:</span><br><span class="line">        phones.<span class="built_in">append</span>(phone)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(phones)</span><br></pre></td></tr></table></figure>

<p>有没有更简单的方式？</p>
<p>手机号是有规则的，都是数字且是11位，再严格点，就都是1开头，如果能把这样的规则写成代码，直接拿规则代码匹配文件内容不就行了？<img src="https://triaquae.gitbooks.io/python/content/assets/chapter5/re-sample.png"></p>
<p>这么nb的玩法是什么？它的名字叫正则表达式！</p>
<h2 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h2><p>正则表达式就是字符串的匹配规则，在多数编程语言里都有相应的支持，python里对应的模块是re</p>
<h4 id="常用的表达式规则"><a href="#常用的表达式规则" class="headerlink" title="常用的表达式规则"></a>常用的表达式规则</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;.&#x27;</span>     默认匹配除\n之外的任意一个字符，若指定flag DOTALL,则匹配任意字符，包括换行</span><br><span class="line"><span class="string">&#x27;^&#x27;</span>     匹配字符开头，若指定flags MULTILINE,这种也可以匹配上(r<span class="string">&quot;^a&quot;</span>,<span class="string">&quot;\nabc\neee&quot;</span>,flags=re.MULTILINE)</span><br><span class="line"><span class="string">&#x27;$&#x27;</span>     匹配字符结尾， 若指定flags MULTILINE ,re<span class="selector-class">.search</span>(<span class="string">&#x27;foo.$&#x27;</span>,<span class="string">&#x27;foo1\nfoo2\n&#x27;</span>,re.MULTILINE)<span class="selector-class">.group</span>() 会匹配到foo1</span><br><span class="line"><span class="string">&#x27;*&#x27;</span>     匹配*号前的字符<span class="number">0</span>次或多次， re<span class="selector-class">.search</span>(<span class="string">&#x27;a*&#x27;</span>,<span class="string">&#x27;aaaabac&#x27;</span>)  结果<span class="string">&#x27;aaaa&#x27;</span></span><br><span class="line"><span class="string">&#x27;+&#x27;</span>     匹配前一个字符<span class="number">1</span>次或多次，re<span class="selector-class">.findall</span>(<span class="string">&quot;ab+&quot;</span>,<span class="string">&quot;ab+cd+abb+bba&quot;</span>) 结果<span class="selector-attr">[<span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;abb&#x27;</span>]</span></span><br><span class="line"><span class="string">&#x27;?&#x27;</span>     匹配前一个字符<span class="number">1</span>次或<span class="number">0</span>次 ,re<span class="selector-class">.search</span>(<span class="string">&#x27;b?&#x27;</span>,<span class="string">&#x27;alex&#x27;</span>)<span class="selector-class">.group</span>() 匹配<span class="selector-tag">b</span> <span class="number">0</span>次</span><br><span class="line"><span class="string">&#x27;&#123;m&#125;&#x27;</span>   匹配前一个字符m次 ,re<span class="selector-class">.search</span>(<span class="string">&#x27;b&#123;3&#125;&#x27;</span>,<span class="string">&#x27;alexbbbs&#x27;</span>)<span class="selector-class">.group</span>()  匹配到<span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#123;n,m&#125;&#x27;</span> 匹配前一个字符n到m次，re<span class="selector-class">.findall</span>(<span class="string">&quot;ab&#123;1,3&#125;&quot;</span>,<span class="string">&quot;abb abc abbcbbb&quot;</span>) 结果<span class="string">&#x27;abb&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>, <span class="string">&#x27;abb&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;</span>     匹配左或右的字符，re<span class="selector-class">.search</span>(<span class="string">&quot;abcABC&quot;</span>,<span class="string">&quot;ABCBabcCD&quot;</span>)<span class="selector-class">.group</span>() 结果<span class="string">&#x27;ABC&#x27;</span></span><br><span class="line"><span class="string">&#x27;(...)&#x27;</span> 分组匹配， re<span class="selector-class">.search</span>(<span class="string">&quot;(abc)&#123;2&#125;a(12345)&quot;</span>, <span class="string">&quot;abcabca456c&quot;</span>)<span class="selector-class">.group</span>() 结果为<span class="string">&#x27;abcabca45&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\A&#x27;</span>    只从字符开头匹配，re<span class="selector-class">.search</span>(<span class="string">&quot;\Aabc&quot;</span>,<span class="string">&quot;alexabc&quot;</span>) 是匹配不到的，相当于re<span class="selector-class">.match</span>(<span class="string">&#x27;abc&#x27;</span>,<span class="string">&quot;alexabc&quot;</span>) 或^</span><br><span class="line"><span class="string">&#x27;\Z&#x27;</span>    匹配字符结尾，同$ </span><br><span class="line"><span class="string">&#x27;\d&#x27;</span>    匹配数字<span class="number">0</span>-<span class="number">9</span></span><br><span class="line"><span class="string">&#x27;\D&#x27;</span>    匹配非数字</span><br><span class="line"><span class="string">&#x27;\w&#x27;</span>    匹配<span class="selector-attr">[A-Za-z0-9]</span></span><br><span class="line"><span class="string">&#x27;\W&#x27;</span>    匹配非<span class="selector-attr">[A-Za-z0-9]</span></span><br><span class="line"><span class="string">&#x27;s&#x27;</span>     匹配空白字符、\t、\n、\r , re<span class="selector-class">.search</span>(<span class="string">&quot;\s+&quot;</span>,<span class="string">&quot;ab\tc1\n3&quot;</span>)<span class="selector-class">.group</span>() 结果 <span class="string">&#x27;\t&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;(?P&lt;name&gt;...)&#x27;</span> 分组匹配 re<span class="selector-class">.search</span>(<span class="string">&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;)(?P&lt;birthday&gt;[0-9]&#123;4&#125;)&quot;</span>,<span class="string">&quot;371481199306143242&quot;</span>)<span class="selector-class">.groupdict</span>(<span class="string">&quot;city&quot;</span>) 结果&#123;<span class="string">&#x27;province&#x27;</span>: <span class="string">&#x27;3714&#x27;</span>, <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;81&#x27;</span>, <span class="string">&#x27;birthday&#x27;</span>: <span class="string">&#x27;1993&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="re的匹配语法有以下几种"><a href="#re的匹配语法有以下几种" class="headerlink" title="re的匹配语法有以下几种"></a>re的匹配语法有以下几种</h4><ul>
<li>  re.match 从头开始匹配</li>
<li>  re.search 匹配包含</li>
<li>  re.findall 把所有匹配到的字符放到以列表中的元素返回</li>
<li>  re.split 以匹配到的字符当做列表分隔符</li>
<li>  re.sub 匹配字符并替换</li>
<li>  re.fullmatch 全部匹配</li>
</ul>
<p><strong>re.compile(pattern, flags=0)</strong></p>
<p>Compile a regular expression pattern into a regular expression object, which can be used for matching using its match(), search() and other methods, described below.</p>
<p>The sequence</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">prog</span> = re.compile(pattern)</span><br><span class="line"><span class="attr">result</span> = prog.match(string)</span><br></pre></td></tr></table></figure>

<p>is equivalent to</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="literal">result</span> = re.match(pattern, <span class="built_in">string</span>)</span><br></pre></td></tr></table></figure>

<p>but using re.compile() and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.</p>
<p><strong>re.match(pattern, string, flags=0)</strong></p>
<p>从起始位置开始根据模型去字符串中匹配指定内容，匹配单个</p>
<ul>
<li>  pattern 正则表达式</li>
<li>  string 要匹配的字符串</li>
<li>  flags 标志位，用于控制正则表达式的匹配方式</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">obj = re.match(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;123uuasf&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> obj:</span><br><span class="line">    <span class="keyword">print</span> obj.<span class="keyword">group</span>()</span><br></pre></td></tr></table></figure>

<p><strong>Flags标志符</strong></p>
<ul>
<li>  re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li>
<li>  M(MULTILINE): 多行模式，改变’^’和’$’的行为</li>
<li>  S(DOTALL): 改变’.’的行为,make the ‘.’ special character match any character at all, including a newline; without this flag, ‘.’ will match anything except a newline.</li>
<li>  X(re.VERBOSE) 可以给你的表达式写注释，使其更可读，下面这2个意思一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = re.<span class="built_in">compile</span>(<span class="string">r&quot;&quot;&quot;\d + # the integral part</span></span><br><span class="line"><span class="string">                \. # the decimal point</span></span><br><span class="line"><span class="string">                \d * # some fractional digits&quot;&quot;&quot;</span>, </span><br><span class="line">                re.X)</span><br><span class="line"></span><br><span class="line">b = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+\.\d*&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><strong>re.search(pattern, string, flags=0)</strong></p>
<p>根据模型去字符串中匹配指定内容，匹配单个</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">obj = re.search(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;u123uu888asf&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> obj:</span><br><span class="line">    <span class="keyword">print</span> obj.<span class="keyword">group</span>()</span><br></pre></td></tr></table></figure>

<p><strong>re.findall(pattern, string, flags=0)</strong></p>
<p>match and search均用于匹配单值，即：只能匹配字符串中的一个，如果想要匹配到字符串中所有符合条件的元素，则需要使用 findall。</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">obj = re.<span class="keyword">findall</span>(<span class="string">&#x27;\d+&#x27;</span>, <span class="string">&#x27;fa123uu888asf&#x27;</span>)</span><br><span class="line"><span class="keyword">print</span> obj</span><br></pre></td></tr></table></figure>

<p><strong>re.sub(pattern, repl, string, count=0, flags=0)</strong></p>
<p>用于替换匹配的字符串</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;re.<span class="built_in">sub</span>(<span class="string">&#x27;[a-z]+&#x27;</span>,<span class="string">&#x27;sb&#x27;</span>,<span class="string">&#x27;武配齐是abc123&#x27;</span>,)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re.<span class="built_in">sub</span>(<span class="string">&#x27;\d+&#x27;</span>,<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;alex22wupeiqi33oldboy55&#x27;</span>,count=<span class="number">2</span>)</span><br><span class="line"><span class="string">&#x27;alexwupeiqioldboy55&#x27;</span></span><br></pre></td></tr></table></figure>

<p>相比于str.replace功能更加强大</p>
<p><strong>re.split(pattern, string, maxsplit=0, flags=0)</strong></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;s=<span class="string">&#x27;9-2*5/3+7/3*99/4*2998+10*568/14&#x27;</span></span><br><span class="line">&gt;&gt;&gt;re<span class="selector-class">.split</span>(<span class="string">&#x27;[\*\-\/\+]&#x27;</span>,s)</span><br><span class="line"><span class="selector-attr">[<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;99&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2998&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;568&#x27;</span>, <span class="string">&#x27;14&#x27;</span>]</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; re<span class="selector-class">.split</span>(<span class="string">&#x27;[\*\-\/\+]&#x27;</span>,s,<span class="number">3</span>)</span><br><span class="line"><span class="selector-attr">[<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3+7/3*99/4*2998+10*568/14&#x27;</span>]</span></span><br></pre></td></tr></table></figure>

<p><strong>re.fullmatch(pattern, string, flags=0)</strong></p>
<p>整个字符串匹配成功就返回re object, 否则返回None</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">re</span><span class="selector-class">.fullmatch</span>(<span class="string">&#x27;\w+@\w+\.(comcnedu)&#x27;</span>,<span class="string">&quot;alex@oldboyedu.cn&quot;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h4><p>1.验证手机号是否合法</p>
<p>2.验证邮箱是否合法</p>
<p>3.开发一个简单的python计算器，实现加减乘除及拓号优先级解析</p>
<ul>
<li>  用户输入 1 - 2 * ( (60-30 +(-40/5) * (9-2*5/3 + 7 /3*99/4*2998 +10 * 568/14 )) - (-4*3)/ (16-3*2) )等类似公式后，必须自己解析里面的(),+,-,*,/符号和公式(不能调用eval等类似功能偷懒实现)，运算后得出结果，结果必须与真实的计算器所得出的结果一致</li>
</ul>
<blockquote>
<p>hint:</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">re.search(<span class="string">r&#x27;\([^()]+\)&#x27;</span>,s).group()<span class="comment">#可拿到最里层的括号中的值 </span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;(-40/5)&#x27;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<ul>
<li>  re.match 从头开始匹配</li>
<li>  re.search 匹配包含</li>
<li>  re.findall 把所有匹配到的字符放到以列表中的元素返回</li>
</ul>
<p>re.match和re.search返回的是一个对象，并且它只取一个值，re.findall是找到所有符合条件的值以列表的形式返回； re.search(“[0-9]“,str)它是一个对象，re.search(“[0-9]“,str).group可以取到它的值 “.”   匹配任意一个字符           <code>re.search(&quot;.&quot;,&quot;abc&quot;)</code>  结果为a “^”  匹配字符串的开头的一个字符，在多行模式中匹配每一行的开头       <code>re.search(&quot;^a.^&quot;,&quot;abc&quot;)</code> 结果为ab “$”   匹配字符串的结尾的一个字符，在多行模式中匹配每一行的末尾     <code>re.search(&quot;b.$&quot;,&quot;abc&quot;)</code>  结果为bc “*“   匹配*号前的字符0次或多次     <code>re.search(&quot;a*&quot;,&quot;aaaaaababc&quot;)</code> 结果为aaaaa,<code>re.search(&quot;ab*&quot;,&quot;abbabc&quot;)</code> 结果为abb ,<code>re.search(&quot;ab*&quot;,&quot;aabc&quot;)</code> 结果为a “+”   匹配前一个字符一次或者多次  <code>re.findall(&quot;ab+&quot;,&quot;ab1111abb111111abbb&quot;)</code> 结果为[‘ab’, ‘abb’, ‘abbb’] “?”   匹配前一个字符一次或者0次   <code>re.findall(&quot;ab?&quot;,&quot;ab1111abb111111abbb&quot;)</code> 结果为[‘ab’, ‘ab’, ‘ab’] “{m}”  匹配前一个字符m次  <code>re.search(&#39;b&#123;3&#125;&#39;,&#39;alexbbbs&#39;)</code>  结果是bbb “{n,m}”  匹配前一个字符n至m次  <code>re.findall(&quot;ab&#123;1,3&#125;&quot;,&quot;abbb abc abbcbbb&quot;)</code>  结果为[‘abbb’, ‘ab’, ‘abb’] “”   左边或者右边的字符  <code>re.search(&#39;bbsexb&#39;,&#39;alexbbbs&#39;)</code>  结果exb</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python3：基础函数参数的理解</title>
    <url>/posts/ac93e15.html</url>
    <content><![CDATA[<p>Python的函数的意思是通过一个名字将一段代码把它包起来，是程序变得可扩展、易维护、减少代码重复。</p>
<p>def name1():<br>    print(“hello,world”,)<br>name1()<br>print(name1)</p>
<p>这是一个普通的函数，name1()调用函数命令，print(name1)输出函数所在的内存地址</p>
<p>def name1(a,b,c,d=”aaa”):<br>    print(“hello”+a+b+c+d)<br>name1(“a1”,”a2”,”a3”)<br>name1(“b1”,”b2”,”b3”,)<br>name1(“c1”,c=”c3”,b=”c2”,d=”c4”)</p>
<p>形式参数def name1(a,b,c,d=”aaa”)是只有在调用的使用才会存在的参数，实际参数name1(“a1”,”a2”,”a3”)是真实已经存在的参数，位置参数name1(“a1”,”a2”,”a3”)是按顺序排列的参数，关键参数name1(“c1”,c=”c3”,b=”c2”,d=”c4”)是给参数定义值，可以不按顺序但<strong>必须放在位置参数后面</strong>，默认参数def name1(a,b,c,d=”aaa”)是在形式参数基础上，已经给它指定了一个值，它<strong>必须放在位置参数后面</strong>，实际参数没有该值时就使用默认参数，有就使用它定义的值，例如下面这一段代码，实例name1(“c1”,c=”c3”,b=”c2”,d=”c4”)</p>
<p>def name2(a,*b,c):<br>    print(b,c)<br>    for a1 in b:<br>        print(a1)<br>name2(“a1”,”a2”,”a3”,”a4”,c=”a5”)<br>name2(“b1”,*[“b2”,”b3”,”b4”,”b5”],c=”b6”)</p>
<p>非固定参数def name2(a,*b,c)和name2(“a1”,”a2”,”a3”,”a4”,c=”a5”)是可以传不固定个数的参数到函数里去，在参数前面加上*星号代表将位置参数打包成元祖的形式传入函数，非固定参数后面可以接关键参数， name2(“b1”,*[“b2”,”b3”,”b4”,”b5”],c=”b6”)<strong>中在列表加上星号代表以将整个列表的单个元素作为单个参数传入函数，如果不加星号则代表将整个列表打包成元组的形式传入函数</strong></p>
<p>def name3(a,*b,**c):<br>    print(a,b,c)<br>name3(“a1”,”a2”,”a3”,good=”a4”,fool=”a5”)<br>d = {“b2”:”c2”,”b3”:”c3”,”b4”:”b4”}<br>name3(“b1”,”c1”,”d1”,**d)</p>
<p>这个是字典的用法，比较类似列表的用法，原理差不多</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu16.04安装Python解释器PyPy3安装方法</title>
    <url>/posts/16940ee.html</url>
    <content><![CDATA[<p>PYPY宣传比python官方快7倍，是不是真的呢？测试机器为阿里云1核2G内存40G硬盘，测试代码如下</p>
<p>def fib(x):<br>    if x&lt;2:<br>        return x<br>    return fib(x-1)+fib(x-2)</p>
<p>if __name__ == ‘__main__‘:<br>    import time<br>    begin = time.time()<br>    print(fib(40))<br>    end = time.time()<br>    print(end-begin)</p>
<p>测试截图如下，确实有官方所说的七倍的效果‘提升’ <img src="https://post.332b.com/wp-content/uploads/2018/11/20181111163644.png"> 下面来介绍一下安装教程，官方推荐Ubuntu来安装，我使用的是16.04版本，官网下载页面：<a href="http://pypy.org/download.html">http://pypy.org/download.html</a> 由于阿里云的Ubuntu16.04版本自带官方python2和python3，我就直接卸载了，免得和PyPy冲突，推荐保留python2，他不会和我们的pypy3冲突 <code>apt remove python    ###卸载python2</code> <code>apt remove python3   ###卸载python3</code> <code>apt autoremove python   ###卸载python2相关文件</code> <code>apt autoremove python3   ###卸载python3相关文件</code> 1.下载pypy3 6.0安装包，它对应的是python3.5.3版本 <code>wget https://bitbucket.org/pypy/pypy/downloads/pypy3-v6.0.0-linux64.tar.bz2</code> <code>tar xf pypy3-v6.0.0-linux64.tar.bz2  ##解压</code> <code>mv pypy3-v6.0.0-linux64/ /usr/local/pypy3 ##移动到系统目录</code> <code>export PATH=$PATH:/usr/local/pypy3/bin  ##添加系统临时变量，添加永久系统变量，将这行代码复制到/etc/profile文件最后一行，我们就可以来用pypy3来直接执行文件</code> 2.安装对应的pip3，我们就可以用它来安装模块 <code>pypy3 -m ensurepip   ###安装pip3</code> <code>pip3 install -U pip wheel  ###升级到最新</code> 3.假如你要安装一个模块或者执行一个脚本 <code>pypy3  123.py   ###执行python脚本</code> <code>pip3 install xxxx   ###安装一个模块</code> <code>pip install mysql-connector-python     ###安装mysql数据库连接驱动</code></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Python3：返回值、局部变量、作用域、匿名函数</title>
    <url>/posts/aa498e1f.html</url>
    <content><![CDATA[<p>def name1(a,b):<br>    if a &gt; b :<br>        a / b<br>        return True<br>    else:<br>        a * b<br>        return False<br> print(a,b)<br>    print(“abc”)<br>print(name1(32,8))</p>
<p>return可以返回任何值，他可以是一个变量、字符串或者列表等等，当需要返回多个值时，它默认是以元祖的的形式返回，当return没有返回值时，它默认会返回一个None,一个函数只要执行了一次return就代表当前函数终止，不会再执行当前函数的其他命令，例如print(a,b)和print(“abc”) 都不会再执行了。</p>
<p>x1 = ‘你好，孩子！’<br>x2 = [1,2,3,4,5,6]<br>def name1():<br>    global x1<br>    print(x1)<br>    x1 = “你好，世界!”<br>    print(x1)<br>    del x2[2]<br>    print(x2)<br>name1()<br>print(x1,x2)</p>
<p>局部变量是指函数里面的变量，在函数里查找变量是由内向外查找，有局部变量就优先使用，没有就向外查找全局变量，在函数里面无法修改全局变量，但如果全局变量是一个列表，那么在函数里，无法修改全部变量的整个列表，但可以修改列表里面的每一个元素。global x1的用法是将全局变量引入到函数来变为可修改。</p>
<p>n1 = 18<br>def a1():<br>    n1 = 19<br>    print(‘good’)<br>    def a2():<br>        print(n1)<br>    return a2<br>print(a1())<br>a3 = a1()<br>print(a3())<br>print(n1)</p>
<p>作用域是指代码已经生成作用域已经生成，作用域链向上查找，返回值可以是函数例如return a2，函数也是一个作用域，函数里面镶入一个函数饺子镶套函数，无论是函数里面镶入多少个函数，它的执行永远都是由里到外，查找变量也是由里到外；</p>
<p>s = lambda x,y:x*3 if x&gt;y else x/y<br>print(s(6,3))<br>k = (list(range(1,10)))<br>def n(x):<br>    return x ** 3<br>print(list(map(n,k)))<br>print(list(map(lambda x:x**3,k))<br>print(abs(-100))</p>
<p>匿名函数lambda支持简单明了的语句，最大能支持三元运算，它最大的作用是配合其他的语法进行使用，map()函数的基本用法是一个函数接一个列表，它会用函数来遍历列表的每一个元素，abs代表求绝对值，无论正负都会转换成正数</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python爬取百度图片简易教程</title>
    <url>/posts/23c0a8a4.html</url>
    <content><![CDATA[<p>简单的下载</p>
<p>import requests<br>img_url = ‘<a href="https://ss0.bdstatic.com/70cFuHSh/_Q1YnxGkpoWK1HF6hhy/it/u=1054065341,1883567039&amp;fm=26&amp;gp=0.jpg&#39;">https://ss0.bdstatic.com/70cFuHSh\_Q1YnxGkpoWK1HF6hhy/it/u=1054065341,1883567039&amp;fm=26&amp;gp=0.jpg&#39;</a><br>response = requests.get(img_url)<br>print(response.content)        ###以文本的形式打印出get到的文件</p>
<p>模拟用户来下载图片</p>
<p>import requests<br>headers = {<br>    “User-Agent”:”Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36”,<br>    “Referer”:’<a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;</a>,<br>}<br>url = ‘<a href="https://ss0.bdstatic.com/70cFuHSh/_Q1YnxGkpoWK1HF6hhy/it/u=1054065341,1883567039&amp;fm=26&amp;gp=0.jpg&#39;">https://ss0.bdstatic.com/70cFuHSh\_Q1YnxGkpoWK1HF6hhy/it/u=1054065341,1883567039&amp;fm=26&amp;gp=0.jpg&#39;</a><br>response = requests.get(url,headers=headers)<br>print(response.content)<br>response = requests.get(url,headers=headers)<br>with open(‘text.jpg’,’wb’) as f: ###将图片写入文件<br>f.write(response.content)</p>
<p>模拟用户下载一页的图片</p>
<p>import requests,re<br>page_url = ‘<a href="http://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;word=%E7%8C%AB&#39;">http://image.baidu.com/search/index?tn=baiduimage&amp;ps=1&amp;ct=201326592&amp;lm=-1&amp;cl=2&amp;nc=1&amp;ie=utf-8&amp;word=%E7%8C%AB&#39;</a><br>headers = {<br>        “User-Agent”: “Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36”,<br>        “Referer”: ‘<a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;</a>,<br>    }<br>response = requests.get(page_url,headers=headers)<br>response.encoding = ‘utf-8’<br>html = response.text<br>text = re.findall(r’”thumbURL”:”(.*?)”‘,html)</p>
<p>for index,saveimg in enumerate(text):<br>    headers = {<br>        “User-Agent”: “Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36”,<br>        “Referer”: ‘<a href="https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;">https://image.baidu.com/search/index?tn=baiduimage&amp;ipn=r&amp;ct=201326592&amp;cl=2&amp;lm=-1&amp;st=-1&amp;fm=index&amp;fr=&amp;hs=0&amp;xthttps=111111&amp;sf=1&amp;fmq=&amp;pv=&amp;ic=0&amp;nc=1&amp;z=&amp;se=1&amp;showtab=0&amp;fb=0&amp;width=&amp;height=&amp;face=0&amp;istype=2&amp;ie=utf-8&amp;word=%E5%9B%BE%E7%89%87&amp;oq=%E5%9B%BE%E7%89%87&amp;rsp=-1&#39;</a>,<br>    }<br>    response = requests.get(saveimg, headers=headers)<br>    with open(‘%s.%s’% (index,saveimg.split(‘.’)[-1]),’wb’) as f:<br>        f.write(response.content)</p>
<p>    的</p>
]]></content>
      <categories>
        <category>技术分享</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python的基础语法：编码、标识符和注释</title>
    <url>/posts/d1a42a19.html</url>
    <content><![CDATA[<p>编码 默认情况下Python uft-8编码作为默认编码，所有字符串都是 unicode 字符串，也可以为源文件直接指定编码 ，字符串的三种指定方式</p>
<p><code># -*- coding:utf-8 -*-</code></p>
<p><code># coding=utf-8</code></p>
<p><code># -*- coding=utf-8 -*-</code></p>
<p>还有一种方式是正规则表达式：<code>^[ \t\v]``*``#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)</code></p>
<p>标识符</p>
<p>标识符是程序中有程序员自定义的名称或者符号，如变量名或函数名等等</p>
<p>标识符的组成规则：它可以由数字、下划线和字母组成，标识符是区分大小写，标识符必须以下划线或者字母开头，不能以数字开头</p>
<p>123Ae   A(dd    1&amp;ff     1_1123aa    aadf-1212</p>
<p>ad123  _ad123  Ad1233     ad_eaff123</p>
<p>以下单词不能作为变量名：and as assert break class continue def del elif else except exec finally for from global if in import is lambda not or pass print raise return try while with yield</p>
<p>查看当前版本所有的关键字：</p>
<p>import keyword </p>
<p>keyword.kwlist </p>
<p>注释</p>
<p>第一个注释使用</p>
<p>#!/usr/bin/python/</p>
<p>#我是注释</p>
<p>#我可以将字弄消失</p>
<p>#在Coding的时候，我可以作为文字说明</p>
<p>print(“hello,world”)</p>
<p>当一段话文字太多了，可以这样注释</p>
<p>“””</p>
<p>我是第一行</p>
<p>我是第二行</p>
<p>我是第三行</p>
<p>“””</p>
<p>也可以这样注释</p>
<p>‘’’</p>
<p>我是第一行</p>
<p>我是第二行</p>
<p>我是第三行</p>
<p>‘’’</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python语法:行与缩进、多行语句、数字类型和字符串</title>
    <url>/posts/7e1b9af4.html</url>
    <content><![CDATA[<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>代码块的缩进行数不一致会报错 例如下面正确的： if Ture: print(“good”) else: print(“bad”) 错误的格式： if Ture: print(“good”) else: print(“bad”)</p>
<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a><strong>多行语句</strong></h2><p>示例一 good = “good_one” + \ “good_two” + \ “good_three” + \ “good_four” print(good) 输出结果 C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe C:/Users/Administrator/PycharmProjects/untitled/11.py good_onegood_twogood_threegood_four 进程已结束,退出代码0 示例2 good = (“good_one”,”good_two”,”good_three”,”good_four”) print(good) 输出结果 C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe C:/Users/Administrator/PycharmProjects/untitled/11.py (‘good_one’, ‘good_two’, ‘good_three’, ‘good_four’) 进程已结束,退出代码0</p>
<h2 id="数字型："><a href="#数字型：" class="headerlink" title="数字型："></a>数字型：</h2><p>1.int整数，如1 2.bool布尔，如Ture 3.flota浮点数，如1.23、0.12、3E-2 3E-2=3x[10^(-2)]=3x[2/10]=3x0.2=0.6 4.complex复数如 1 + 2j、 1.1 + 2.2j</p>
<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><p>python中单引号和双引号使用完全相同。 使用三引号(‘’’或”””)可以指定一个多行字符串。 转义符 ‘\‘ 反斜杠可以用来转义，使用r可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n会显示，并不是换行。 按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。 字符串可以用 + 运算符连接在一起，用 * 运算符重复。 Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。 Python中的字符串不能改变。 Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。 字符串的截取的语法格式如下：变量[头下标:尾下标] 输出命令</p>
<hr>
<p>str=”good123456”<br>print(str)<br>print(str[0])<br>print(str[1])<br>print(str[-2])<br>print(str[3:])<br>print(str * 2)<br>print(r”hello\naaa”)<br>print(“hello\naaaa”)<br>print(“hello\‘aaaa”)</p>
<p>得到数据：</p>
<hr>
<p>C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe C:/Users/Administrator/PycharmProjects/untitled/venv/Include/demo.py good123456 g o 5 d123456 good123456good123456 hello\naaa hello aaaa hello’aaaa 进程已结束,退出代码</p>
<hr>
<p>  1、python语法中单双引号使用完全相同 2、python字符串截取字首从0开始，字尾从-1开始 3、python字符串\n是换行，\斜杠代表转义，在字符串前面加上“r”,斜杠就可以输出</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python:面向对象的笔记</title>
    <url>/posts/468a0607.html</url>
    <content><![CDATA[<p>class需要通过中间人<code>a = father()</code>来执行类，<code>a.name()</code>可以执行类里面的函数</p>
<p>class father:<br>    def name(self):<br>        print(“goosd”)<br>a = father()<br>a.name()</p>
<p>继承是指<code>class father</code>是<code>class son(father)</code>的父类，当子类没有函数名时就会向父类里面去查找，如过有就优先使用子类函数名，在子类中启动父类函数名的方法<code>father.篮球(self)</code>或者<code>super(son,self).篮球()</code> （优先使用后面）</p>
<p>class father:<br>    def 篮球(self):<br>        print(“篮球”)<br>    def 足球(self):<br>        print(“足球”)<br>    def 抽烟(self):<br>        print(“抽烟”)</p>
<p>class son(father):<br>    def 保健(self):<br>        #super(son,self).篮球()<br>        father.篮球(self)<br>        print(“保健”)<br>k = son()<br>k.保健()</p>
<p>函数的封装，</p>
<p>class ass:<br>    def __init__(self,name):<br>        self.ss = “good”<br>        print(self.ss,name)</p>
<p>a = ass(“你好”)</p>
<p>在一类里面的函数引用其他函数</p>
<p>class Talk(object):<br>    def __init__(self, name, age):<br>        self.name = name<br>        self.age = age<br>        self.info = None<br>    def checkAge(self):<br>        if self.age &lt; 18:<br>            self.info = ‘未满十八岁’<br>        elif self.age &lt; 40:<br>            self.info = ‘拼搏的时代’<br>        elif self.age &lt; 70:<br>            self.info = ‘请注意身体’<br>        else:<br>            self.info = ‘年过七旬’<br>    def sayInfo(self):<br>        if self.info == None:<br>            self.checkAge()<br>        print(self.name, “:”, self.info)</p>
<p>peo = Talk(‘li’, 28)<br>peo.sayInfo()</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>Python首次安装，以及输出hello world!</title>
    <url>/posts/b5fc856c.html</url>
    <content><![CDATA[<p>Python各版本官方windows下载地址 <a href="https://www.python.org/downloads/windows/">https://www.python.org/downloads/windows/</a> Python 官方安装包默认的添加的系统变量Path，解决CMD运行python出现内部或者外部命令，仅供参考</p>
<hr>
<p>C:\Users\Administrator\AppData\Local\Programs\Python\Python36\Scripts\;C:\Users\Administrator\AppData\Local\Programs\Python\Python36\</p>
<hr>
<p>输入python进入交互模式，开始输出hello.world试试看 print(‘hello.world’)   输出成功 print(“hello.word”)  输出成功 print(‘你好，世界’)  输出成功 输入Ctrl-Z 或者 quit() 退出交互模式，再用pycharm输出代码试试</p>
<p>C:\Users\Administrator\PycharmProjects\untitled\venv\Scripts\python.exe C:/Users/Administrator/PycharmProjects/untitled/venv/Include/demo.py File “C:/Users/Administrator/PycharmProjects/untitled/venv/Include/demo.py”, line 1 print(‘hello.world’) ^ SyntaxError: invalid character in identifier</p>
<p>进程已结束,退出代码1 居然报错了，错误在第一行，我得问问度娘 经过仔细的核查发现，是括号用错了。。。。。。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>python高级图像库 Pillow学习</title>
    <url>/posts/f4ebfb31.html</url>
    <content><![CDATA[<p>频段 一个图片允许包含一个或多个频段. Python Imaging Library 允许你在单个图像中存储多个频段. 包括原图像的尺寸和大小. 举个例子, 一个PNG图片可能包含 ‘R’, ‘G’, ‘B’, 和 ‘A’ 频段来表示红, 绿, 蓝和 alpha 透明值. 有许多对应频段的操作. 例如: histograms. 它常常用来处理不同像素的每个频段的值. 要想获得图像的频段的数量和名称, 使用 getbands() 方法. 模式 图像的 mode 定义了这个图像每一个像素点的大小. 目前版本支持以下标准模式: 1 (1-bit 像素点, 黑白, 一个像素点占用一个byte) L (8-bit 像素点, 黑白) P (8-bit 像素点, 使用调色板来映射其他模式) RGB (3x8-bit 像素点, 真彩) RGBA (4x8-bit 像素点, 带有透明标记的真彩) CMYK (4x8-bit 像素点, 分色) YCbCr (3x8-bit 像素点, 图像视频格式) 值得注意的是这个属于 JPEG, 而并不是 ITU-R BT.2020, standard LAB (3x8-bit 像素点, L*a*b 色彩空间) HSV (3x8-bit 像素点, Hue, Saturation, Value 色彩空间) I (32-bit 有符号整数像素) F (32-bit 浮点像素)     <strong>打开和查看一个文件</strong> from PIL import Image &gt;&gt;&gt;im = Image.open(“lena.ppm”) &gt;&gt;&gt; from __future__ import print_function &gt;&gt;&gt; print(im.format, im.size, im.mode) PPM (512, 512) RGB #os.path.splitext()可以用来分离文件名和文件格式 #im.format 如果图片打开失败，则为None #im.size返回元祖（宽，高） #im.mode 这个属性代表图片的band属性, 一般情况(黑白)下为 “L”, 当图片是彩色的时候是 “RGB”, 如果图片经过压缩,则是 “CMYK”.   <strong>根据图片生成缩略图</strong> im.thumbnail(size)    可以设置缩略图的大小</p>
<p>from __future__ import print_function<br>import os, sys<br>from PIL import Image</p>
<p>size = (128, 128)</p>
<p>for infile in sys.argv[1:]:<br>    outfile = os.path.splitext(infile)[0] + “.thumbnail”<br>    if infile != outfile:<br>        try:<br>            im = Image.open(infile)<br>            im.thumbnail(size)<br>            im.save(outfile, “JPEG”)<br>        except IOError:<br>            print(“cannot create thumbnail for”, infile)</p>
<p>  <strong>截取图片的某个区域的矩形</strong> 尺寸排序为 (左, 上, 右, 下)，截取的部分就是一个坐标系 <img src="https://post.332b.com/wp-content/uploads/2019/04/20190422163547.png">  </p>
<p>box = (100, 100, 400, 400)<br>region = im.crop(box)<br>region.show() </p>
<p>  <strong>将某个图片复制到另外一张</strong> <img src="https://post.332b.com/wp-content/uploads/2019/04/113214214124.jpg">     <strong>将截图的某个图片进行平铺</strong></p>
<p>from PIL import Image<br>im = Image.open(‘xej.jpg’)<br>box = (100, 100, 400, 400)<br>region = im.crop(box)</p>
<h1 id="region-show"><a href="#region-show" class="headerlink" title="region.show()"></a>region.show()</h1><p>region = region.transpose(Image.ROTATE_180)   #旋转180度<br>im.paste(region, box)<br>im.show()</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/04/20190422163027.png">     <strong>图片旋转</strong> 图片围绕着自身旋转，默认是自身为中心点旋转，当是正数是则为逆时针旋转</p>
<p>out = im.rotate(-45)<br>out.show()</p>
<p>  图片镜像</p>
<p>out = im.transpose(Image.FLIP_LEFT_RIGHT)<br>out.show()</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/04/20190422165246.png">   图片翻转</p>
<p>out = im.transpose(Image.FLIP_TOP_BOTTOM)<br>out.show()</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/04/20190422165724.png">   它也可以根据度数来旋转，不过只有三个固定的度数90、180和270度</p>
<p>out = im.transpose(Image.ROTATE_90)</p>
<p>  它的旋转和im.rotate()是右区别的，让他们都旋转90度，左为im.rotate()，不会改变图片的尺寸但不能完全显示；右边为im.transpose(Image.ROTATE_90)，会改变图片尺寸能完全显示 <img src="https://post.332b.com/wp-content/uploads/2019/04/20190422170521.png"> <strong>图片模式转换</strong> 在L模式下图片色彩会变成黑白的</p>
<p>im = im.convert(“L”)</p>
<p>  <strong>图片滤镜</strong></p>
<p>out = im.filter(ImageFilter.DETAIL)</p>
<p>  <strong>创建一个空白图像</strong> 图片模式，图片大小，图片颜色</p>
<p>im = Image.new(‘1’,(100,100),’white’)</p>
<p>  <strong>在一个图像写入一个线条</strong> 前面参数是坐标（左上右下），后面是颜色</p>
<p>draw = ImageDraw.Draw(im)<br>draw.line((0, 0,255,255), fill=(255,255,255))</p>
<p>  文本使用指定字体写入图像 1.设置字体和字体大小 2.定义文字的左上角坐标，文本，字体，字体颜色</p>
<p>fnt = ImageFont.truetype(‘msyh.ttf’, 40)</p>
<p>d = ImageDraw.Draw(image)</p>
<p>d.text((10,10), “Hello”, font=fnt, fill=(255,255,255,128))</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>SHELL echo printf 和test   学习篇(3)</title>
    <url>/posts/df2c992a.html</url>
    <content><![CDATA[<p>1.echo 使用大全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># echo为输出命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;1111&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;\&quot;这是一段话&#x27;\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量</span></span><br><span class="line">kk=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$kk</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 换行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;ok! \n&quot;</span> <span class="comment"># -e 开启转义，使\n换行生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is OK&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不换行</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;not ok! \c&quot;</span> <span class="comment"># -e 开启转义，使\c换行生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is not ok!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出字符到文件</span></span><br><span class="line"><span class="comment"># 如果文件已存在，会覆盖</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;it is not ok in text&quot;</span> &gt; myfile.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号不转义或获取变量</span></span><br><span class="line">name=<span class="string">&#x27;admin&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$name \n&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令</span></span><br><span class="line"><span class="built_in">echo</span> `date`</span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2020/05/20200511145250.png"></p>
<p>2.prinf 使用大全</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># printf 输出命令</span></span><br><span class="line"><span class="comment"># printf format-string [arguments1 arguments2 ...]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准模式</span></span><br><span class="line"><span class="comment"># %-4.2f   总共输出4i位i数字，其中两位是小数，-符号代表左对齐，没有就是右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-10i %-4.2f \n&quot;</span> 周杰伦 12 10.32453425</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-10i %-4.2f \n&quot;</span> 周杰伦 12 10.32453425</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-10i %-4.2f \n&quot;</span> 周杰伦 123456789010 101.32453425</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10s %-10i %-4.2f \n&quot;</span> 周杰伦覆盖不到返回给 12 10111111111111111.32453425</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量</span></span><br><span class="line">var1=1</span><br><span class="line">var2=<span class="string">&#x27;string&#x27;</span></span><br><span class="line">var3=<span class="string">&quot;val: <span class="variable">$string</span>&quot;</span></span><br><span class="line"><span class="comment"># 直接输出变量</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%20s \n&quot;</span> <span class="variable">$var2</span></span><br><span class="line"><span class="comment"># 在字符串中输出变量</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%20s \n&quot;</span> <span class="string">&quot;val: <span class="variable">$var2</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2020/05/20200511153815.png"></p>
<p>3.test 使用方法</p>
<p>a.判断数字</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test 测试命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试两个数是否相等</span></span><br><span class="line"><span class="comment"># -eq:==  -ne:!=  -gt:&gt;  -ge:&lt;=  -lt:&lt;  le:&lt;=</span></span><br><span class="line">number1=100</span><br><span class="line">number2=200</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[number1+100] -eq $[number2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>b.判断字符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test 测试命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试两个数是否相等</span></span><br><span class="line"><span class="comment"># -eq:==  -ne:!=  -gt:&gt;  -ge:&lt;=  -lt:&lt;  le:&lt;=</span></span><br><span class="line">number1=100</span><br><span class="line">number2=200</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> $[number1+100] -eq $[number2]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;两个数不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试字符串</span></span><br><span class="line"><span class="comment"># 判断条件：=  !=  -z(字符串长度为空)  -n(字符串长度不为空)</span></span><br><span class="line">string1=<span class="string">&quot;111&quot;</span></span><br><span class="line">string2=<span class="string">&quot;222&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$string1</span> = string2</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字符串相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字符串不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试字符是否为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -z <span class="variable">$string1</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字符串为空&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字符串不为空&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>c.判断文件</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/05/20200511174553.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test 测试文件</span></span><br><span class="line"><span class="comment"># -e 文件是否存在  -r 是否可读 -w 是否可写 -x是否可执行</span></span><br><span class="line"><span class="comment"># -s 文件至少有一个字符  -d 文件存在且为目录</span></span><br><span class="line"><span class="comment"># -f 文件存在且为普通文件  -c 文件存在且为字符型特殊文件（例如键盘）</span></span><br><span class="line"><span class="comment"># -b 文件存在且为块特殊文件（例如硬盘）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">abc=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment"># 将路径保存到o.txt</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个目录为：<span class="variable">$abc</span>&quot;</span> &gt; <span class="variable">$abc</span><span class="string">&#x27;/o.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e <span class="variable">$abc</span><span class="string">&#x27;/o.txt&#x27;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件已存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件不存在&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>4.test 多个条件拼接</p>
<ul>
<li>  ! (非) 优先级最高</li>
<li>  -a (与) 优先级中</li>
<li>  -o (或) 优先级最低</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># test 测试文件</span></span><br><span class="line"><span class="comment"># -e 文件是否存在  -r 是否可读 -w 是否可写 -x是否可执行</span></span><br><span class="line"><span class="comment"># -s 文件至少有一个字符  -d 文件存在且为目录</span></span><br><span class="line"><span class="comment"># -f 文件存在且为普通文件  -c 文件存在且为字符型特殊文件（例如键盘）</span></span><br><span class="line"><span class="comment"># -b 文件存在且为块特殊文件（例如硬盘）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">abc=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="comment"># 将路径保存到o.txt</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;这个目录为：<span class="variable">$abc</span>&quot;</span> &gt; <span class="variable">$abc</span><span class="string">&#x27;/o.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个条件示例</span></span><br><span class="line"><span class="comment"># 检测文件是否存在且文件不可以执行</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -e <span class="variable">$abc</span><span class="string">&#x27;/o.txt&#x27;</span> -a ! -x <span class="variable">$abc</span><span class="string">&#x27;/o.txt&#x27;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件已存在且不可以执行&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;文件不存在或文件可以执行&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>shell 函数写法 学习篇(5)</title>
    <url>/posts/8a123831.html</url>
    <content><![CDATA[<p>1.普通函数使用</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># shell函数示例</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 定义函数</span></span><br><span class="line">func1 () &#123;</span><br><span class="line">    echo <span class="string">&quot;这个是函数1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># 执行函数</span></span><br><span class="line">func1</span><br></pre></td></tr></table></figure>

<p>2.函数返回值</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回和获取函数值</span></span><br><span class="line">function func2 () &#123;</span><br><span class="line">    <span class="attribute">number1</span>=1</span><br><span class="line">    <span class="attribute">number2</span>=2</span><br><span class="line">    <span class="attribute">number3</span>=3</span><br><span class="line">    return $((<span class="variable">$number1</span>+<span class="variable">$number2</span>+<span class="variable">$number3</span>))</span><br><span class="line">&#125;</span><br><span class="line">func2</span><br><span class="line">echo <span class="string">&quot;fucn2函数之和为：$?&quot;</span></span><br></pre></td></tr></table></figure>

<p>3.函数使用参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置和获取函数参数</span></span><br><span class="line"><span class="function"><span class="title">func3</span></span> () &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输出第一个函数参数：<span class="variable">$1</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输出第二个函数参数：<span class="variable">$2</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输出第三个函数参数：<span class="variable">$3</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;总共有函数参数个数：<span class="variable">$#</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;字符串输出所有参数：$*&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;输出一个没有的参数：<span class="variable">$9</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func3 1 2 3 4</span><br></pre></td></tr></table></figure>

<p>4.一些注意事项</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/05/screenshot-www.runoob.com-2020.05.14-18_23_17.png"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>shell  定义变量和传参数学习篇(1)</title>
    <url>/posts/5f4c4605.html</url>
    <content><![CDATA[<p>1. 定义和输出变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">your_name=<span class="string">&#x27;witt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量方法一</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输出变量(方法一)your_name：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出变量方法二</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输出变量(方法二)your_name&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure>

<p>2.只读变量和删除变量</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创造变量并赋值</span></span><br><span class="line">your_name=<span class="string">&#x27;witt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 声明变量是只读变量</span></span><br><span class="line">readonly your_name</span><br><span class="line">echo your_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># 更改只读变量值会报错</span></span><br><span class="line">your_name=<span class="string">&#x27;my_name&#x27;</span></span><br><span class="line">echo your_name</span><br><span class="line"></span><br><span class="line"><span class="meta"># unset 删除变量</span></span><br><span class="line"><span class="meta"># unset 删除只读变量会报错</span></span><br><span class="line">unset your_name</span><br></pre></td></tr></table></figure>

<p>3.单双引号，截取字符串，获取字符串长度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">your_name=<span class="string">&#x27;witt&#x27;</span></span><br><span class="line"></span><br><span class="line">my_name=<span class="string">&#x27;lin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 单引号和双引号区别</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;your name is $your_name \n ‘OK’&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;your name is $&#123;your_name&#125; \n \’ok\‘&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;your name is <span class="variable">$your_name</span> \n \&#x27;OK\’&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;your name is <span class="variable">$&#123;your_name&#125;</span> \n \&quot;OK\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取变量字符长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123; &#123;your_name&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取字符串</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name:0-2:4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################</span></span><br><span class="line"><span class="comment"># your name is $your_name \n ‘OK’</span></span><br><span class="line"><span class="comment"># your name is $&#123;your_name&#125; \n \’ok\‘</span></span><br><span class="line"><span class="comment"># your name is witt \n \&#x27;OK\’</span></span><br><span class="line"><span class="comment"># your name is witt \n &quot;OK&quot;</span></span><br><span class="line"><span class="comment"># 4</span></span><br><span class="line"><span class="comment"># tt</span></span><br></pre></td></tr></table></figure>

<p>4.定义数组和多行注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个数组</span></span><br><span class="line">your_list1=(<span class="string">&#x27;123&#x27;</span> <span class="string">&#x27;2222&#x27;</span> <span class="string">&#x27;string1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">your_list2=(</span><br><span class="line">    <span class="string">&#x27;11111111&#x27;</span></span><br><span class="line">    <span class="string">&#x27;222255666&#x27;</span></span><br><span class="line">    <span class="string">&#x27;aereyrey&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的某个值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_list1[1]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123; &#123;your_list1[@]&#125;</span></span><br><span class="line"><span class="comment"># 将@改成*也可以获取</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数组某个元素的长度</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123; &#123;your_list1[2]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多行注释</span></span><br><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">我是第一行内容</span></span><br><span class="line"><span class="string">我是第二行内容</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>5.传递参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取传递参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;首个参数为文件本身： <span class="variable">$0</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数一： <span class="variable">$1</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数二： <span class="variable">$2</span>&quot;</span>;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;参数总个数： <span class="variable">$#</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;将所有参数转换单字符串一： $*&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;将所有参数转换单字符串二： <span class="variable">$@</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回当前脚本进程id号：$$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;返回后台运行的最后一个进程id号：$!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;shell使用的当前选项：$-&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;显示脚本最后命令的退出状态（0代表无错误）：$?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有参数 $* 和 $@区别</span></span><br><span class="line"><span class="comment"># $* 在双引号输出是指将多个元素传递一个元素 ‘var1 var2 var3’</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;$*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $@ 而它则相反‘var1‘ ’var2‘ ’var3’</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Shell  流程控制if...else 学习篇(4)</title>
    <url>/posts/cc166f12.html</url>
    <content><![CDATA[<p>1.if….else流程控制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 流程控制</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if else 示例</span></span><br><span class="line">number1=12</span><br><span class="line">number2=23 </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$number1</span> == <span class="variable">$number2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;number1和number2相等&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ `expr 36 + 2` == 38 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;36 + 2相加的结果为38&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;number1和number2不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>2. for … in …流程控制</p>
<p>3. while 流程控制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># while ...</span></span><br><span class="line"><span class="comment"># 当不满足条件时退出无限循环</span></span><br><span class="line">number3=1</span><br><span class="line"><span class="keyword">while</span> (( <span class="variable">$number3</span>&lt;=10 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前循环到数字：<span class="variable">$number3</span>&quot;</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;number3++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>4. until 流程控制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># until ...</span></span><br><span class="line"><span class="comment"># 当条件满足时退出无限循环</span></span><br><span class="line">number4=1</span><br><span class="line">until (( <span class="variable">$number4</span>==3 ))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;当前until循环到：<span class="variable">$number4</span>&quot;</span></span><br><span class="line">    <span class="built_in">let</span> <span class="string">&quot;number4++&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p>5.case … in …</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以输入不同的条件，执行不同的命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;输入“爱”或“不爱”表示你对我的态度：&#x27;</span></span><br><span class="line"><span class="built_in">read</span> love</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$love</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    <span class="string">&quot;爱&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;谢谢你的爱&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    <span class="string">&quot;不爱&quot;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;我也跟你一样&quot;</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;你还没有表达你的态度呢&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<p>6.continue退出当前循环，进入下一次循环；break终止整个循环</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Shell    运算符 学习篇(2)</title>
    <url>/posts/8eb072d.html</url>
    <content><![CDATA[<p>1.加减乘除，取余，判断相对和不相等</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相加</span></span><br><span class="line"><span class="attribute">val</span>=`expr 2 + 2`</span><br><span class="line">echo <span class="string">&quot;2+2结果为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line"><span class="attribute">val</span>=`expr 8 - 3`</span><br><span class="line">echo <span class="string">&quot;8-3结果为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line"><span class="attribute">val</span>=`expr 3 \* 4`</span><br><span class="line">echo <span class="string">&quot;3x4结果为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line"><span class="attribute">val</span>=`expr 9 / 3`</span><br><span class="line">echo <span class="string">&quot;9÷3结果为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取余数</span></span><br><span class="line"><span class="attribute">val</span>=`expr 11 / 3`</span><br><span class="line">echo <span class="string">&quot;11÷3的余数为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋值</span></span><br><span class="line"><span class="attribute">exp1</span>=12</span><br><span class="line"><span class="attribute">exp2</span>=10</span><br><span class="line"><span class="attribute">val</span>=`expr <span class="variable">$exp1</span> = <span class="variable">$exp2</span>`</span><br><span class="line">echo <span class="string">&quot;赋值为：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断相等，相等返回true</span></span><br><span class="line"><span class="attribute">exp1</span>=12</span><br><span class="line"><span class="attribute">exp2</span>=10</span><br><span class="line"><span class="attribute">val</span>=`expr <span class="variable">$exp1</span> == <span class="variable">$exp2</span>`</span><br><span class="line">echo <span class="string">&quot;两值测试是否相等：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断是否不想动，不想等返回ture</span></span><br><span class="line"><span class="attribute">exp1</span>=12</span><br><span class="line"><span class="attribute">exp2</span>=10</span><br><span class="line"><span class="attribute">val</span>=`expr <span class="variable">$exp1</span> != <span class="variable">$exp2</span>`</span><br><span class="line">echo <span class="string">&quot;两值测试是否不相等：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [Running] bash &quot;ssh/1.sh&quot;</span></span><br><span class="line"><span class="comment"># 2+2结果为：4</span></span><br><span class="line"><span class="comment"># 8-3结果为：5</span></span><br><span class="line"><span class="comment"># 3x4结果为：12</span></span><br><span class="line"><span class="comment"># 9÷3结果为：3</span></span><br><span class="line"><span class="comment"># 11÷3的余数为：3</span></span><br><span class="line"><span class="comment"># 赋值为：0</span></span><br><span class="line"><span class="comment"># 两值测试是否相等：0</span></span><br><span class="line"><span class="comment"># 两值测试是否不相等：1</span></span><br></pre></td></tr></table></figure>

<p>2.关系运算：大于，小于，大于或等于，小于或等于</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关系运算符</span></span><br><span class="line"><span class="attribute">val1</span>=12</span><br><span class="line"><span class="attribute">val2</span>=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># -eq 检测两个数是否相等</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -eq <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测是否相等：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -ne 检测两个数是否不相等</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -ne <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测是否不相等：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -gt 检测左边数是否大于右边</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -gt <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测左是否大于右：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -lt 检测左边是否小于右边</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -lt <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测左是否小于右：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -ge 检测左边是否大于或等于右边</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -ge <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测左是否大于或等于右：<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -le 检测左边是否小于或等于右边</span></span><br><span class="line"><span class="attribute">val</span>=`$val1 -le <span class="variable">$val2</span>`</span><br><span class="line">echo <span class="string">&quot;检测左是否小于或等于右：<span class="variable">$val</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>3.布尔运算符：或，与，非</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 布尔运算符</span></span><br><span class="line">val1=12</span><br><span class="line">val2=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># -o 或 满足其中的一个条件就成立</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$val1</span> -eq <span class="variable">$val2</span> -o <span class="variable">$val1</span> -gt <span class="variable">$val2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1比val2大或相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1比val2小或相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -a 与 所有的条件都必须满足就成立</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$val1</span> -eq <span class="variable">$val2</span> -a <span class="variable">$val1</span> -gt <span class="variable">$val2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1比val2大且相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1比val2小或不相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ! 非 不满足当前条件就成立</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$val1</span> != <span class="variable">$val2</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1和val2不相等&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;val1和val2相等&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>4.逻辑运算符</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 逻辑运算符</span></span><br><span class="line">val1=12</span><br><span class="line">val2=7</span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;&amp; 逻辑上的and</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$val1</span> -gt 100 &amp;&amp; <span class="variable">$val2</span> -gt 5 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件满足&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不满足&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  逻辑上的or</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$val1</span> -gt 100  <span class="variable">$val2</span> -gt 5 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件满足&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;条件不满足&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>5.字符串运算符</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/04/screenshot-www.runoob.com-2020.04.24-21_37_21.png"></p>
<p>6.文件关系运算符</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/04/screenshot-www.runoob.com-2020.04.24-21_35_01-721x1024.png"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>tornado.options配置文件方式</title>
    <url>/posts/67c2328e.html</url>
    <content><![CDATA[<p>控制台日志可以通过下面命令关闭</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado.<span class="keyword">options</span> <span class="keyword">import</span> <span class="keyword">options</span>, parse_command_line</span><br><span class="line"><span class="keyword">options</span>.logging = <span class="keyword">None</span></span><br><span class="line">parse_command_line()</span><br></pre></td></tr></table></figure>

<p>在元素内的配置方法</p>
<p>ornado.options.define用来定义数据，tornado.options.options用来访问数据</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置和声明对应的值</span></span><br><span class="line">tornado.options.define(<span class="string">&quot;mysql_host&quot;</span>, <span class="attribute">default</span>=<span class="string">&quot;127.0.0.1:3306&quot;</span>, <span class="attribute">help</span>=<span class="string">&quot;Main user DB&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问该值</span></span><br><span class="line"><span class="builtin-name">print</span>(tornado.options.options.mysql_host)</span><br></pre></td></tr></table></figure>

<p>1.命令行来配置 tornado.options.parse_command_line</p>
<p>注意：这个方式不支持字典</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 执行python -m server.py --good=good</span></span><br><span class="line"><span class="comment"># 先声明</span></span><br><span class="line">tornado.options.define(<span class="string">&quot;good&quot;</span>, <span class="attribute">default</span>=<span class="string">&quot;&quot;</span>, <span class="attribute">help</span>=<span class="string">&quot;Main user DB&quot;</span>)</span><br><span class="line"><span class="comment"># 在获取</span></span><br><span class="line">tornado.options.parse_command_line()</span><br><span class="line"><span class="comment"># 访问该值</span></span><br><span class="line"><span class="builtin-name">print</span>(tornado.options.options.good)</span><br></pre></td></tr></table></figure>

<p>2.设置配置文件tornado.options.parse_config_file</p>
<p>注意：这个方式不支持字典</p>
<p>先创建config.conf文件</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># config.conf</span></span><br><span class="line"><span class="attr">good</span> = <span class="string">&#x27;good&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">mysql_host</span> = <span class="string">&#x27;mydb.example.com:3306&#x27;</span></span><br><span class="line"><span class="comment"># Both lists and comma-separated strings are allowed for</span></span><br><span class="line"><span class="comment"># multiple=True.</span></span><br><span class="line"><span class="attr">memcache_hosts</span> = [<span class="string">&#x27;cache1.example.com:11011&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;cache2.example.com:11011&#x27;</span>]</span><br><span class="line"><span class="attr">memcache_hosts</span> = <span class="string">&#x27;cache1.example.com:11011,cache2.example.com:11011&#x27;</span></span><br></pre></td></tr></table></figure>

<p>再使用</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先声明</span></span><br><span class="line">tornado.options.define(<span class="string">&quot;good&quot;</span>, <span class="attribute">default</span>=<span class="string">&quot;&quot;</span>, <span class="attribute">help</span>=<span class="string">&quot;Main user DB&quot;</span>)</span><br><span class="line"><span class="comment"># 设置文件路径</span></span><br><span class="line">tornado.options.parse_config_file(<span class="string">&#x27;config.conf&#x27;</span>)</span><br><span class="line"><span class="comment"># 访问该值</span></span><br><span class="line"><span class="builtin-name">print</span>(tornado.options.options.good)</span><br></pre></td></tr></table></figure>

<p>3.直接使用py来创建，再用模块导入，不使用 tornado.options</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a.py</span></span><br><span class="line">good = <span class="string">&#x27;good&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b.py</span></span><br><span class="line"><span class="keyword">import</span> a</span><br><span class="line"><span class="built_in">print</span>(a.good) </span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu   不能播放html5视频的两种解决方法</title>
    <url>/posts/190be277.html</url>
    <content><![CDATA[<p>要看视频就会遇到这些问题，不知道是怎么回事，Ubuntu好像不能直接播放视频，需要安装插件，有下面两种方法可以解决</p>
<p>1.解决不能播放html5视频的方法</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install </span>ubuntu-restricted-<span class="keyword">extras</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword"># </span>一路默认回车键即可</span><br></pre></td></tr></table></figure>

<p>2.安装adobe flash插件，不过Flash将于2020年停止更新，chrome浏览器也将于2020年不再支持flash插件</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install flashplugin-installer</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu 安装VUE并配置多版本管理</title>
    <url>/posts/a5f93eec.html</url>
    <content><![CDATA[<p><code>nvm（Node Version Manager）</code>是一个用来管理<code>node</code>版本的工具。我们之所以需要使用<code>node</code>，是因为我们需要使用<code>node</code>中的<code>npm(Node Package Manager)</code>，使用<code>npm</code>的目的是为了能够方便的管理一些前端开发的包！<code>nvm</code>的安装非常简单，步骤如下：</p>
<ol>
<li> 到这个链接下载<code>nvm</code>的安装包：<code>https://github.com/coreybutler/nvm-windows/releases</code>。</li>
<li> 然后点击一顿下一步，安装即可！</li>
<li> 安装完成后，还需要配置环境变量。在<code>我的电脑-&gt;属性-&gt;高级系统设置-&gt;环境变量-&gt;系统环境变量-&gt;Path</code>下新建一个，把<code>nvm</code>所处的路径填入进去即可！</li>
<li> 打开<code>cmd</code>，然后输入<code>nvm</code>，如果没有提示没有找不到这个命令。说明已经安装成功！</li>
<li> <code>Mac</code>或者<code>Linux</code>安装<code>nvm</code>请看这里：<code>https://github.com/creationix/nvm</code>。也要记得配置环境变量。</li>
</ol>
<p><code>nvm</code>常用命令：</p>
<ol>
<li> <code>nvm install node</code>：安装最新版的<code>node.js</code>。nvm i == nvm install。</li>
<li> <code>nvm install [version]</code>：安装指定版本的<code>node.js</code> 。</li>
<li> <code>nvm use [version]</code>：使用某个版本的<code>node</code>。</li>
<li> <code>nvm list</code>：列出当前安装了哪些版本的<code>node</code>。</li>
<li> <code>nvm uninstall [version]</code>：卸载指定版本的<code>node</code>。</li>
<li> <code>nvm node_mirror [url]</code>：设置<code>nvm</code>的镜像。</li>
<li> <code>nvm npm_mirror [url]</code>：设置<code>npm</code>的镜像。</li>
</ol>
<p>替换npm源镜像为国内淘宝镜像</p>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像地址</span></span><br><span class="line">npm get <span class="keyword">registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置成淘宝镜像</span></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org/</span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn config <span class="keyword">set</span> <span class="keyword">registry</span> <span class="keyword">http</span>://<span class="keyword">registry</span>.npm.taobao.org/ </span><br><span class="line"><span class="comment"># 原版</span></span><br><span class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npmjs.org/</span><br></pre></td></tr></table></figure>

<p>安装vue-cli3.0</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn <span class="built_in">global</span> add @vue/cli</span><br><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 添加∬上网方法</title>
    <url>/posts/b142671a.html</url>
    <content><![CDATA[<p>ubuntu直接添加下列PPA源</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:hzwhuang/∬-qt5      <span class="comment">#请将∬替换成ss</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ∬ocks-qt5        <span class="comment"># 请将∬ 替换成$hadow$，再将美元符号换成s</span></span><br></pre></td></tr></table></figure>

<p>更改源文件，然后再安装，如果是Ubuntu 18 代号Bionic，会报错因为目前只有到16 （代号xenial）</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list.d/</span></span><br><span class="line">sudo apt install gedit</span><br><span class="line">sudo geditl hzwhuang-ubuntu-∬-qt5-bionic.list       <span class="comment"># 请将∬替换成两个s隔开s</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开该文件后，将原有的bionic改成xenial。</span></span><br></pre></td></tr></table></figure>

<p>设置PAC上网模式</p>
<p>你的电脑得具有python环境，并且已经安装了pip并升级最新版本</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装genpac</span></span><br><span class="line">pip <span class="keyword">install</span> genpac</span><br></pre></td></tr></table></figure>

<p>2.生成auto.pac文件<br>随便放那个路径自己决定了，比如~/PAC/</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mkdir ~<span class="string">/PAC/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">cd</span> ~<span class="string">/PAC/</span></span><br><span class="line"></span><br><span class="line">touch user-rules.txt</span><br><span class="line"></span><br><span class="line">genpac -p <span class="string">&quot;SOCK(?) 127.0.0.1:1090&quot;</span> <span class="params">--gf</span><span class="params">(@)</span>ist-<span class="params">(!)</span>xy=<span class="string">&quot;SOCK(?) 127.0.0.1:1090&quot;</span> <span class="params">--output=</span><span class="string">&quot;auto(!).pac&quot;</span> <span class="params">--gf</span><span class="params">(@)</span>ist-url=<span class="string">&quot;https://raw.githubusercontent.com/gf(@)ist/gf(@)ist/master/gf(@)ist.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GenPACDeprecationWarning: 在2.0中参数-p已被--pac-(!)xy取代, 后续版本将删除, 避免使用.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  将(!)替换成pro, 将(?)替换成S5，将(@)替换成wl</span></span><br><span class="line"><span class="comment"># 对应的端口可以自己设置，比如我的是1090</span></span><br></pre></td></tr></table></figure>

<p>点进网络设置，设置如下：<br><code>file:///~/PAC/auto.pac</code></p>
<p>chrome 上网启动方法</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta">#  直接用root权限启动</span></span><br><span class="line">sudo google-chrome --(!)xy-server=“socks:<span class="comment">//127.0.0.1:1090” --no-sandbox --user-data-dir</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 用户权限启动</span></span><br><span class="line"></span><br><span class="line">google-chrome --(!)xy-server=<span class="string">&quot;socks://127.0.0.1:1090&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  将(!)替换成pro, 将(?)替换成S5，将(@)替换成wl</span></span><br></pre></td></tr></table></figure>

<p>更详细的参考下面</p>
<p><a href="https://www.linuxdashen.com/%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%8b%e4%b8%bachromium%e5%92%8cgoogle-chrome%e6%b5%8f%e8%a7%88%e5%99%a8%e8%ae%be%e7%bd%ae%e4%bb%a3%e7%90%86">https://www.linuxdashen.com/%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e4%b8%8b%e4%b8%bachromium%e5%92%8cgoogle-chrome%e6%b5%8f%e8%a7%88%e5%99%a8%e8%ae%be%e7%bd%ae%e4%bb%a3%e7%90%86</a></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu  开机出现grub无法启动</title>
    <url>/posts/323052d0.html</url>
    <content><![CDATA[<p>方法一 使用命令修复试试</p>
<p>1.开机进入grub后，输出ls会出现下面内容，请自己用肉眼判断那个分区是你的启动分区，当然也可以通过ls (hd1,gpt1)/来查看分区包含的文件目录信息</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">grub&gt;ls</span><br><span class="line"><span class="comment">(hd0,1)</span>,<span class="comment">(hd0,5)</span>,<span class="comment">(hd0,3)</span>,<span class="comment">(hd0,2)</span>,<span class="comment">(hd1,gpt1)</span>,<span class="comment">(hd1,gpt2)</span></span><br><span class="line">grub&gt;ls <span class="comment">(hd1,gpt1)</span>/</span><br><span class="line">/EFI,/BOOT</span><br></pre></td></tr></table></figure>

<p>2.找到分区开始设置并启动分区</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">grub&gt;</span><span class="bash"><span class="built_in">set</span> root=(hd1,gpt1)</span></span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash"><span class="built_in">set</span> prefix=(hd1,gpt1)/boot/grub</span></span><br><span class="line"><span class="meta">grub&gt;</span><span class="bash">normal</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入上面命令 不会提示任何信息，如果错误请检测命令设置是否正确</span></span><br></pre></td></tr></table></figure>

<p>3.进入系统后，更新grub</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br><span class="line"></span><br><span class="line"><span class="comment">#不确定那个分区可以用 sudo fdisk -l查看</span></span><br><span class="line">sudo grub-install <span class="regexp">/dev/</span>sda</span><br><span class="line"></span><br><span class="line"><span class="comment">#第一条命令执行成功，第二条命令执行失败，英文提示为没有找到efi分区</span></span><br></pre></td></tr></table></figure>

<p>方法二 使用boot repir修复</p>
<p>1.找到ubuntu官方镜像制作一个usb启动盘</p>
<p>2.制作完成后进入Live系统，保持系统联网，添加下面源，并安装boot repair</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 添加源</span></span><br><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update  </span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装boot repir</span></span><br><span class="line">sudo apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure>

<p>3.不要直接点Recommended Repair，打开底部Advance options，选择正确的分区，再进行修复</p>
<p>我用此方法修复系统成功，方法一失败了，方法仅供参考，请多试</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu下载额外数据文件失败ttf-mscorefonts-installer</title>
    <url>/posts/d10ebb01.html</url>
    <content><![CDATA[<p>下载额外数据文件失败</p>
<p>以下软件包要求安装后下载附加数据，但其数据无法下载或无法处理。</p>
<p>ttf-mscorefonts-installer</p>
<p>稍后系统将自动重试下载，您也可以手工立即重试。执行此命令需要有活动的网络连接。</p>
<p>先下载下面文件解压，然后执行命令填入解压目录，不要下载wd97vwr32.exe文件</p>
<p>备用地址：<a href="https://sourceforge.net/projects/corefonts/files/the%20fonts/final/">https://sourceforge.net/projects/corefonts/files/the%20fonts/final/</a></p>
<p><a href="https://post.332b.com/wp-content/uploads/2019/06/font.zip">font字体</a><a href="https://post.332b.com/wp-content/uploads/2019/06/font.zip">下载</a></p>
<p><code>sudo dpkg-reconfigure ttf-mscorefonts-installer</code></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu将台式机和手机结合，变成无线耳机</title>
    <url>/posts/2dd0534.html</url>
    <content><![CDATA[<p>安装PortAudio是一款专为跨平台设计的便携式音频I / O库</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install portaudio19-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>

<p>安装libcurl</p>
<p>sudo apt-get install libcurl4</p>
<p>安装pavucontrol</p>
<p>sudo apt-get install pavucontrol</p>
<p>安装libcurl <code>sudo apt-get install libcurl4 curl</code> 为了能在命令行使用Soundwire，将Soundwire文件夹添加到环境变量 <code>sudo vim /etc/profile</code> 在末尾添加,下面替换成你自己的路径： <code>export PATH=$PATH:/home/sky/software/SoundWireServer</code> 使配置生效： <code>source /etc/profile</code> 这样以来，就可以在命令行输入: <code>SoundWireServer</code> 打开Soundwire了，如果不想使用图形界面，可以加上-nogui参数： <code>SoundWireServer -nogui</code></p>
<p>  创建图标</p>
<p>sudo gedit /usr/share/applications/SoundWire-Server.desktop</p>
<p>#配置文件如下<br>#!/usr/bin/env xdg-open</p>
<p>[Desktop Entry]<br>Name=SoundWire Server<br>Comment=Server program for SoundWire Android app<br>Exec=/home/witt/soft/SoundWireServer/SoundWireServer<br>Icon=/home/witt/soft/SoundWireServer/sw-icon.xpm<br>Terminal=false<br>Type=Application<br>Categories=AudioVideo;Audio</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>UBuntu使用：常用的软件安装和下载</title>
    <url>/posts/36436006.html</url>
    <content><![CDATA[<p>chrome浏览器 sudo wget <a href="http://www.linuxidc.com/files/repo/google-chrome.list">http://www.linuxidc.com/files/repo/google-chrome.list</a> -P /etc/apt/sources.list.d/ wget -q -O - <a href="https://dl.google.com/linux/linux/_signing/_key.pub">https://dl.google.com/linux/linux\_signing\_key.pub</a> sudo apt-key add - sudo apt-get update sudo apt-get install google-chrome-stable 安装搜狗输入法 官方参考文档<a href="https://pinyin.sogou.com/linux/help.php">https://pinyin.sogou.com/linux/help.php</a> 安装flash插件 sudo apt-get install flashplugin-installer Chrome浏览器设置代理 google-chrome –proxy-server=”socks5://localhost:1080” VirtualBox遇到UUID重复问题，例如虚拟硬盘vdi复制会出现类似问题 <strong>winodws命令：VBoxManage internalcommands sethduuid “E:\VirtualBox VMs\XP.vdi”</strong> ubuntu命令：VirtualBox nternalcommands sethduuid /media/wng/Uz/win7/win732.vdi WPS字体缺失解决办法 <a href="https://post.332b.com/wp-content/uploads/2018/12/wps_symbol_fonts.zip">wps_symbol_fonts</a> 国外下载地址：<a href="https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps/_symbol/_fonts.zip">https://www.dropbox.com/s/lfy4hvq95ilwyw5/wps\_symbol\_fonts.zip</a></p>
<p>下载完成后，解压并进入目录中，继续执行： sudo cp * /usr/share/fonts 执行以下命令,生成字体的索引信息： sudo mkfontscale sudo mkfontdir 运行fc-cache命令更新字体缓存。重启wps sudo fc-cache</p>
<p>wordpress摘要调整   iwata_custom_excerpt_length( $length )</p>
<p>32weiku    sudo apt install lib32z1 lib32ncurses-dev</p>
<p><a href="http://anduin.linuxfromscratch.org/sources/linux-firmware/amdgpu/">http://anduin.linuxfromscratch.org/sources/linux-firmware/amdgpu/</a></p>
<p><a href="https://github.com/GPUOpen-Drivers/AMDVLK">https://github.com/GPUOpen-Drivers/AMDVLK</a></p>
<p><a href="https://people.freedesktop.org/~agd5f/radeon/_ucode/">https://people.freedesktop.org/~agd5f/radeon\_ucode/</a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>VIM操作文档</title>
    <url>/posts/23600133.html</url>
    <content><![CDATA[<p>DD 删除整行 D数字D 删除几行，例如D4D 删除4行 U 撤回操作 X 删除光标所在的字符 Insert 切换输入、替换模式 I 进入输入模式 Page Up/Page Down 或者 Ctrl + B/Ctrl + F 向上/向下翻页 数字+空格 向右移多少个字符 ?word 向上查找字符 /word 向下查找字符 n和shift + n 向下和向上继续查找一次 G和Shift + G 返回文本的第一行和最后一行 <a href="https://www.cnblogs.com/huxinga/p/7942194.html">https://www.cnblogs.com/huxinga/p/7942194.html</a> <a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>VUE-CLI3 中引入laydate日期选择插件</title>
    <url>/posts/e09f509.html</url>
    <content><![CDATA[<p>在main.js里面我们这样做，addjs为js路径，func为该js成功加载完后执行的函数</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">Vue<span class="selector-class">.prototype</span>.<span class="variable">$addjs</span> = function (addjs, func) &#123;</span><br><span class="line">  let oHead = document<span class="selector-class">.getElementsByTagName</span>(<span class="string">&#x27;HEAD&#x27;</span>)<span class="selector-class">.item</span>(<span class="number">0</span>)</span><br><span class="line">  let oScript = document<span class="selector-class">.createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">  oScript<span class="selector-class">.type</span> = <span class="string">&#x27;text/javascript&#x27;</span></span><br><span class="line">  oScript<span class="selector-class">.src</span> = addjs</span><br><span class="line">  oHead<span class="selector-class">.appendChild</span>(oScript)</span><br><span class="line">  oScript<span class="selector-class">.onload</span> = func</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在模板中我们这样写</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="comment">//script部分</span></span></span><br><span class="line">beforeMount () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> after = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.laydate.render(&#123;</span></span><br><span class="line"><span class="javascript">        elem: <span class="string">&#x27;#test1&#x27;</span></span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$addjs(<span class="string">&#x27;js/laydate/laydate.js&#x27;</span>, after)    <span class="comment">//前为js路径，可以是网址</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>就这样easy的搞定了，是不是很轻松？</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>VUE-CLI3  全局变量模块导入方法</title>
    <url>/posts/7750a09b.html</url>
    <content><![CDATA[<p>新建myglobal.js，这样写入代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">globalfunc</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;   <span class="comment">//这里是函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> globalvariable = &#123;</span><br><span class="line">  static_file: <span class="string">&#x27;./static/&#x27;</span></span><br><span class="line">&#125;   <span class="comment">//这里是属性，可以存储一些公共变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  globalfunc,</span><br><span class="line">  globalvariable</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main.js导入，让它成为全局变量</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> myglobal <span class="keyword">from</span> <span class="string">&#x27;./myglobal&#x27;</span></span><br><span class="line">Vue.prototype.$myglobal = myglobal</span><br></pre></td></tr></table></figure>

<p>在VUE模板中的使用方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">this</span>.$myglobal.globalvariable.static_file  <span class="comment">//引入全局变量</span></span></span><br><span class="line"><span class="javascript">     <span class="built_in">this</span>.$myglobal.globalfunc()      <span class="comment">//引入全局函数</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>VUE.js 懒加载根据生产和开发环境来配置</title>
    <url>/posts/1af25f95.html</url>
    <content><![CDATA[<p>开发环境不需要懒加载，客户端需要懒加载，为了避免来回切换麻烦，可以使用下面的方法</p>
<p>新建import-development.js和import-production.js文件</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">//<span class="keyword">import</span>-development.js</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = file =&gt; <span class="built_in">require</span>(<span class="string">&#x27;@/views/&#x27;</span> + file + <span class="string">&#x27;.vue&#x27;</span>).<span class="keyword">default</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//<span class="keyword">import</span>-production.js</span><br><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = file =&gt; () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;@/views/&#x27;</span> + file + <span class="string">&#x27;.vue&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>在路由入口文件这样使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">const _import = require(<span class="string">&#x27;./import-&#x27;</span> + process.env.NODE_ENV)     </span><br><span class="line"><span class="regexp">//</span>  process.env.NODE_ENV  在vue cli3中使用有所改变</span><br><span class="line"><span class="regexp">//</span> 建议使用新的https:<span class="regexp">//</span>post.<span class="number">332</span>b.com<span class="regexp">/blog/</span><span class="number">672</span>.html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 然后定义一个路由的方法</span><br><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">  component: _import(<span class="string">&#x27;modules/login/login&#x27;</span>),</span><br><span class="line">  name: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">  meta: &#123;</span><br><span class="line">    title: <span class="string">&#x27;登录&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>VUE-JS 定义开发环境和生产环境全局变量</title>
    <url>/posts/ad5fc467.html</url>
    <content><![CDATA[<p>1.在项目目录新建一个.env文件，打开文件设置一个变量</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#.env文件</span></span><br><span class="line">VUE_APP_URL=http:<span class="regexp">//</span>www.baidu.com</span><br></pre></td></tr></table></figure>

<p>注意前面的VUE_APP_是系统已经固定好的格式，后面的URL才是我们可以改变的部分</p>
<p>同时.env还有开发模式和生产环境，不同环境执行不同文件</p>
<p>普通通用环境.env（无论那个环境都一样）</p>
<p>开发环境.env.development（这个文件需要自己创建）</p>
<p>生产环境.env.production</p>
<p>2.在app脚手架中应用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">#xxx.vue文件使用方法</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123; &#123;url&#125; &#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span></span><br><span class="line"><span class="javascript">  data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">    url:process.env.VUE_APP_URL</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js：vue-router基本使用</title>
    <url>/posts/dec2749b.html</url>
    <content><![CDATA[<p>在路由中渲染插件和指定一个链接</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/foo&quot;</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>路由组件url之间的绑定方法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// 方法一：先引入组件，再指定组件</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="type">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">// 方法二：直接指定组件</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">path</span>: <span class="string">&#x27;/about/:id&#x27;</span>,</span><br><span class="line">      <span class="type">name</span>: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      component: () =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>动态路由配置</p>
<p>$route.params 返回路由参数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about/:id&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      component: () =&gt; import(<span class="string">&#x27;./views/About.vue&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>  当我们访问到<span class="regexp">/about/</span><span class="number">123</span>这个url时</span><br><span class="line"><span class="regexp">//</span>  <span class="variable">$route</span>.params就等于&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;111&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>$route.query</strong> 返回查询字符串</p>
<p>更多api参考下面，例如当前绝对路径、网址和hash等等</p>
<p><a href="https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1">https://router.vuejs.org/zh/api/#%E8%B7%AF%E7%94%B1%E5%AF%B9%E8%B1%A1</a></p>
<p>路由之间跳转</p>
<p>this.$router.replace(path) =&gt; 跳转到指定url链接，但是它不会在浏览器中产生记录</p>
<p>this.$router.push(path) =&gt; 跳转到指定url链接，并在history栈中添加一条新的记录。</p>
<p>this.$router.go(val) =&gt; 在浏览器history记录中前进(正数)或者后退（负数）val步，当val为0时刷新当前页面。当返回的页数不存在就会报错</p>
<p>this.$router.push(path) 等于 <router-link :to="..."></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 字符串</span><br><span class="line">router.push(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 对象</span><br><span class="line">router.push(&#123; path: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 命名的路由</span><br><span class="line">router.push(&#123; name: <span class="string">&#x27;user&#x27;</span>, params: &#123; userId: <span class="string">&#x27;123&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 带查询参数，变成 /register?plan=private</span><br><span class="line">router.push(&#123; path: <span class="string">&#x27;register&#x27;</span>, query: &#123; plan: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>

<p>注意：如果提供了 path，params 会被忽略，上述例子中的 query 并不属于这种情况。取而代之的是下面例子的做法，你需要提供路由的 name 或手写完整的带有参数的 path：</p>
<p>嵌套路由</p>
<p>在路由中配置children选项，然后在主组件中加入<router-view/> 标签</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">//这是aa.vue组件</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是a里面的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">export default </span><span class="xquery">&#123;</span></span><br><span class="line"><span class="xquery"> <span class="built_in"> name</span>: <span class="string">&#x27;aa&#x27;</span></span></span><br><span class="line"><span class="xquery">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>路由配置  </span><br><span class="line">&#123;</span><br><span class="line">     path: <span class="string">&#x27;/about/:id&#x27;</span>,</span><br><span class="line">     name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">     component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>),</span><br><span class="line">     children: [</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="regexp">//</span> 当 <span class="regexp">/user/</span>:id/aa 匹配成功，</span><br><span class="line">         <span class="regexp">//</span> aa.vue 会被渲染在 About.vue 的 &lt;router-view&gt; 中</span><br><span class="line">         path: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">         component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/aa.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//About.vue组件  </span></span><br><span class="line">&lt;div <span class="keyword">class</span>=&quot;<span class="symbol">about</span>&quot;&gt;</span><br><span class="line">    &lt;<span class="symbol">h1</span>&gt;<span class="symbol">This</span> <span class="symbol">is</span> <span class="symbol">an</span> <span class="symbol">about</span> <span class="symbol">page</span>&lt;/<span class="symbol">h1</span>&gt;</span><br><span class="line">    &lt;<span class="symbol">p</span>&gt; <span class="symbol">id</span>是：&#123; &#123; <span class="keyword">this</span>.$route.params&#125; &#125;&lt;/p&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;                                  <span class="comment">//不要忘了这个标签</span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>当用户访问/user/:id/aa 和/user/:id/的区别如下</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/08/2018194545-1024x321.jpg"></p>
<p>命名路由和命名视图</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">const router = <span class="built_in">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">      <span class="type">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      component: <span class="keyword">User</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在定义路由时给他起个名字，就可以定义直接在视图导航中这样使用</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">&lt;router-link <span class="symbol">:to=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125; &#125;&quot;</span>&gt;User&lt;/router-link&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以在js代码中这样用，它们是等价的</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">router.push(&#123; <span class="built_in">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="built_in">params</span>: &#123; userId: <span class="number">123</span> &#125; &#125;)</span><br></pre></td></tr></table></figure>

<p>命名视图中的用法</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 路由配置  </span><br><span class="line">  &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">      component: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/About.vue&#x27;</span>),</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="regexp">//</span> 访问 /about 匹配成功，</span><br><span class="line">          path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">          components: &#123;</span><br><span class="line">            default: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/aa.vue&#x27;</span>),</span><br><span class="line">            are: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/bb.vue&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="regexp">//</span> 访问 /about/aa 匹配成功，</span><br><span class="line">          path: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">          components: &#123;</span><br><span class="line">            default: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/bb.vue&#x27;</span>),</span><br><span class="line">            are: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/aa.vue&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//About.vue 组件内容</span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is an about page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/aa&quot;</span>&gt;</span>链接到aa页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;are&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://post.332b.com/wp-content/uploads/2019/08/dfgdsfsdasas-1024x301.jpg"></p>
<p>别名和重定向</p>
<p>别名，当一个用户访问/a的时候，它实际是a组件，访问/b的时候，他还是a组件</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line"><span class="type">path</span>: <span class="string">&#x27;/a&#x27;</span>, </span><br><span class="line">component: A, </span><br><span class="line"><span class="keyword">alias</span>: <span class="string">&#x27;/b&#x27;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>重定向 当你访问/a时，它将你重定向到/b</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&#123; <span class="type">path</span>: <span class="string">&#x27;/a&#x27;</span>, redirect: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line"> &#123; <span class="type">path</span>: <span class="string">&#x27;/a&#x27;</span>, redirect: &#123; <span class="type">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125; &#125;</span><br></pre></td></tr></table></figure>

<p>更多参考</p>
<p><a href="https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js">https://github.com/vuejs/vue-router/blob/dev/examples/redirect/app.js</a></p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>VUE 路由拦截卫士和Axios拦截器参数含义</title>
    <url>/posts/6da95e51.html</url>
    <content><![CDATA[<p>VUE路由拦截器</p>
<p>to,from,next 参数含义</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">to 和from共有参数</span><br><span class="line">&#123;</span><br><span class="line"><span class="symbol">fullPath:</span> <span class="string">&quot;/about&quot;</span>,     <span class="comment">// 点击的路径</span></span><br><span class="line"><span class="symbol">hash:</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line"><span class="symbol">meta:</span> &#123;&#125;,           <span class="comment">// 在路由中设置的meta字段</span></span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;about&quot;</span>,   <span class="comment">// 在路由中定义的名字</span></span><br><span class="line"><span class="symbol">params:</span> &#123;&#125;,      <span class="comment">// post或put提交的参数</span></span><br><span class="line"><span class="symbol">path:</span> <span class="string">&quot;/about&quot;</span>,  <span class="comment">//路由中的路径</span></span><br><span class="line"><span class="symbol">query:</span> &#123;&#125;  <span class="comment">// 查询字符串  /?aa=123&amp;bb=456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意next字段的使用方法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 下面是正确的用法 </span><br><span class="line"> <span class="keyword">if</span> ( to.path === <span class="string">&#x27;/&#x27;</span> ) &#123;</span><br><span class="line">    <span class="keyword">next</span>(&#123;path: <span class="string">&#x27;/login&#x27;</span>&#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 这个也是正确的用法</span><br><span class="line"><span class="keyword">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> 这个就是错误的用法，axios不能直接这样写，否则会无限循环</span><br><span class="line"><span class="keyword">next</span>(&#123;path: <span class="string">&#x27;/login&#x27;</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Axios拦截器</p>
<p>request请求拦截器 config 包含的接口</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">adapter:</span> ƒ xhrAdapter(config)</span><br><span class="line"><span class="symbol">baseURL:</span> <span class="string">&quot;&quot;</span>         <span class="comment">//域名前缀</span></span><br><span class="line"><span class="symbol">data:</span> undefined         <span class="comment">//提交</span></span><br><span class="line"><span class="symbol">headers:</span></span><br><span class="line"><span class="symbol">     Accept:</span> <span class="string">&quot;application/json, text/plain, */*&quot;</span></span><br><span class="line">     X-Custom-Header: <span class="string">&quot;foobar&quot;</span></span><br><span class="line"><span class="symbol">maxContentLength:</span> <span class="number">-1</span></span><br><span class="line"><span class="symbol">method:</span> <span class="string">&quot;get&quot;</span></span><br><span class="line"><span class="symbol">timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="symbol">transformRequest:</span> [ƒ]</span><br><span class="line"><span class="symbol">transformResponse:</span> [ƒ]</span><br><span class="line"><span class="symbol">url:</span> <span class="string">&quot;http://jsonplaceholder.typicode.com/comments&quot;</span></span><br><span class="line"><span class="symbol">validateStatus:</span> ƒ validateStatus(status)</span><br><span class="line"><span class="symbol">xsrfCookieName:</span> <span class="string">&quot;XSRF-TOKEN&quot;</span></span><br><span class="line"><span class="symbol">xsrfHeaderName:</span> <span class="string">&quot;X-XSRF-TOKEN&quot;</span></span><br></pre></td></tr></table></figure>

<p>response请求拦截器 response接口</p>
<p>response 访问成功 接口代码</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">//  同request 中的 config</span><br><span class="line"><span class="title">config</span>: &#123;url: <span class="string">&quot;http://jsonplaceholder.typicode.com/comments&quot;</span>, headers: &#123;…&#125;, baseURL: <span class="string">&quot;&quot;</span>, transformRequest: <span class="type">Array</span>(<span class="number">1</span>), transformResponse: <span class="type">Array</span>(<span class="number">1</span>), …&#125;</span><br><span class="line">// 下载获取到的json数据</span><br><span class="line"><span class="class"><span class="keyword">data</span>: (500) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, …]</span></span><br><span class="line">//  得到的回话头</span><br><span class="line"><span class="title">headers</span>: &#123;pragma: <span class="string">&quot;no-cache&quot;</span>, content-<span class="class"><span class="keyword">type</span>: &quot;application/json; charset=utf-8&quot;, cache-control: &quot;public, max-age=14400&quot;, expires: &quot;<span class="type">Fri</span>, 23 <span class="type">Aug</span> 2019 10:58:41 <span class="type">GMT</span>&quot;&#125;</span></span><br><span class="line">//  请求配置</span><br><span class="line"><span class="title">request</span>: <span class="type">XMLHttpRequest</span> &#123;onreadystatechange: ƒ, readyState: <span class="number">4</span>, timeout: <span class="number">0</span>, withCredentials: false, upload: <span class="type">XMLHttpRequestUpload</span>, …&#125;</span><br><span class="line">//  请求状态码</span><br><span class="line"><span class="title">status</span>: <span class="number">200</span></span><br><span class="line">//  请求状态码文本</span><br><span class="line"><span class="title">statusText</span>: <span class="string">&quot;OK&quot;</span></span><br></pre></td></tr></table></figure>

<p>response error访问错误 接口代码</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml">//  提取方法 error.respose</span></span><br><span class="line"><span class="xml">//  配置代码</span></span><br><span class="line"><span class="xml">config: </span><span class="template-variable">&#123;url: &quot;/1111/aaa&quot;, headers: &#123;…&#125;</span><span class="xml">, baseURL: &quot;&quot;, transformRequest: Array(1), transformResponse: Array(1), …&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 获取的html源码</span></span><br><span class="line"><span class="xml">data: &quot;<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>↵<span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>↵<span class="tag">&lt;<span class="name">head</span>&gt;</span>↵<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span>↵<span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span>↵<span class="tag">&lt;/<span class="name">head</span>&gt;</span>↵<span class="tag">&lt;<span class="name">body</span>&gt;</span>↵<span class="tag">&lt;<span class="name">pre</span>&gt;</span>Cannot GET /1111/aaa<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>↵<span class="tag">&lt;/<span class="name">body</span>&gt;</span>↵<span class="tag">&lt;/<span class="name">html</span>&gt;</span>↵&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 会话头</span></span><br><span class="line"><span class="xml">headers: </span><span class="template-variable">&#123;content-security-policy: &quot;<span class="keyword">default</span>-src &#x27;none&#x27;&quot;, x-content-type-options: &quot;nosniff&quot;, connection: &quot;keep-alive&quot;, x-powered-by: &quot;Express&quot;, content-length: &quot;147&quot;, …&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//  请求</span></span><br><span class="line"><span class="xml">request: XMLHttpRequest </span><span class="template-variable">&#123;onreadystatechange: ƒ, readyState: 4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//  会话装状态</span></span><br><span class="line"><span class="xml">status: 404</span></span><br><span class="line"></span><br><span class="line"><span class="xml">//  错误文本</span></span><br><span class="line"><span class="xml">statusText: &quot;Not Found&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>VUE基础：组件之间传值的几个方法</title>
    <url>/posts/c79feebc.html</url>
    <content><![CDATA[<p>一、属性传值，父传子</p>
<p><template>     <!--   父组件 --><br>  <div style="margin-top: 100px"><br>    <child-component v-bind:ddd="ddd"><br>    </child-component><br>  </div><br></template>  </p>
<script>  
import demo1 from './demo1.vue'  
  
export default {  
  name: 'demo',  
  data: function () {  
    return {  
      ddd: '1111'  
    }  
  } }  
</script>

<p><template>    <!--   子组件 --><br>  <div><br>    &lt;p @click=”ccc”&gt;点击我</p><br>  </div><br></template>  </p>
<script>  
  export default {  
    name: 'demo1',  
    props: {  
      ddd: {  
        type: String  
      }  
    },  
    methods: {  
      ccc: function () {  
        console.log(this.ddd)   <!--   会打印该值 -->   
      }  
    }  
  }  
</script>

<p>在多个子组件的关系当中，其中一个子组件有一个方法，在当前组件中，改变了从父组件传过来的值，那么只会影响当前组件的传值值，不会改变其他的组件和父组件的值</p>
<p>二、属性传对象或列表，父传子</p>
<p> props: {         <!--   子组件   具体函数参考上面 --><br>      ddd: {<br>        type:  Object<br>      } </p>
<p>在多个子组件中传对象或列表，如果一个子组件发生了改变，其他的组件也会发生改变</p>
<p>三、事件传值，子传父</p>
<p><demo2 v-bind:ddd="ddd" v-on:zitofu="updatezitofu($event)"> </demo2>            <!--   父组件 --> </p>
<p>methods: {<br>  updatezitofu: function (event) {<br>    console.log(event)      //打印子组件里面值 ‘子向父事件传值’<br>  }<br>},</p>
<p @click="ccc">点击我</p>     <!--   子组件 -->  

<p>methods: {<br>  ccc: function () {<br>    this.$emit(‘zitofu’, ‘子向父事件传值’)<br>  }<br>}</p>
<p>四：兄弟组件之间传值（事件传值）</p>
<p>它是在第三个子传父事件基础上，给父组件绑定一个属性传给兄弟组件，然后用props绑定</p>
<p>五：兄弟元素之间传值（$on和$emit）,新建一个etcjs.js并且vue实例化它</p>
<p>import Vue from ‘vue’       //etc.js<br>export default new Vue()</p>
<p>兄弟组件A，内容如下</p>
<p>import etcjs from ‘./etcjs.js’<br>export default {<br>  name: ‘demo2’,<br>  methods: {<br>    ccc: function () {<br>      etcjs.$emit(‘myfun’, this.shib)<br>    }<br>  }<br>}</p>
<p>兄弟组件B，内容如下</p>
<p>import etcjs from ‘./etcjs’<br>export default {<br>  name: ‘demo1’,<br>  data: function () {<br>    return {<br>      shia: ‘文本1’,<br>    }<br>  },<br>  mounted: function () {<br>    etcjs.$on(‘myfun’, (message) =&gt; {<br>      this.shia = message     //在这里用钩子函数将值绑定到当前组件<br>    })<br>  }<br>}</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>webpack区分多环境方法</title>
    <url>/posts/40a371a0.html</url>
    <content><![CDATA[<p>这个要使用到cross-env插件，先安装一下</p>
<figure class="highlight q"><table><tr><td class="code"><pre><span class="line">npm install --<span class="built_in">save</span>-<span class="built_in">dev</span> <span class="built_in">cross</span>-env</span><br></pre></td></tr></table></figure>

<p>安装完之后，在package.json中这样设置</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack --mode production&quot;</span>,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>当我们运行了npm run dev之后，就可以在Js中这样判断</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">console.<span class="built_in">log</span>(process.env.NODE_ENV);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果如下</span></span><br><span class="line"><span class="comment">// production</span></span><br></pre></td></tr></table></figure>

<p>能设置环境变量以后，可以通过webpack-merge分离多个配置，例如开发、测试和生产环境等等</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> webpack-merge -D</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>WINDOWS7上的GIT工具基本使用方法</title>
    <url>/posts/ce2b7fa9.html</url>
    <content><![CDATA[<p>首次使用设置一下邮箱和用户名 git config –global user.email “<a href="mailto:&#x79;&#x6f;&#117;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;">&#x79;&#x6f;&#117;&#64;&#x65;&#120;&#97;&#x6d;&#x70;&#108;&#101;&#x2e;&#99;&#111;&#x6d;</a>“ git config –global user.name “Your Name”   初始化仓库 git init   添加文件 git add file   提交文件 git commit -m “一段简要说明”   查看被所有被修改过的文件 git status   查看某个文件（对比上次提交时的文件）那些内容被修改 git diff file</p>
<p>$ git diff readme.txt<br>diff –git a/readme.txt b/readme.txt<br>index d8036c1..013b5bc 100644<br>— a/readme.txt<br>+++ b/readme.txt<br>@@ -1,2 +1,2 @@<br>-Git is a version control system.<br>+Git is a distributed version control system.<br>Git is free software.<br>\ No newline at end of file</p>
<p>index d8036c1..013b5bc 100644 两个git版本的哈希值，100表示普通文件，644表示文件权限 @@ -1,2 +1,2 前面是文件被改动前的文本行数区间，后面是被改动后的区间   git log 查看最近提交历史日志  </p>
<p>commit 77dd66fa1aee8843096c3223a6bad99254613e7c (HEAD -&gt; master)<br>Author: witt zoom <a href="mailto:&#x74;&#109;&#x33;&#x33;&#x32;&#x62;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#109;">&#x74;&#109;&#x33;&#x33;&#x32;&#x62;&#64;&#x71;&#x71;&#x2e;&#99;&#111;&#109;</a><br>Date: Wed Jun 5 11:48:57 2019 +0800</p>
<p>second submit</p>
<p>commit a75bea7f4a07dc906afb9aa3fa094b2256a6c589<br>Author: witt zoom <a href="mailto:&#116;&#109;&#51;&#x33;&#50;&#98;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#116;&#109;&#51;&#x33;&#50;&#98;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a><br>Date: Wed Jun 5 11:17:07 2019 +0800</p>
<p>this is the first submit</p>
<p>  git log –pretty=oneline 简要的显示最近提交历史日志   HEAD代表当前版本 HEAD^代表上一个版本 git reset –hard HEAD^ 回滚到指定上一个版本 git reset –hard a75bea7f4a07 回滚到指定版本，不用全写，它会自己寻找   回滚到指定版本，出现无法查看之前提交的版本，可以用git reflog来查看提交的命令历史   可以查看工作区和版本库里面最新版本的区别 git diff HEAD – readme.txt   git checkout – file可以丢弃工作区的修改： <code>$ git checkout -- readme.txt</code> 命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况： 一种是<code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态； 一种是<code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。   用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区   设置远程仓库 git remote add origin <a href="https://github.com/bisansan/demo.git">https://github.com/bisansan/demo.git</a> 推送到远程仓库  git push -u origin master 如果设置出现：fatal: remote origin already exists. 就删除当前设置的远程仓库 git remote rm origin</p>
]]></content>
      <categories>
        <category>soft</category>
        <category>GIT</category>
      </categories>
  </entry>
  <entry>
    <title>zxinc ipv6数据库python3 解析脚本</title>
    <url>/posts/f681aab2.html</url>
    <content><![CDATA[<p>修改了官方的python2解析脚本，让它支持python3，目前没有发生什么问题，可以正常使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2019/9/23 下午3:47</span></span><br><span class="line"><span class="comment"># @Author  : Ryu</span></span><br><span class="line"><span class="comment"># @Site    : </span></span><br><span class="line"><span class="comment"># @File    : aaa.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="keyword">import</span> ipaddress</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> unpack, unpack_from</span><br><span class="line"></span><br><span class="line">NO_IPV4_DB = <span class="string">u&quot;缺少IPv4数据库&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inet_ntoa</span>(<span class="params">number</span>):</span></span><br><span class="line">    addresslist=[]</span><br><span class="line">    addresslist.append((number&gt;&gt;<span class="number">24</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    addresslist.append((number&gt;&gt;<span class="number">16</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    addresslist.append((number&gt;&gt;<span class="number">8</span>)&amp;<span class="number">0xff</span>)</span><br><span class="line">    addresslist.append(number&amp;<span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;.&quot;</span>.join(<span class="string">&quot;%d&quot;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> addresslist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inet_ntoa6</span>(<span class="params">number</span>):</span></span><br><span class="line">    addresslist = []</span><br><span class="line">    addresslist.append((number &gt;&gt; <span class="number">48</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    addresslist.append((number &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    addresslist.append((number &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)</span><br><span class="line">    addresslist.append(number &amp; <span class="number">0xffff</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;:&quot;</span>.join(<span class="string">&quot;%04X&quot;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> addresslist) + <span class="string">&quot;::&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">find_ip_db</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">       <span class="comment"># 这里是数据库文件路径</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;ipv6wry.db&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.ip_db = f</span><br><span class="line">            self.ip_db_read = f.read()</span><br><span class="line">        self.indexCount = self.getLong8(<span class="number">8</span>)</span><br><span class="line">        self.firstIndex = self.getLong8(<span class="number">16</span>)</span><br><span class="line">        self.offlen = self.getLong8(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLong8</span>(<span class="params">self, offset=<span class="number">0</span>, size=<span class="number">8</span></span>):</span></span><br><span class="line">        s = self.ip_db_read[offset: offset + size]</span><br><span class="line">        s += <span class="string">b&quot;\0\0\0\0\0\0\0\0&quot;</span></span><br><span class="line">        <span class="keyword">return</span> unpack_from(<span class="string">&quot;Q&quot;</span>, s)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getString</span>(<span class="params">self, offset=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 读取字符串信息，包括&quot;国家&quot;信息和&quot;地区&quot;信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        QQWry.Dat的记录区每条信息都是一个以&quot;\0&quot;结尾的字符串&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        o2 = self.ip_db_read.find(<span class="string">b&quot;\0&quot;</span>, offset)</span><br><span class="line">        <span class="comment"># 有可能只有国家信息没有地区信息，</span></span><br><span class="line">        gb_str = self.ip_db_read[offset:o2]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            utf8_str = gb_str.decode()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">u&quot;未知数据&quot;</span></span><br><span class="line">        <span class="keyword">return</span> utf8_str</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAreaAddr</span>(<span class="params">self, offset=<span class="number">0</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 通过给出偏移值，取得区域信息字符串，&quot;&quot;&quot;</span></span><br><span class="line">        self_img = self.ip_db_read[offset]</span><br><span class="line">        <span class="comment"># self.img[1]</span></span><br><span class="line"></span><br><span class="line">        byte = self_img</span><br><span class="line">        <span class="keyword">if</span> byte == <span class="number">1</span> <span class="keyword">or</span> byte == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 第一个字节为1或者2时，取得2-4字节作为一个偏移量调用自己</span></span><br><span class="line">            p = self.getLong8(offset + <span class="number">1</span>, self.offlen)</span><br><span class="line">            <span class="keyword">return</span> self.getAreaAddr(p)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getString(offset)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAddr</span>(<span class="params">self, offset, ip=<span class="number">0</span></span>):</span></span><br><span class="line">        img = self.ip_db_read</span><br><span class="line">        o = offset</span><br><span class="line">        byte = img[o]</span><br><span class="line">        <span class="keyword">if</span> byte == <span class="number">1</span>:</span><br><span class="line">            <span class="comment"># 重定向模式1</span></span><br><span class="line">            <span class="comment"># [IP][0x01][国家和地区信息的绝对偏移地址]</span></span><br><span class="line">            <span class="comment"># 使用接下来的3字节作为偏移量调用字节取得信息</span></span><br><span class="line">            <span class="keyword">return</span> self.getAddr(self.getLong8(o + <span class="number">1</span>, self.offlen))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 重定向模式2 + 正常模式</span></span><br><span class="line">            <span class="comment"># [IP][0x02][信息的绝对偏移][...]</span></span><br><span class="line">            cArea = self.getAreaAddr(o)</span><br><span class="line">            <span class="keyword">if</span> byte == <span class="number">2</span>:</span><br><span class="line">                o += <span class="number">1</span> + self.offlen</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                o = self.ip_db_read.find(<span class="string">b&quot;\0&quot;</span>, o) + <span class="number">1</span></span><br><span class="line">            aArea = self.getAreaAddr(o)</span><br><span class="line">            <span class="keyword">return</span> (cArea, aArea)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">self, ip, fisrt, end</span>):</span></span><br><span class="line">        <span class="keyword">if</span> end - fisrt &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> fisrt</span><br><span class="line">        m = <span class="built_in">int</span>((fisrt + end) / <span class="number">2</span>)</span><br><span class="line">        o = self.firstIndex + m * (<span class="number">8</span> + self.offlen)</span><br><span class="line">        new_ip = self.getLong8(o)</span><br><span class="line">        <span class="keyword">if</span> ip &lt; new_ip:</span><br><span class="line">            <span class="keyword">return</span> self.find(ip, fisrt, m)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(ip, m, end)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_ip_address</span>(<span class="params">self, ip, i4obj=<span class="literal">None</span></span>):</span></span><br><span class="line">        ip6 = <span class="built_in">int</span>(ipaddress.IPv6Address(ip))</span><br><span class="line">        ip = (ip6 &gt;&gt; <span class="number">64</span>) &amp; <span class="number">0xFFFFFFFFFFFFFFFF</span></span><br><span class="line">        i = self.find(ip, <span class="number">0</span>, self.indexCount)</span><br><span class="line">        o = self.firstIndex + i * (<span class="number">8</span> + self.offlen)</span><br><span class="line">        o2 = self.getLong8(o + <span class="number">8</span>, self.offlen)</span><br><span class="line">        (c, a) = self.getAddr(o2)</span><br><span class="line">        (cc, aa) = (c, a)</span><br><span class="line">        i1 = inet_ntoa6(self.getLong8(o))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            i2 = inet_ntoa6(self.getLong8(o + <span class="number">8</span> + self.offlen) - <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            i2 = <span class="string">&quot;FFFF:FFFF:FFFF:FFFF::&quot;</span></span><br><span class="line">        <span class="keyword">if</span> ip6 == <span class="number">0x1</span>:  <span class="comment"># 本机地址</span></span><br><span class="line">            i1 = <span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span></span><br><span class="line">            i2 = <span class="string">&quot;0:0:0:0:0:0:0:1&quot;</span></span><br><span class="line">            c = cc = <span class="string">u&quot;本机地址&quot;</span></span><br><span class="line">        <span class="keyword">elif</span> ip == <span class="number">0</span> <span class="keyword">and</span> ip6 &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xFFFFFFFF</span> == <span class="number">0xFFFF</span>:  <span class="comment"># IPv4映射地址</span></span><br><span class="line">            realip = (ip6 &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">            realipstr = inet_ntoa(realip)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                (_, _, realiploc, cc, aa) = i4obj.getIPAddr(realip)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                realiploc = NO_IPV4_DB</span><br><span class="line">            i1 = <span class="string">&quot;0:0:0:0:0:FFFF:0:0&quot;</span></span><br><span class="line">            i2 = <span class="string">&quot;0:0:0:0:0:FFFF:FFFF:FFFF&quot;</span></span><br><span class="line">            c = <span class="string">u&quot;IPv4映射地址&quot;</span></span><br><span class="line">            a = a + <span class="string">u&quot;&lt;br/&gt;对应的IPv4地址为&quot;</span> + realipstr + <span class="string">u&quot;，位置为&quot;</span> + realiploc</span><br><span class="line">        <span class="keyword">elif</span> ip &gt;&gt; <span class="number">48</span> &amp; <span class="number">0xFFFF</span> == <span class="number">0x2002</span>:  <span class="comment"># 6to4</span></span><br><span class="line">            realip = (ip &amp; <span class="number">0x0000FFFFFFFF0000</span>) &gt;&gt; <span class="number">16</span></span><br><span class="line">            realipstr = inet_ntoa(realip)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                (_, _, realiploc, cc, aa) = i4obj.getIPAddr(realip)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                realiploc = NO_IPV4_DB</span><br><span class="line">            a = a + <span class="string">u&quot;&lt;br/&gt;对应的IPv4地址为&quot;</span> + realipstr + <span class="string">u&quot;，位置为&quot;</span> + realiploc</span><br><span class="line">        <span class="keyword">elif</span> ip &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xFFFFFFFF</span> == <span class="number">0x20010000</span>:  <span class="comment"># teredo</span></span><br><span class="line">            serverip = (ip &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">            serveripstr = inet_ntoa(serverip)</span><br><span class="line">            realip = (~ip6 &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">            realipstr = inet_ntoa(realip)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                (_, _, serveriploc, cc, aa) = i4obj.getIPAddr(serverip)</span><br><span class="line">                (_, _, realiploc, _, _) = i4obj.getIPAddr(realip)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                serveriploc = NO_IPV4_DB</span><br><span class="line">                realiploc = NO_IPV4_DB</span><br><span class="line">            a = a + <span class="string">u&quot;&lt;br/&gt;Teredo服务器的IPv4地址为&quot;</span> + serveripstr + <span class="string">u&quot;，位置为&quot;</span> + serveriploc</span><br><span class="line">            a = a + <span class="string">u&quot;&lt;br/&gt;客户端真实的IPv4地址为&quot;</span> + realipstr + <span class="string">u&quot;，位置为&quot;</span> + realiploc</span><br><span class="line">        <span class="keyword">elif</span> ip6 &gt;&gt; <span class="number">32</span> &amp; <span class="number">0xFFFFFFFF</span> == <span class="number">0x5EFE</span>:  <span class="comment"># isatap</span></span><br><span class="line">            realip = (ip6 &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">            realipstr = inet_ntoa(realip)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                (_, _, realiploc, _, _) = i4obj.getIPAddr(realip)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                realiploc = NO_IPV4_DB</span><br><span class="line">            a = a + <span class="string">u&quot;&lt;br/&gt;ISATAP地址，对应的IPv4地址为&quot;</span> + realipstr + <span class="string">u&quot;，位置为&quot;</span> + realiploc</span><br><span class="line">        <span class="keyword">return</span> i1, i2, c + <span class="string">u&quot; &quot;</span> + a, cc, aa</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(find_ip_db().find_ip_address(<span class="string">&#x27;2409:894c:c38:7f65:a413:9f69:2810:9d6a&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>七年级数学上  笔记</title>
    <url>/posts/55bc568a.html</url>
    <content><![CDATA[<p>1.有理数：正负整数，有限位的正负小数（0.012,-0.23）,整数循环小数（0.123123123……..,-0.341341341……….）</p>
<p>2.无理数：正负无限不循环小数，例如圆周率π</p>
<p>3.整式：通常指的是一个表达式</p>
<p>单项式：它分别有系数和单项式的次数</p>
<p><img src="https://post.332b.com/wp-content/uploads/2019/11/20191113165345.png"></p>
<p>多项式：x ² +4x ³ +6这里的每一项都称为项，分别是 x ² ， 4x ³ ， 6 ；常数项为4，-6；多项式的次数是这里最高的次数3，</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>一个关于循环的小练习</title>
    <url>/posts/76daf114.html</url>
    <content><![CDATA[<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">import <span class="built_in">math</span></span><br><span class="line">s = <span class="number">5</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(s):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;*&quot;</span>*(x+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(s):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*(s-(x+<span class="number">1</span>))+(<span class="string">&quot;*&quot;</span>*(x+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"># <span class="built_in">ceil</span> 向上取整数</span><br><span class="line"># <span class="built_in">floor</span> 向下取整数</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="built_in">math</span>.<span class="built_in">ceil</span>(s/<span class="number">2</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*(<span class="built_in">math</span>.<span class="built_in">floor</span>(s/<span class="number">2</span>)-x)+(<span class="string">&quot;*&quot;</span>*(x+<span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="built_in">math</span>.<span class="built_in">ceil</span>(s/<span class="number">2</span>)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*(<span class="built_in">math</span>.<span class="built_in">floor</span>(s/<span class="number">2</span>)-x)+(<span class="string">&quot;*&quot;</span>*((x*<span class="number">2</span>)+<span class="number">1</span>)))</span><br></pre></td></tr></table></figure>

<p>出来后的效果</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 效果一</span></span><br><span class="line"><span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"><span class="strong">**</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**</span>*</span></span><br><span class="line"><span class="strong">****</span></span><br><span class="line"><span class="strong">****</span><span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"># 效果二</span></span><br><span class="line"><span class="emphasis">    *</span></span><br><span class="line">   <span class="strong">**</span></span><br><span class="line"><span class="strong">  **</span><span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> <span class="strong">****</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">****</span>*</span></span><br><span class="line"><span class="section"># 效果三</span></span><br><span class="line">  <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> <span class="strong">**</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**</span>*</span></span><br><span class="line"><span class="section"># 效果四</span></span><br><span class="line">  <span class="emphasis">*</span></span><br><span class="line"><span class="emphasis"> <span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis"><span class="strong">****</span>*</span></span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码编程</category>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>不支持过渡的属性的标签</title>
    <url>/posts/c7398508.html</url>
    <content><![CDATA[<p>有以下属性参与过渡</p>
<p>color<br>visibility<br>opacity<br>vertical-align<br>z-index<br>clip<br>width /height<br>top / bottom / left / right<br>background-color / position<br>border-top /bottom/ left / right-color / width<br>border / letter / word-spacing<br>font-size / weight<br>line-height<br>margin / padding-top /bottom/left/right<br>max/min-height/width<br>outline-color/width<br>text-indent/shadow</p>
]]></content>
      <categories>
        <category>HTML和CSS</category>
      </categories>
  </entry>
  <entry>
    <title>代码版本管理：GIT的基本操作</title>
    <url>/posts/6ce3e36c.html</url>
    <content><![CDATA[<p>根据你的邮箱创建一个管理秘钥 ssh-keygen -t rsa -C “<a href="mailto:&#49;&#x32;&#51;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;">&#49;&#x32;&#51;&#64;&#x71;&#x71;&#46;&#99;&#111;&#x6d;</a>“</p>
<p>配置你本地的邮箱 git config –global user.email “<a href="mailto:&#x79;&#x6f;&#x75;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x79;&#x6f;&#x75;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>”</p>
<p>配置你本地的用户名 git config –global user.name “Your Name”</p>
<p>初始化当前目录为代码仓库 git init</p>
<p>添加一个仓库 git remote add demo <a href="https://e.coding.net/t/start.git">https://e.coding.net/t/start.git</a></p>
<p>切换到当前分支 git checkout master</p>
<p>允许不相关的历史提交，就不会报错 git pull origin master –allow-unrelated-histories</p>
<p>提交当前代码master分支 git push origin master</p>
<p>第一次推送master分支的所有内容，如果不是第一次可以去掉U git push -u origin master</p>
<p>git Stashing（冻结和暂存）</p>
<p>查看暂存列表：git stash list</p>
<p>移除某个暂存： git stash drop [name]</p>
<p>恢复某个暂存：git stash apply [name] （ 这个不会删除暂存 ） git stash pop [name] （这个会删除对应的暂停）</p>
<p>fatal: refusing to <a href="https://www.centos.bz/tag/merge/">merge</a> unrelated histories <a href="https://www.centos.bz/2018/03/git-%E5%87%BA%E7%8E%B0-fatal-refusing-to-merge-unrelated-histories-%E9%94%99%E8%AF%AF/">https://www.centos.bz/2018/03/git-出现-fatal-refusing-to-merge-unrelated-histories-错误/</a></p>
]]></content>
      <categories>
        <category>soft</category>
        <category>GIT</category>
      </categories>
  </entry>
  <entry>
    <title>初级小白向bios添加cpu的辛酸史</title>
    <url>/posts/a90e412e.html</url>
    <content><![CDATA[<p>我太难了，这么多教程看来看去，每个教程不是这里缺点东西，就是那里缺点东西，看来看去真的很闹心，所以我就想写个总结教程，不用找点东西找来找去</p>
<p>想修改bios，就得先准备工具</p>
<p>1.提取机器bios工具和驱动程序</p>
<p>ch341a编程器，淘宝有卖的，记得要买免拆架子</p>
<p>ch341a硬件驱动和提取软件，下面是下载链接</p>
<p><a href="http://www.downcc.com/soft/20312.html">http://www.downcc.com/soft/20312.html</a></p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200211181332.png"></p>
<p>2.bios修改工具UBU</p>
<p>官网：<a href="https://www.win-raid.com/t154f16-Tool-Guide-News-quot-UEFI-BIOS-Updater-quot-UBU.html">https://www.win-raid.com/t154f16-Tool-Guide-News-quot-UEFI-BIOS-Updater-quot-UBU.html</a></p>
<p>3.微码文件</p>
<p>微码数据库 Linux-Processor-Microcode-Data-File</p>
<p><a href="https://downloadcenter.intel.com/download/27591/Linux-Processor-Microcode-Data-File">https://downloadcenter.intel.com/download/27591/Linux-Processor-Microcode-Data-File</a></p>
<p>先说下贴主的机器是hp 800 g1，支持intel四代处理器，主板为q87，bios备份后为16m，楼主想给机器用上魔改后的lga 1150 cpu，以及给bios加上nvem驱动，下面贴主就开动了</p>
<p>一、利用ch341提取机器的bios.bin，直接参考百度，大概步骤就是，</p>
<p>1.拆机先找到bios的flash芯片</p>
<p>2.用夹子夹住芯片</p>
<p>3.用对应的编程软件读取Biso，然后保存到桌面为bios.bin</p>
<p>二、下载cpu微码，并找出对应的cpu微码文件</p>
<p>1.下载cpu微码文件后解压后得到数据文件microcode.dat</p>
<p>2.microdecode.exe解压微码数据文件，解压后会得到很多文件，文件排序如下</p>
<p>文件名： cpu0001067a_plat00000044_ver00000a0b_date20100928.bin</p>
<p>结构对照： cpu+CPUID+_plat+Platform+_ver+Version+_date+Date+.bin</p>
<p>3.找出自己想添加cpu对应的微码文件</p>
<p>微软cpuid参考表：</p>
<p><a href="https://support.microsoft.com/zh-cn/help/4346084/kb4346084-intel-microcode-updates">https://support.microsoft.com/zh-cn/help/4346084/kb4346084-intel-microcode-updates</a></p>
<p>参考微软官方的微码cpuid，得出我想添加的i7-4870hq的cpuid为40661 ,我就找到了对应的文件是cpu000<strong>40661</strong>_plat00000032_ver00000019_date20180121.bin</p>
<p>三、准备好微码文件后，我们先将nvme模块添加到Bios，然后再添加微码</p>
<p>1.我们先将nvme按图片上的操作将nvme模块插入到bios中</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214170051-1024x882.png"></p>
<p>2.按图片检查nvme模块是否插入成功</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214170810-1024x587.png"></p>
<p>四、将微码文件添加Bios中，准备打卡UBU文件工具，我用的是1.76版本</p>
<p>1.打卡ubu工具选择这个</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214171404.png"></p>
<p>2.解压bios自带的所有微码</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214171542.png"></p>
<p>3.一般解压文件在当前软件目录/Extracted/Intel，我们打开后会看到一个或多个文件，他们全是都是微码文件，现在我们要把主板自带和需要添加的微码文件进行合并，合并后，再替换bios的微码库，就可以支持我们想要支持的cpu了，现在开动</p>
<p>我们先将准备好的微码文件和bios解压后文件放在一起，cmd进入当前目录，使用 copy /b 微码文件1 + 微码文件2 = 合并文件 来生成，例如，下面的命令</p>
<p>copy /b cpu_file1.bin + cpu_file3.bin + cpu_file3.bin = done.bin</p>
<p>4.生成微码文件后，点击这里选择合并后的文件进行替换</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214172741.png"></p>
<p>5.替换完后，按0进入主菜单，再选择0 EXIT，再选择Rename to mod_bios.bin，就会生成修改后的bios文件</p>
<p><img src="https://post.332b.com/wp-content/uploads/2020/02/20200214173054.png"></p>
<p>到这里，整个教程就完了，得到修改后的bios文件后，可以直接刷入机器使用</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>完整的配置一个linux的前段开发gulp环境</title>
    <url>/posts/f47af58d.html</url>
    <content><![CDATA[<p>linux 地址：<a href="https://github.com/creationix/nvm">https://github.com/creationix/nvm</a> windows下载：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> 执行命令curl</p>
<p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh">https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh</a>  bash</p>
<p>or Wget:</p>
<p>wget -qO- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh">https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh</a>  bash</p>
<p>注意：如果无法执行，请用安装wget和curl工具 安装完后重启一下就可以执行nvm命令，执行下面命令是全局 <code>export NVM_DIR=&quot;$&#123;XDG_CONFIG_HOME/:-$HOME/.&#125;nvm&quot;</code> <code>[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot; # This loads nvm</code>   查看所有node版本（推荐6.4版本）：<a href="https://nodejs.org/zh-cn/download/releases/">https://nodejs.org/zh-cn/download/releases/</a> <code>nvm install 6.17.1</code> <code>nvm use 6.17.1</code> 接下来就可以用npm安装包了,下面是我的配置文件 <a href="https://post.332b.com/wp-content/uploads/2019/04/gulp.zip">gulp.zip</a></p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>JavaScript</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>前端插件：3款ajax请求插件</title>
    <url>/posts/b207b5ae.html</url>
    <content><![CDATA[<p>1.superagent 20KB</p>
<p><a href="https://github.com/visionmedia/superagent">https://github.com/visionmedia/superagent</a></p>
<p>支持浏览器ie9+,chrome,火狐,安卓4.4.4+,safari</p>
<p>2.axios 14kb</p>
<p><a href="https://github.com/axios/axios">https://github.com/axios/axios</a></p>
<p>支持浏览器ie9+,chrome,火狐,safari</p>
<p>IE9有兼容性问题，建议百度找相关办法处理</p>
<p>3.jquery 60KB</p>
<p><a href="https://github.com/jquery/jquery">https://github.com/jquery/jquery</a></p>
<p>支持浏览器ie,chrome,火狐,safari 兼容性最好</p>
<p>为什么只有60kb，单独的ajax组件就是这么大，需要自己编译哦</p>
<p>定制参考这篇文章： <a href="https://www.cnblogs.com/snandy/p/3530883.html">https://www.cnblogs.com/snandy/p/3530883.html</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>手机来电和短信转移和短信中心设置大全</title>
    <url>/posts/39a2732a.html</url>
    <content><![CDATA[<p>来电转移，将来电转移到另外一个号码，费用一般按0.2元或者0.1元一分钟来收取，座机加区号<br>A:无条件转移： 任何状态下直接将所有来电转接到另外一个号码</p>
<p>移动和联通：<strong>21_电话号码#     取消转移：##21#     示例：_</strong>_21_13812345678#</p>
<p>电信：_72电话号码　　　取消：_720        示例：*7213812345678</p>
<p>B:关机/无信号/不可及转移：关机或者无信号状态下将来电转移到另外一个号码</p>
<p>移动和联通：<strong>62_电话号码#     取消：##62#       示例：_</strong>_62_13812345678#</p>
<p>电信：_68电话号码      取消：_680    示例：*6813812345678</p>
<p>C:遇忙转移：通话过程中状态遇急事挂断电话后转移到另外一个号码</p>
<p>移动和联通：<strong>67_电话号码#     取消：##67#       示例：_</strong>_67_13812345678#</p>
<p>电信：_90电话号码        取消：_900              示例：*9013812345678</p>
<p>D:无应答转移：没有接听状态下的电话（未接来电）转移到另外一个号码</p>
<p>移动和联通：<strong>61_电话号码#      取消：##61#       示例：_</strong>_61_13812345678#</p>
<p>电信：_92电话号码        取消：_920           示例：*9213812345678</p>
<p>注意：移动还可以可以这样设置：<strong>61*电话号码</strong>响铃时间#，响铃时间不能大于30秒</p>
<p>E:取消全部呼叫转移办法：移动和联通：##002#      电信：*730</p>
<p>所有的操作最后必须按手机的确认键（一般为呼叫键）激活</p>
<p>短信中心号码：一般是发送短信需要的，一般不用设置<br>移动： +861380区号500      例如上海：+8613800210500  烟台：13800535500</p>
<p>联通：短信中心号码请直接拨打10010询问，他们的短信中心号码太多无规律</p>
<p>电信：无需设置</p>
<p>苹果手机设置方法：</p>
<p>设置：<em>5005_7672_短信中心号码#     查询：</em>#5005_7672#        删除：##5005_7672#</p>
<p>其他手机直接在短信设置中查找</p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>用KMS密钥来激活自己的Windows和Office</title>
    <url>/posts/cdddeb77.html</url>
    <content><![CDATA[<p>先要找到对面的KEY：<a href="https://technet.microsoft.com/en-us/library/jj612867.aspx">https://technet.microsoft.com/en-us/library/jj612867.aspx</a></p>
<p>然后用管理员权限运行CMD，依次输入命令</p>
<p>Windows系统激活命令<br>slmgr.vbs -upk</p>
<p>slmgr.vbs -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</p>
<p>这里填入你对应的key</p>
<p>slmgr.vbs -skms kms.dwhd.org</p>
<p>这里填入对应的KMS服务器地址，没有请自己百度找</p>
<p>slmgr.vbs -ato</p>
<p>slmgr.vbs -dlv</p>
<p>Office激活命令<br>1.使用 命令提示符（CMD）管理员模式 执行命令(若Office安装在其他盘符，请自行将C改为对应盘符)<br>cd “C:Program FilesMicrosoft OfficeOffice14” 【Office2010】<br>cd “C:Program FilesMicrosoft OfficeOffice15” 【Office2013】<br>cd “C:Program FilesMicrosoft OfficeOffice16” 【Office2016】</p>
<p>2.执行命令设置Office的KMS服务器地址</p>
<p>cscript ospp.vbs /sethst:kms.chinancce.com</p>
<p>3.执行命令激活Office</p>
<p>cscript ospp.vbs /act</p>
<p>4.(可选)执行命令查询Office激活时间</p>
<p>cscript ospp.vbs /dstatus</p>
<p>Windows 10系统自动激活程序下载，3KB大小2017年9月份亲测可用    </p>
<p>下载地址：Win10_KMS_Activation<a href="http://post.332b.com/usr/uploads/2018/03/3058077553.zip">Win10_KMS_Activation.zip</a></p>
]]></content>
      <categories>
        <category>技术教程</category>
      </categories>
      <tags>
        <tag>kms激活</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯云Ubuntu 18.04 监控工具zabbix安装方法</title>
    <url>/posts/889db087.html</url>
    <content><![CDATA[<p>使用Ubuntu能最大的节省我们的时间，将最大的时间放在业务上，研究那些开源安装方法实在太折腾人了，这里使用的是官方推荐的源，然后结合宝塔面板一起使用，方便软件管理和后期升级！   1、先将服务器软件更新到最新 sudo apt update sudo apt upgrade   2.安装zabbix后端服务器 wget <a href="https://repo.zabbix.com/zabbix/4.2/ubuntu/pool/main/z/zabbix-release/zabbix-release/_4.2-1+bionic/_all.deb">https://repo.zabbix.com/zabbix/4.2/ubuntu/pool/main/z/zabbix-release/zabbix-release\_4.2-1+bionic\_all.deb</a> sudo dpkg -i zabbix-release_4.2-1+bionic_all.deb sudo apt update #这里放弃安装zabbix-frontend-php，使用宝塔面板来管理前端界面，简化我们的管理操作 sudo apt -y install zabbix-server-mysql zabbix-agent   3.安装宝塔面板 wget -O install.sh <a href="http://download.bt.cn/install/install-ubuntu/_6.0.sh">http://download.bt.cn/install/install-ubuntu\_6.0.sh</a> &amp;&amp; sudo bash install.sh # 安装完后，一定要保存好控制台上的信息，可以保存在电脑文件里 <img src="https://post.332b.com/wp-content/uploads/2019/06/20190604161102.png"> #请自己登陆后台，安装好apache和php，不要安装mysql，因为已经zabbix自己已经安装了，再安装会冲突   4.导入数据库文件 重置mysql数据库root密码参考：<a href="https://www.cnblogs.com/roadofstudy/p/7446690.html">https://www.cnblogs.com/roadofstudy/p/7446690.html</a> # mysql -uroot -p mysql&gt; create database zabbix character set utf8 collate utf8_bin; mysql&gt; grant all privileges on zabbix.* to zabbix@localhost identified by ‘设置zabbix数据密码’; mysql&gt; quit;   数据库文件获取参考第6步，在解压后的database\mysql目录 数据导入命令：mysql -u root -p zabbix &lt; schema.sql 可以这样导入数据库 依次导入 schema.sql 》 images.sql 》data.sql   编辑 /etc/zabbix/zabbix_server.conf，找到下面这行取消注释填入你的密码 <code>DBPassword=password</code>   5.启动zabbix后端 systemctl restart zabbix-server zabbix-agent      #重新启动 systemctl enable zabbix-server zabbix-agent     #开机自启 systemctl status zabbix-server.service      #查看服务启动状态 如果启动失败，可以查看/var/log/zabbix/zabbix_server.log，根据log来处理相应的错误   6.安装前台 下载开源zabbix：<a href="https://www.zabbix.com/download/_sources">https://www.zabbix.com/download\_sources</a> 解压后找到frontends/php上传到网站根目录， 数据库选项和上面填填一样，数据库名和用户名也是zabbix 后台默认登陆密码是Admin，密码zabbix   小问题总结 ？zabbix后台管理不能选中文 需要安装中文环境，最少要选择zh_CN utf-8 utf-8 sudo dpkg-reconfigure locales</p>
]]></content>
      <categories>
        <category>主机系统</category>
        <category>ubuntu</category>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>简单的玩一下MYSQL 8.0</title>
    <url>/posts/47070840.html</url>
    <content><![CDATA[<p>创建一个数据库，并设置编码为utf-8 mb4</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> <span class="symbol">`demo_1`</span> DEFAULT CHARACTER <span class="keyword">SET</span> utf8mb4 ;</span><br></pre></td></tr></table></figure>

<p>在这个数据库底下创建一个new_table表，并设置三个字段分别为id、name、age和bron_date，id设为主键</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TABLE <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> (</span><br><span class="line">  <span class="symbol">`id`</span> INT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`name`</span> VARCHAR(<span class="number">255</span>) <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`age`</span> INT <span class="literal">NULL</span>,</span><br><span class="line">  <span class="symbol">`bron_data`</span> DATE <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> <span class="keyword">KEY</span> (<span class="symbol">`id`</span>));</span><br></pre></td></tr></table></figure>

<p>接下来是新增两条数据试试</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`age`</span>, <span class="symbol">`bron_data`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;fan&#x27;</span>, <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;1994-05-06&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> (<span class="symbol">`id`</span>, <span class="symbol">`name`</span>, <span class="symbol">`age`</span>, <span class="symbol">`bron_data`</span>) <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;34&#x27;</span>, <span class="string">&#x27;1996-05-07&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>新增了这些数据之后，不满意想修改</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> <span class="keyword">SET</span> <span class="symbol">`age`</span> = <span class="string">&#x27;22&#x27;</span>, <span class="symbol">`bron_data`</span> = <span class="string">&#x27;1992-05-07&#x27;</span> <span class="keyword">WHERE</span> (<span class="symbol">`id`</span> = <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> <span class="keyword">SET</span> <span class="symbol">`age`</span> = <span class="string">&#x27;20&#x27;</span>, <span class="symbol">`bron_data`</span> = <span class="string">&#x27;1998-08-12&#x27;</span> <span class="keyword">WHERE</span> (<span class="symbol">`id`</span> = <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>现在我不想要这些数据了，我要把他们删除了</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> <span class="keyword">WHERE</span> (<span class="symbol">`id`</span> = <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="symbol">`demo_1`</span>.<span class="symbol">`new_table`</span> <span class="keyword">WHERE</span> (<span class="symbol">`id`</span> = <span class="string">&#x27;1&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>群晖 mysql8主主同步设置方法</title>
    <url>/posts/ddfd5a8e.html</url>
    <content><![CDATA[<h2 id="群晖-mysql8主主同步设置方法"><a href="#群晖-mysql8主主同步设置方法" class="headerlink" title="群晖 mysql8主主同步设置方法"></a>群晖 mysql8主主同步设置方法</h2><p>1.设置docker路径映射</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217174504.png"></p>
<p>2.设置环境变量</p>
<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217174648.png"></p>
<p>配置文件1</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>3.进入容器执行命令</p>
<p>显示所有在用的容器</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217175009.png"></p>
<p>进入容器执行命令</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> exec -it ccaf<span class="number">2</span>b<span class="number">85392</span>e bash</span><br></pre></td></tr></table></figure>

<p>进入mysql执行命令</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mysql -u root -<span class="selector-tag">p</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217175230.png"></p>
<p>创建同步使用的用户名和账户</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;sync&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;sync6123510&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>赋予账号同步权限</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">REPLICATION</span> SLAVE,<span class="keyword">REPLICATION</span> CLIENT <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;sync&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>刷新数据库权限</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">flush privileges<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>显示server_id同步id，每个数据库id必须不一样</p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">show <span class="keyword">variables</span> like <span class="comment">&#x27;server_id&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217175616.png"></p>
<p>查看mysql的master状态，注意图中的File和Position所对应的值</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">SHOW <span class="keyword">MASTER</span> <span class="title">STATUS</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217175834.png"></p>
<p>在另一台服务器上进入mysql执行界面后，添加上面这个数据的连接方式</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">    -&gt; <span class="attribute">MASTER_HOST</span>=<span class="string">&#x27;114.114.114.114&#x27;</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_USER</span>=<span class="string">&#x27;sync&#x27;</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_PASSWORD</span>=<span class="string">&#x27;sync123&#x27;</span>,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_LOG_FILE</span>=<span class="string">&#x27;mysql-bin.000003&#x27;</span>,</span><br><span class="line">    -&gt; <span class="attribute">master_port</span>=6306,</span><br><span class="line">    -&gt; <span class="attribute">MASTER_LOG_POS</span>=848;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.93 sec)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//QQ0201217180311.png"></p>
<p>启动同步</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="literal">start</span> <span class="literal">slave</span>;</span><br></pre></td></tr></table></figure>

<p>查看同步状态</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> slave <span class="built_in">status</span>\G</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217180859.png"></p>
<p>连接失败重置一下slave</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"><span class="literal">stop</span> <span class="literal">slave</span>;</span><br><span class="line"></span><br><span class="line">reset <span class="literal">slave</span>;</span><br><span class="line"></span><br><span class="line"><span class="literal">start</span> <span class="literal">slave</span>;</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/wittzhang/pic332b/raw/master/img//20201217182049.png"></p>
<p>给同步账号提升账号权限</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">&#x27;sync&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line">flush <span class="keyword">privileges</span>;</span><br><span class="line">stop slave;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure>

<p>检查master设置，如果错误就修改</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span> <span class="attribute">MASTER_LOG_FILE</span>=<span class="string">&#x27;mysql-bin.000002&#x27;</span>,MASTER_LOG_POS=155;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>解决用户使用chrome或360极速浏览器网页翻译，导致vue.js双向绑定失效</title>
    <url>/posts/f6261e9d.html</url>
    <content><![CDATA[<p><code>&lt;meta name=&quot;google&quot; content=&quot;notranslate&quot; /&gt;</code></p>
<p>在网页头加入这一行，chrome浏览器就不会默认自动翻译当前网页，需要用户手动去点击翻译，就不会导致双向绑定失效</p>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>达内账号密码</title>
    <url>/posts/712132c0.html</url>
    <content><![CDATA[<p><a href="mailto:&#52;&#49;&#52;&#53;&#48;&#x31;&#55;&#53;&#49;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;">&#52;&#49;&#52;&#53;&#48;&#x31;&#55;&#53;&#49;&#x40;&#x71;&#113;&#x2e;&#99;&#x6f;&#109;</a> sai198257 <a href="http://www.tmooc.cn/web/index_new.html?tedu">http://www.tmooc.cn/web/index_new.html?tedu</a></p>
]]></content>
      <categories>
        <category>技术分享</category>
      </categories>
  </entry>
  <entry>
    <title>酷比魔方power M3官方救砖线刷包和GAPP卡刷包</title>
    <url>/posts/447c13cc.html</url>
    <content><![CDATA[<p>文件包含最新系统镜像，官方救砖线刷包，GAPP卡刷包<br>最新GAPP卡刷包获取：<a href="http://opengapps.org/">http://opengapps.org/</a></p>
<p>驱动安装：<br>1.WIN7_WINXP系统安装方法：进入“驱动”-“Driver_Auto_Installer”下的“WIN7_WINXP目录”，点击 安装<br>2.WIN8系统安装方法：进入“驱动”-“Driver_Auto_Installer”下的“WIN8”目录，点击 安装<br>3.WIN10系统安装驱动方法：进入“驱动”-“Driver_Auto_Installer”下“WIN10”目录，点击“Mediatek-Drivers-Install.bat”安装，遇到提示“#### Press any key to continue ####”，按键盘任意键继续即可。<br>系统安装方法安装无效情况解决办法，打开系统的设备管理器平板关机或者断电，经由usb数据线连接电脑，此时【设备管理器】中就会出现一个黄颜色感叹号的设备(一般此设备的名称为MTxxxx Preloader,或者直接显示为未知设备)<br>二、 MTK（SP_MDT_exe）单路工具设置以及刷机过程：<br>单路工具的设置：进入“升级工具”-“ SP_Flash_Tool_v5.1724_Win”目录下运行flash_tool.exe程序<br>注意：这个黄颜色感叹号的设备很快就会消失，如果来不及进行下面的安装驱动操作，请拔掉usb数据线，将平板断电关机，再重新由usb数据线，出现黄色感叹号设备后继续下面的操作（如果一直是来不及安装或者平板出现充电图标，请尝试更换usb线或者更换电脑端的usb口连接）<br>右键点击改黄色感叹号设备，选择更新驱动软件，浏览计算机以查找驱动程序软件，浏览定位（勾选包括子文件夹）到“驱动”文件夹下的“SP_Drivers_EXE”，然后再进行<br>链接: <a href="https://pan.baidu.com/s/1_UZ72_VXsgM3sItZnGK2LA">https://pan.baidu.com/s/1_UZ72_VXsgM3sItZnGK2LA</a> 密码: cjre</p>
]]></content>
      <categories>
        <category>软件工具</category>
        <category>其他分类</category>
      </categories>
  </entry>
  <entry>
    <title>酷比魔方power M3中文触摸recovery和获取root权限</title>
    <url>/posts/f69a1f40.html</url>
    <content><![CDATA[<p>本教程只适合酷比魔方power M3使用，刷机有风险，操作需谨慎，出问题与本人无关<br>1.本recovery和boot必须通过flashtool线刷才能刷入机器,需要操作者有一定的刷机经验</p>
<p>2.刷入recovery后进入，无法查看data和内置储存是正常现象，安卓5.0后这两个分区官方默认加密，必须刷入破解内核boot后格式化这两个分区，recovery才可以正常查看<br>3.想root的同学只需要刷recovery和boot，将root卡刷包提前复制到内存卡插入机器，进recovery后直接卡刷不会破坏数据<br>4.想要中文的界面的同学，第一次进入设置Setting选择Simplified Chinese，并且这个设置是可以被保存的哦<br>链接: <a href="https://pan.baidu.com/s/1Mp-h7Ty91mbct-DYLckLew">https://pan.baidu.com/s/1Mp-h7Ty91mbct-DYLckLew</a> 密码: 2t7b<br><img src="http://post.332b.com/usr/uploads/2018/03/1471652536.jpg" alt="458836d3d539b6002092dcb1e550352ac65cb71a.jpg" title="458836d3d539b6002092dcb1e550352ac65cb71a.jpg"></p>
<p><img src="http://post.332b.com/usr/uploads/2018/03/2394244304.jpg" alt="c21ed109b3de9c82b6b729896081800a18d843a8.jpg" title="c21ed109b3de9c82b6b729896081800a18d843a8.jpg"></p>
]]></content>
      <categories>
        <category>技术分享</category>
        <category>其他分类</category>
      </categories>
  </entry>
  <entry>
    <title>Javascript  基本使用方法</title>
    <url>/posts/46115975.html</url>
    <content><![CDATA[<p><strong>javascript引入的常见三种方式</strong> 1.行内使用 <code>&lt;input type=&quot;button&quot; name=&quot;button&quot; value=&quot;点击&quot; onclick=&quot;window.alert(&#39;嘻嘻&#39;)&quot;&gt;</code>   2.内部使用</p>
 <input type="button" name="aaa" value="点击" onclick="myfunc()">
<script type="text/javascript">
function myfunc()
{
window.alert('弹出框');
};
</script>

<p>  三.外部引入</p>
<script src="js/test.js"></script>

<p>  常用的一下几种方式引入js代码：</p>
<ol>
<li> 在页面中直接写入<script type="text/javascript">js代码</script>。</li>
<li> 在页面中引入外部文件<script src="xx.js"></script>。</li>
<li> 在js中引入外部js，通过document.wirite(“scr”+”ipt src=’xx.js’&gt;&lt;/scr”+”ipt”&gt;。</li>
<li> 在js中引用其他js片段，document.write(“&lt;scr”+”ipt&gt;alert(xxx)&lt;/scr”+”ipt&gt;”)。</li>
<li> 通过DOM添加：var scr=document.createElement(“script”); scr.src=”xxx.js”;</li>
</ol>
<p>  <strong>javascript输出的四种方式</strong> 一、window.alert()       弹出一个对话框 <code>window.alert(&#39;我是对话框&#39;)</code>   二、innerHTML       操作html里面的元素 <code>&lt;p id=&#39;demo&#39;&gt;我是一个段落&lt;/p&gt;</code> <code>&lt;script&gt;</code> <code>document.getElementById(&quot;demo&quot;).innerHTML = &quot;修改这个段落&quot;;</code> <code>window.alert(document.getElementById(&quot;demo&quot;).innerHTML);</code> <code>//获取这个元素里面的值</code> <code>&lt;/script&gt;</code>   三、document.write()  直接输出内容 <code>&lt;script&gt;document.write(&#39;我是文字&#39;)&lt;/script&gt;</code> <em>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</em>   四、console.log()  输出到控制台 chrome浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 “Console” 菜单，输入的内容会出现在哪里 <code>&lt;script&gt;console.log(&#39;我是文字，请在控制台查看我&#39;);&lt;/script&gt;</code>    </p>
<p>1.当编写 JavaScript 语句时，请留意是否关闭大小写切换键。 函数 <strong>getElementById</strong> 与 <strong>getElementbyID</strong> 是不同的。 同样，变量 <strong>myVariable</strong> 与 <strong>MyVariable</strong> 也是不同的。   2. 单行注释”//“，多行注释以”/*“开始，用”*/“来注释   3.关键字</p>
<p>语句</p>
<p>描述</p>
<p>break</p>
<p>用于跳出循环。</p>
<p>catch</p>
<p>语句块，在 try 语句块执行出错时执行 catch 语句块。</p>
<p>continue</p>
<p>跳过循环中的一个迭代。</p>
<p>do … while</p>
<p>执行一个语句块，在条件语句为 true 时继续执行该语句块。</p>
<p>for</p>
<p>在条件语句为 true 时，可以将代码块执行指定的次数。</p>
<p>for … in</p>
<p>用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</p>
<p>function</p>
<p>定义一个函数</p>
<p>if … else</p>
<p>用于基于不同的条件来执行不同的动作。</p>
<p>return</p>
<p>退出函数</p>
<p>switch</p>
<p>用于基于不同的条件来执行不同的动作。</p>
<p>throw</p>
<p>抛出（生成）错误 。</p>
<p>try</p>
<p>实现错误处理，与 catch 一同使用。</p>
<p>var</p>
<p>声明一个变量。</p>
<p>while</p>
<p>当条件语句为 true 时，执行语句块。</p>
<p>  4.声明变量用var，例如：<code>var beare = &#39;good&#39;;</code>，声明多个变量的方法：<code>var beare = &#39;good&#39;,beis = &#39;bad&#39;;</code> <em>注意不能这样定义多个变量为一个值，这样定义只有benot=1，其他为空值</em> <code>var beare,beis,benot=1;</code>   5.数据类型 数据类型变量声明办法 var carname=new String;       ##字符串 var x=      new Number;     ##数字类型 var y=      new Boolean;     ##布尔类型 var cars=   new Array;      ##数组类型 var person= new Object;      ##对象类型（类似字典） 代码演示：<code>var you123 = new String(&#39;我是字符串&#39;);</code> 对象的值可以通过关键key和属性来访问，假如有代码如下 <code>var person= &#123; firstname : &quot;John&quot;, lastname : &quot;Doe&quot;, id : 5566 &#125;;</code> <code>person.firstname</code>和<code>person[&#39;firstname&#39;]</code>都可以得到“John”这个值 如果函数作为属性存入对象里面，它有一个属性this就是代表这个对象本身，这个是方便再对象自身中引用 假如一个值重新声明变量，它的值是不会改变的，除非再给它重新赋值 如果你在声明变量的时候没有使用var，那么这个变量就会成为window的一个属性，</p>
<p>bbc =  ‘我是字符串’;     //没有使用var可以配置全局属性</p>
<p>document.write(this.bbc);   //获取上面的的字符串</p>
<p>document.write(window.bbc);   //效果一样，等同上面</p>
<p>delete bbc; //无法删除，只能删除var声明的变量</p>
<p>1.通过<code>var str123 = new String(&#39;字符串&#39;);</code> 中的new来声明，是一个对象，而不是一个字符串，和<code>var str123 = &#39;字符串&#39;;</code> 不相等 2.’===‘代表数据和类型绝对相等，string.length可以返回字符串的长度   onload 和  onpageshow  区别 onload : 在元素载入完成后执行的代码，载入缓存不执行 onpageshow：每次载入图片元素后执行的代码，载入缓存依旧会执行 支持onload的标签：<body>, <frame>, <frameset>, <iframe>, <img>, <input type="image">, <link>, <script>, <style> 例如我们在img标签中使用onload标签，就可以判断图片是否载入</p>
<script>
      var loadimage = document.getElementById('loadimageid');
      var loadimageerror = "alert('载入错误')";
      // loadimage.onload="alert('图片载入成功')";
      loadimage.onpageshow=alert('载入图片成功');
</script>

<p>  if…else if…else  判断语句 if：条件一   else if：条件二    else：都不满足，就执行这里 and：符号&amp;&amp;   多个条件拼接 ，必须满足所有条件 or：符号      多个条件拼接，满足其中一个就行了 not：符号!     条件相关的结果</p>
<script>
    var a = 3;
    if (a != 3) {
        window.alert('条件一')
    }
    else if (a = 3) {
        window.alert('条件二')
    }
    else {
        window.alert('都不满足，就执行else')
    }
</script>

<p>  switch…case…default switch是基于不同条件执行不同命令，switch中通常是一个变量，如果满足case就执行case的命令，（）用break隔开，防止满足一次条件，就执后面所有代码）如果不满足就继续向下寻找，如果没找到就默认执行default</p>
<script>
    var a = 9;
    switch (a) {
        case 1:alert('1');
        break;
        case 2:alert('2');
        break;
        default:alert('默认值');
    }
</script>

<p>  for 循环执行某一块的代码 for (a;b;c) { 需要被循环执行的代码 } a 循环执行前执行的代码 b 决定循环执行的条件 c 每次循环执行后执行的代码 实例代码</p>
<script>
    for (var a=1;a<5;a++) {
        document.write('数字'+a+'<br>');
    };
</script>

<p>  for….in 循环 循环一个数组</p>
<script>
    var a = \['a','b','c'\];
    for (var b in a) {
        window.alert(b+'：'+a\[0\]);
    };
</script>

<p>循环一个对象</p>
<script>
    var a = {a1:'a',a2:'b',a3:'c'};
    for (var b in a) {
        window.alert(b+'：'+a\[b\]);
    };
</script>

<p>  while循环</p>
<script>
    var a = 1;
    while (a<5 && a>0) {
        a++;
        window.alert(a);
    }
</script>

<p>  Break 和 Continue 语句 Break：跳出整个循环（可以在switch和循环中使用） Continue：跳出当前循环，去执行下一个循环（只能在循环中使用）   javascript标签 label: statements 通过标签引用，break 语句可用于跳出任何 JavaScript 代码块   NaN和isNaN 判断这个值是不是数字 详细说明：<a href="http://www.w3school.com.cn/jsref/jsref_nan_number.asp">http://www.w3school.com.cn/jsref/jsref_nan_number.asp</a>   在 JavaScript 中有 5 种不同的数据类型： string number boolean object function 3 种对象类型： Object Date Array 2 个不包含任何值的数据类型： null undefined 判断是不是字符串的方法</p>
<script>
    var a = 'aaa';
    if (typeof(a) == 'string') {
        document.write('他是字符串');
    }
    else{
        document.write('他不是字符串');
    };
</script>

<p>  查询对应的构造函数key.constructor “John”.constructor   //function String() { [native code] } 根据它来判断对应的对象类型   数据转换 字符串转换：全局方法String()和value.toString() 1.toString可以将所有类型转换成字符串，但不包括null和undefined 2.String可以将null和undefined转换为字符串，但是没法转进制字符串，例如二进制，八进制，十六进值 String(value);或者value.toString()</p>
<ol>
<li> toExponential() 把对象的值转换为指数计数法。</li>
<li> toFixed() 把数字转换为字符串，结果的小数点后有指定位数的数字。</li>
<li> toPrecision() 把数字格式化为指定的长度。</li>
</ol>
<p>  数字转换：Number() 空字符串会转换成0，如果不是字符串就会转换成NaN Number(value);</p>
<ol>
<li> parseFloat() 解析一个字符串，并返回一个浮点数。</li>
<li> parseInt() 解析一个字符串，并返回一个整数。</li>
</ol>
<p>  一元运算符 + Operator + 可用于将变量转换为数字： 实例 var y = “5”; // y 是一个字符串 var x = + y; // x 是一个数字   将布尔值转换为数字 全局方法 Number() 可将布尔值转换为数字。 Number(false) // 返回 0 Number(true) // 返回 1   布尔类型：Boolean()   javascript正则表达式 var patt = /runoob/i 加i代表不区分大小写   javascript错误 1.try 和 catch是用来处理 try 语句测试代码块的错误。 catch 语句处理错误。 如果try中没有任何错误，就不会执行catch里面的语句   2.throw  自定义错误 如果把 throw 与 try 和 catch 一起使用，那么您能够控制程序流，并生成自定义的错误消息。下面是验证输入的数字 注意：input输入值是字符串，需要用Number格式化成数字</p>
<p>不管输入是否正确，输入框都会再输入后清空。</p>
<p>请输入 5 ~ 10 之间的数字：</p>

<input id="demo" type="text">
<button type="button" onclick="myFunction()">点我</button>

<p id="p01"></p>

<script>
    function myFunction() {
        var message, x;
        message = document.getElementById("p01");
        message.innerHTML = "";
        x = document.getElementById("demo").value;
        try {
            if(x == "") throw "值是空的";
            if(isNaN(x)) throw "值不是一个数字";
            x = Number(x);   //input输入值是字符串，用Number格式化成数字
            if(x > 10) throw "太大";
            if(x < 5) throw "太小";
        }
        catch(err) {
            message.innerHTML = "错误: " + err + ".";
        }
        finally {
            document.getElementById("demo").value = "";
        }
    }
</script>

<p>  3.finally 语句 finally 语句不论之前的 try 和 catch 中是否产生异常都会执行该代码块。 try { … //异常的抛出 } catch(e) { … //异常的捕获与处理 } finally { … //结束处理 }   JS验证表单</p>
<script>
    function fa() {
        return false;   //返回false阻止表单提交
    }
</script>
<form action="#" onsubmit="return fa()">      <!--用return阻止提交-->
    <input type="text">
    <input type="submit">
</form>

<p>js获取表单值 <a href="http://www.runoob.com/js/js-form-validation.html">http://www.runoob.com/js/js-form-validation.html</a>   javascript Json JSON.parse() 用于将一个 JSON 字符串转换为 JavaScript 对象。 JSON.stringify() 用于将 JavaScript 值转换为 JSON 字符串。</p>
<script>
    var asy = \['ad','ac','aqw'\];
    var obj = JSON.stringify(asy);
    document.write(obj)
</script>

<p>  javascript  查找最大的数</p>
<script>
    var ti=\[123,45,73,1048\];
    var i=0,x=ti\[0\];
    for (;ti.length > i;i++) {
        if (x < ti\[i\]){
            x = ti\[i\]
        }
    }
    alert(x)
</script>

<p>  1.在一个函数里面使用this代表整个window对象，除非你在里面嵌套一个函数，这样你在嵌套里面使用this就代表外面包括的这个函数本身 2.函数可以这样调用window.function()   DOM javascript查找html方式 1.javascript 通过tag标签来查找元素，tag来查找元素，他会将这个页面的所有该元素的东西放入一个array数组里面去</p>
<body>
<p>111111</p>
<button onclick="x()">点击</button>
<script>
    function x (){
        x = window.document.getElementsByTagName('p')
        alert(x\[0\].innerHTML)
    }
</script>
</body>

<p>  2.通过id来查找元素 var x=document.getElementById(“intro”);   3.通过类名来查找 var x=document.getElementsByClassName(“intro”);   4.修改html的属性</p>
<p><a href="http://www.baidu.com" id="po">百度</a><br><button onclick="x()">点击</button></p>
<script>
    function x (){
        x = window.document.getElementById('po')
        alert(x.href)
    }
</script>

<p>  5.通过javascript修改css样式</p>
<p><a href="http://www.baidu.com" id="po">百度</a></p>
<script>
        window.document.getElementById('po').style.color = 'red';
</script>

<p>6.HTML DOM EventListener  监听事务</p>
<p><em>element</em>.addEventListener(<em>event, function, useCapture</em>);</p>
<p>第一个参数是事件的类型 (如 “click” 或 “mousedown”). 第二个参数是事件触发后调用的函数。 第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。 addEventListener() 方法允许向同一个元素添加多个事件，且不会覆盖已存在的事件：</p>
<script>
x = document.getElementById("myBtn");
x.addEventListener("click", function(){alert("Hello World!");});
</script>

<p>冒泡事件和事务事件 <a href="https://www.cnblogs.com/christineqing/p/7607113.html">https://www.cnblogs.com/christineqing/p/7607113.html</a>   7.添加和删除、替换html元素 appendChild() 添加元素，添加在末尾</p>
<div id="div1">
</div>
<script>
    var p1 = document.createElement("p");  //创建p元素
    var text = document.createTextNode('这是一段文本！');  //创建文本元素
    p1.appendChild(text);    //将文本元素添加p元素里
    var div1 = document.getElementById('div1');
    div1.appendChild(p1);     //将p1元素添加到div1当中
</script>

<p>  insertBefore()  添加元素，插入指定元素前面</p>
<div id="div1">
    <p id="p2">这是第二段文本，没有js它就是第一行</p>
</div>
<script>
    var p1 = document.createElement("p");  //创建p元素
    var text = document.createTextNode('这是一段文本！');  //创建文本元素
    p1.appendChild(text);    //将文本元素添加p元素里
    var div1 = document.getElementById('div1');
    var p2 = document.getElementById('p2');
    div1.insertBefore(p1,p2)
</script>

<p>  removeChild() 移除已存在的元素</p>
<div id="div1">
    <p id="p1">这是一段文本！</p>
    <p id="p2">这是第二段文本！</p>
</div>
<script>
    var div1 = document.getElementById('div1');
    var p2 = document.getElementById('p2');
    div1.removeChild(p2);
</script>

<p>  replaceChild()  替换 HTML 元素</p>
<div id="div1">
    <p id="p1">这是一段文本！</p>
    <p id="p2">这是第二段文本！</p>
</div>
<script>
    var pdemo = document.createElement("p");  //创建p元素
    var text = document.createTextNode('这是一段特殊文本！');  //创建文本元素
    pdemo.appendChild(text);    //将文本元素添加p元素里
    var div1 = document.getElementById('div1');
    var p2 = document.getElementById('p2');
    div1.replaceChild(pdemo,p2)
</script>

<p>  javascript高级对象 1.遍历一个对象</p>
<div id="div1">
    <p id="p1">这是一段文本！</p>
    <p id="p2">这是第二段文本！</p>
</div>
<button onclick="f()">点击</button>
<script>
    var p2 = document.getElementById('p2');
    var k1 = {
      k1:'我是苹果',
      k2:'我是香蕉',
      k3:'我是栗子'
    };
    function f() {
        for (x in k1) {
            p2.innerHTML +=x+'：'+k1\[x\]+"<br>";
        }
    }
</script>

<p>  2.创建一个对象的三种方式 <a href="https://www.cnblogs.com/dongjc/p/5179561.html">https://www.cnblogs.com/dongjc/p/5179561.html</a>   字符串转为数组</p>
<p id="demo">单击按钮显示数组。</p>
<button onclick="myFunction()">点我</button>
<script>
    function myFunction(){
        var str="a,b,c,d,e,f";
        var n=str.split(",");
        document.getElementById("demo").innerHTML=n\[0\];
    }
</script>

<p>  给变量设置时间（可用于对当前时间做比较）</p>
<p id="demo">单击按钮显示修改后的年月日。</p>
<button onclick="myFunction()">点我</button>
<script>
    function myFunction(){
        var d = new Date();
        d.setFullYear(2020,10,3);
        var x = document.getElementById("demo");
        x.innerHTML=d;
    }
</script>
<p>记住 JavaScript 月数是从0至11。10是11月。</p>

<p>  数组对象 合并一个数组或者多个 array1.concat(array2, array3);   如果布尔对象无初始值或者其值为:</p>
<ol>
<li> 0</li>
<li> -0</li>
<li> null</li>
<li> “”</li>
<li> false</li>
<li> undefined</li>
<li> NaN</li>
</ol>
<p>  window.location.assign和window.location.replace(url) 区别 window.location.assign(url) ： 加载 URL 指定的新的 HTML 文档。 就相当于一个链接，跳转到指定的url，当前页面会转为新页面内容，可以点击后退返回上一个页面。 window.location.replace(url) ： 通过加载 URL 指定的文档来替换当前文档 ，这个方法是替换当前窗口页面，前后两个页面共用一个   三种弹框 警告框 window.alert(“<em>sometext</em>“);   确认框 当你点击 “确认”, 确认框返回 true， 如果点击 “取消”, 确认框返回 false。 window.confirm(“<em>sometext</em>“);   提示框 提示用户输入某个值，可以指定默认值 window.prompt(“<em>sometext</em>“,”<em>defaultvalue</em>“);   计时执行 不间断间隔执行 setInterval() 间隔指定的毫秒数不停地执行指定的代码 window.setInterval(“<em>javascript function</em>“,<em>milliseconds</em>);   停止制作 clearInterval() window.clearInterval(<em>intervalVariable</em>)   指定时间执行    setTimeout() window.setTimeout(“<em>javascript function</em>“, <em>milliseconds</em>);   停止执行 setTimeout() window.setTimeout(“<em>javascript function</em>“, <em>milliseconds</em>);</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Django：高级视图函数</title>
    <url>/posts/1787f2fd.html</url>
    <content><![CDATA[<h3 id="一、method限制提交提交请求的类型"><a href="#一、method限制提交提交请求的类型" class="headerlink" title="一、method限制提交提交请求的类型"></a>一、method限制提交提交请求的类型</h3><p>限制提交请求的模块在django.views.decorators.http，它们分别是</p>
<ol>
<li> require_http_methods限制单种或多种请求</li>
<li> require_GET：只允许GET请求</li>
<li> require_POST：只允许POST请求</li>
</ol>
<p>from django.views.decorators.http import require_http_methods,require_GET,require_POST</p>
<p>在视图函数请的使用方法，就是像使用装饰器一样</p>
<p>####@require_http_methods([‘GET’,’POST’])   可以同时允许多种请求<br>@require_GET<br>def index(request):<br>    front = Front.objects.all()<br>    return render(request,’index.html’,context={“front”:front})</p>
<p>在一个视图函数中根据不同的请求来执行命令方法</p>
<p>def add_article(request):<br>    if request.method == ‘GET’:<br>        return render(request,’add.html’)<br>    else:<br>        title = request.POST.get(“title”)<br>        content = request.POST.get(“content”)<br>        Front.objects.create(title=title, content=content)<br>        return HttpResponse(‘添加成功’)</p>
<h3 id="二、重定向和页面跳转"><a href="#二、重定向和页面跳转" class="headerlink" title="二、重定向和页面跳转"></a>二、重定向和页面跳转</h3><p>重定向分为301永久性重定向和302暂时性重定向，重定向的模块在django.shortcuts模块中</p>
<ol>
<li> redirect可以设置你要跳转的URL，这个是302暂时性重定向</li>
<li> reverse是反转和引用项目urls.py中，已经设置了name属性的网址</li>
</ol>
<p>from django.shortcuts import redirect,reverse</p>
<p>在视图函数中是使用方法如下</p>
<p>def index(request):<br>    return redirect(reverse(‘add’))      引用反转URL<br>   #return redirect(‘<a href="https://post.332b.com/&#39;">https://post.332b.com/&#39;</a>)   直接写死URL</p>
<h3 id="三、WSGIRequest对象"><a href="#三、WSGIRequest对象" class="headerlink" title="三、WSGIRequest对象"></a>三、WSGIRequest对象</h3><p>1.path：请求网址的路径，get_full_path：会带有查询查询参数的full，get_raw_uri：是完整的URL，get_host：域名加上端口号 例如<a href="https://blog.csdn.net/goodfav/?id=1111">https://blog.csdn.net/goodfav/?id=1111</a></p>
<ol>
<li> path：/goodfav/</li>
<li> get_full_path：/goodfav/?id=1111</li>
<li> get_raw_uri：<a href="https://blog.csdn.net/goodfav/?id=1111">https://blog.csdn.net/goodfav/?id=1111</a></li>
<li> get_host：blog.csdn.net:443</li>
</ol>
<p>def index(request):<br>    print(request.get_raw_uri())<br>    return HttpResponse(‘首页’)</p>
<p>2.method：获取当前的请求类型，用法参照（一） 3.GET：QueruDict对象，包含查询字符串，以字典的形式获取，例如<a href="https://blog.csdn.net/?id=1111%E5%90%8E%E9%9D%A2%E7%9A%84id=1111">https://blog.csdn.net/?id=1111后面的id=1111</a> 4.POST：QueruDict对象，包含所有以POST上传的数据 5.FILES：QueruDict对象，包含所有的上传文件 6.COOKIES：一个标准的字典类型，包含所有的cookies，键值对都是字符串类型 7.session：一个类似字典的对象，用来操作服务器上的session 8.META：存储客户端发送的所有header信息 推荐META判断IP方式如下</p>
<p>def index(request):<br>    if request.META.has_key(‘HTTP_X_FORWARDED_FOR’):<br>        ip = request.META[‘HTTP_X_FORWARDED_FOR’]<br>    else:<br>        ip = request.META[‘REMOTE_ADDR’]</p>
<p>is_secure()：布尔类型，判断当前请求是否是https is_ajax()：布尔类型，根据请求头是否有X-Request-With:XMLHttpRequest来判断是否采用的ajax请求</p>
<h3 id="QueryDict对象"><a href="#QueryDict对象" class="headerlink" title="QueryDict对象"></a>QueryDict对象</h3><p>request.GET和request.POST都是QueryDict对象，它有两种用法，一种是get方法，另外一种是getlist方法 1.get：用来获取key的值，如果没有key则会返回None 2.getlist：如果浏览器上传一个key的对个值，同过这个方法获取就会返回一个列表</p>
<h3 id="HttpResponse-对象"><a href="#HttpResponse-对象" class="headerlink" title="HttpResponse 对象"></a>HttpResponse 对象</h3><p>Django服务器接收到客户端发送过来的请求后，会将提交上来的这些数据封装成一个HttpRequest对象传给视图函数。那么视图函数在处理完相关的逻辑后，也需要返回一个响应给浏览器。而这个响应，我们必須返回HttpResponseBase或者他的子类的对象。而HttpResponse则是HttpResponseBase用得最多的子类。那么接下来就来介绍一下HttpResponse及其子类。</p>
<h4 id="常用属性："><a href="#常用属性：" class="headerlink" title="常用属性："></a>常用属性：</h4><p>1. content:返回的内容。 2. status_code:返回的HTTP响应状态码。 3. content.type:返回的数据的MIME类型，默认为text/html ◊湖贫器会根据这个属性，来显示数据。如果是text/html，那么 就会解析这个字符串，如果text/plain ,那么就会显示一个纯文本。常用的Content-Type如下：</p>
<ol>
<li> text/html (默认的，html文件）</li>
<li> text/plain (纯文本）</li>
<li> text/css (css文件〉</li>
<li> text/javascript (js文件）</li>
<li> multipart/form-data (文件提交）</li>
<li> application/json (json传输)</li>
<li> application/xml (xml文件）</li>
</ol>
<p>4 .设置请求头：response[‘X-Acccss-Token’] = ’xxxx’。</p>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法:"></a>常用方法:</h4><p>1.set_cookie：用来设置cookie信息，后面讲到授权的时候会看重讲到。 2.delete_cookie：用来删除 cookie 信息。 3.write： HttpResponse是一个类似于文件的对象（content属性，也就是直接在网页这个插入内容）</p>
<p>def index(request):<br>    response = HttpResponse(‘我是文字’,content_type=’text/plain;charset=utf-8’)   ###将文本设置成UTF-8编码<br>    response.status_code = 400     ####状态码为400<br>    response.write(‘，后加入文字’)<br>    return response</p>
<h3 id="JsonResponse-对象"><a href="#JsonResponse-对象" class="headerlink" title="JsonResponse 对象"></a>JsonResponse 对象</h3><p>将字典对象dumps成字符串，通过HttpResponse传给浏览器</p>
<p>def index(request):<br>    person = {<br>        ‘username’:’pingguo’,<br>        ‘age’:18,<br>        ‘height’:180<br>    }<br>    ######person_str = json.dumps(person)      ###import json<br>    #####response = HttpResponse(person_str,content_type=’application/json’)<br>    response = JsonResponse(person)      ###这一行等于上面两行<br>    return response</p>
<p>如果对象是一个列表的话，就只能这样的传</p>
<p>def index(request):<br>    persons = [‘知了’,’苹果’,’香蕉’]<br>    response = JsonResponse(persons,safe=False)<br>    return response</p>
<p>这里再来对每个部分的代码进行解释： 1 •我们在初始化HttpResponse的时候,指定了Content-Type为text/csv,这将告诉浏览器，这是一个csv格式的文件而不是一 个HTML格式的文件，如果用默认值，默认值就是html，那么浏览器将把csv格式的文件按照html格式输出,这肯定不是我们想要的。 2. 第二个我们还在response中添加一个Content-Disposition头，这个东西是用来告诉浏览器该如何处理这个文件，我们给这个头 的值设罝为attachment;,那么浏览器将不会对这个文件进行显示，而是作为附件的形式下载，第二 个filename=Msomefilename.csv”是用来指定这个csv文件的名字。 3. 我们使用csv模快的writer方法，将相应的数据写入到response中。</p>
<h3 id="CSV文件下载和大型CSV文件处理"><a href="#CSV文件下载和大型CSV文件处理" class="headerlink" title="CSV文件下载和大型CSV文件处理"></a>CSV文件下载和大型CSV文件处理</h3><p>定义一个普通的csv文件下载，通过python内置CSV模块来实现</p>
<p>def index(request):<br>    response = HttpResponse(content_type=’text/csv’)<br>    response[‘Content-Disposition’] = “attachment;filename=’abc.csv’”     ###处理这个Content，作为附件下载并且文件名为abc.csv<br>    # with open(‘xx.csv’,’w’) as fp:<br>    #     csv.writer(fp)<br>    write = csv.writer(response)   ##这个等于上面两行代码<br>    write.writerow([‘username’,’简单’])<br>    write.writerow([‘age’,18])<br>    return response</p>
<p>定义一个普通的csv文件下载，通过Django模板来实现</p>
<p>from django.template import loader,Context<br>def reindex(request):<br>    response = HttpResponse(content_type=’text/csv’)<br>    response[‘Content-Disposition’] = “attachment;filename=’abc.csv’”<br>    context = {<br>        ‘row’:[<br>            [‘username’,’witt’],<br>            [‘age’,18],<br>        ]<br>    }<br>    template = loader.get_template(‘abc.txt’)    ###获取一下abc.txt模板<br>    csv_template = template.render(context=context)<br>    response.content = csv_template<br>    return response</p>
<p>template目录下的abc.txt代码，如果反复出现空行和文字交错，请将{ { row.0 } },{ { row.1 } }放在首行</p>
<p>{ % for row in rows %}<br>{ { row.0 } },{ { row.1 } }<br>{ % endfor %}</p>
<h3 id="关于StreamingHttpResponse"><a href="#关于StreamingHttpResponse" class="headerlink" title="关于StreamingHttpResponse"></a>关于StreamingHttpResponse</h3><p>这个类是专门用来处理流数据的。使得在处理一些大型文件的时候，不会因为服务器处理时间过长而到时连接超时。这个类不是继承 自HttpResponse，并且跟HttpResponse对比有以下几点区别： 1•这个类没有属性content ,相反是streaming_content。 2. 这个类的streaming_content必须是一个可以迭代的对象。 3. 这个类没有write方法，如果给这个类的对象写入数据将会报错， 注意：StreamingHttpResponse会启动一个进程来和客户端保持长连接，所以会很消耗资源口所以如果不是特殊要求，尽量少用这种 方法。 下面就是标准的示范</p>
<p>def relindex(request):<br>    response = StreamingHttpResponse(content_type=’text/csv’)<br>    response[‘Content-Disposition’] = “attachment;filename=’big.csv’”<br>    rows = (“Row {},{}\n”.format(row,row) for row in range(0,100000000))<br>    #response.streaming_content = (‘username,age\n’,’zhiliao,18’)<br>    response.streaming_content = rows<br>    return response</p>
<p>这个就是一个相反的结果，等待时间长</p>
<p>def relindex(request):<br>    response = HttpResponse(content_type=’text/csv’)<br>    response[‘Content-Disposition’] = “attachment;filename=’big.csv’”<br>    writer = csv.writer(response)      ####这里调用了csv模块就变慢了<br>    for row in range(0,10000000):<br>        writer.writerow([‘Row {}’.format(row),’{}’.format(row)])<br>    #####无用代码response.streaming_content = (‘username,age\n’,’zhiliao,18’)<br>    #####无用代码response.streaming_content = rows<br>    return response</p>
<p>下面就是一个 View django.views.generic.base.View是主要的类视图，所有的类视图都是继承自他，如果我们写自己的类视图，也可以继承自他。然后再根据当前请求method ,来实现不同的方法。比如这个视图只能使用get的方式来请求，那么就可以在这个类中定义get(self,request,*args,**kwargs)方法。以此类推，如果只需要实现post方法，那么就只需要在类中实 现 post(self, equest,*args,**kwargs)</p>
<p>from django.views.generic import View<br>class BookListView(View):<br>    def get(self,request,*args,**kwargs):<br>        return HttpResponse(‘book list’)</p>
<p>在URL中要这样设置，要通过as_view()来转换</p>
<p>urlpatterns = [<br>    path(‘book/‘,BookListView.as_view())<br>]</p>
<p>除了 get 方法，View 还支持以下方法[‘get’,’post’,’put’,’patch’,’delete’,’head’,’options’,’trace’] 如果用户访问了View中没有定义的方法。比如你的类视图只支持get方法，而出现了 post方法，那么就会把这个请求转发 给 http_raethod_not_allowed(request,*args,**kwargs)示例代碎如下：</p>
<p>from django.views.generic import View<br>class BookListView(View):<br>    def get(self,request,*args,**kwargs):<br>        return HttpResponse(‘book list’)<br>    def http_method_not_allowed(self, request, *args, **kwargs):<br>        return HttpResponse(‘不支持其他请求’)</p>
<p>不管是post还是get请求，或者是404错误等等都会走dispatch(request, *args, **kwargs)</p>
<p>from django.views.generic import View<br>class BookListView(View):<br>    def get(self,request,*args,**kwargs):<br>        return HttpResponse(‘book list’)<br>    def dispatch(self, request, *args, **kwargs):<br>        print(“你好”)<br>        return super(BookListView,self).dispatch(request,*args, **kwargs)<br>    def http_method_not_allowed(self, request, *args, **kwargs):<br>        return HttpResponse(‘不支持其他请求’)</p>
<p>TemplateView模板 用来映射静态模板，一般都比较推荐使用这个，两行代码就可以搞定一个静态模板映射，template_name指定静态模板路径</p>
<p>from django.views.generic import TemplateView<br>path(‘’, TemplateView.as_view(template_name=’about.html’)),</p>
<p>他有一个上下文参数，get_context_data</p>
<p>from django.views.generic import View,TemplateView<br>class About(TemplateView):<br>    template_name = ‘about.html’<br>    def get_context_data(self, **kwargs):<br>        content= {<br>            ‘hp’:’078312345678’<br>        }<br>        return content<br>urlpatterns = [<br>    path(‘’, About.as_view()),<br>]</p>
<p>然后在模板about.html中动态显示</p>
<body>
这个是主页{ { hp } }
</body>

<h3 id="Paginator-和-Page-类："><a href="#Paginator-和-Page-类：" class="headerlink" title="Paginator 和 Page 类："></a>Paginator 和 Page 类：</h3><p>Paginator和Page类都是用来做分页的。他们在Django中的路径 为django.core.paginator.Paginator和django.core.paginator.Page,以下对这两个类的末用厲性和方法做解释： Paginator常用方法和方法: 1. count :总共有多少条数据。 2. num_pages :总共有多少页 3. page.range :页面的区间。比如有三页，那么就range(1,4) Page常用属性和方法： 1 has_next :是否还有下一页。 2. has_previous :是否还有上一页。 3. next_page_number :下一页的页码。 4. previous_page_number :上—页的页码 5. number :当前页。 6. start_index :当前这一页的第一条鈐据的索引值。 7. end_index :当前这一页的最后一条数据的索引值。</p>
<p>class ArticleListView(ListView):<br>    model = Article    ###对应的模块<br>    template_name = ‘list.html’    ####对应的模板<br>    paginate_by = 10        ###没页显示数量<br>    context_object_name = ‘articles’   ####展示在模板中的变量名字<br>    ordering = ‘create_time’    ###排序规则<br>    page_kwarg = ‘p’       ####翻页参数名称,不设置的话就是page</p>
<pre><code>def get\_context\_data(self, \*\*kwargs):
    context = super(ArticleListView, self).get\_context\_data(\*\*kwargs)
    # context\[&#39;username&#39;\] = &#39;apple&#39;
    paginator = context.get(&#39;paginator&#39;)   ###获取pagintor属性
    page\_obj = context.get(&#39;page\_obj&#39;)
    print(&#39;\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*&#39;\*3)
    print(paginator.count)      ####获取数据数量
    print(paginator.num\_pages)   ####获取数据页数
    print(paginator.page\_range)  ####获取页数的区间，例如range(1,22)
    print(page\_obj.has\_next())    ####判断是否有下一页
    print(page\_obj.has\_previous())    ####判断是否有上一页
    print(page\_obj.next\_page\_number())   ####返回下一页的页码，如果没有值，会报错
    print(page\_obj.previous\_page\_number())   ####返回上一页的页码，同上
    print(page\_obj.number)     ####获取当前页码
    print(page\_obj.start\_index())    ####返回当前页的第一个索引值
    print(page\_obj.end\_index())   ####返回当前页的最后一个索引值
    print(&#39;\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*&#39;\*3)
    return context
#def get\_queryset(self):
    #return Article.objects.filter(id\_\_lte=9)   ####过滤文章
</code></pre>
<p>在模板list.html中显示</p>
<p>{ % for foo in articles %}</p>
<li>{ { foo.title } }</li>
{ % endfor %}

<p>一个分页算法的实例</p>
<p>from django.shortcuts import render<br>from .models import Article<br>from django.http import HttpResponse<br>from django.views.generic import ListView</p>
<p>def add_artilcle(request):<br>    articles = []<br>    for x in range(0,102):<br>        article = Article(title=’标题：%s’%x,content=’内容：%s’%x)<br>        articles.append(article)<br>    Article.objects.bulk_create(articles)<br>    return HttpResponse(‘执行成功’)</p>
<p>class ArticleListView(ListView):<br>    model = Article    ###对应的模块<br>    template_name = ‘html2.html’    ####对应的模板<br>    paginate_by = 10        ###没页显示数量<br>    context_object_name = ‘articles’   ####展示在模板中的变量名字<br>    ordering = ‘create_time’    ###排序规则<br>    page_kwarg = ‘p’       ####翻页参数名称,不设置的话就是page</p>
<pre><code>def get\_context\_data(self, \*\*kwargs):
    context = super(ArticleListView, self).get\_context\_data(\*\*kwargs)
    # context\[&#39;username&#39;\] = &#39;apple&#39;
    paginator = context.get(&#39;paginator&#39;)   ###获取pagintor属性
    page\_obj = context.get(&#39;page\_obj&#39;)
    #print(context)
    pagination\_data = self.get\_paginator\_data(paginator,page\_obj)
    context.update(pagination\_data)       ####将get\_paginator\_data添加到context
    # print(&#39;\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*&#39;\*3)
    # print(paginator.count)      ####获取数据数量
    # print(paginator.num\_pages)   ####获取数据页数
    # print(paginator.page\_range)  ####获取页数的区间，例如range(1,22)
    # print(page\_obj.has\_next())    ####判断是否有下一页
    # print(page\_obj.has\_previous())    ####判断是否有上一页
    # print(page\_obj.next\_page\_number())   ####返回下一页的页码，如果没有值，会报错
    # print(page\_obj.previous\_page\_number())   ####返回上一页的页码，同上
    # print(page\_obj.number)     ####获取当前页码
    # print(page\_obj.start\_index())    ####返回当前页的第一个索引值
    # print(page\_obj.end\_index())   ####返回当前页的最后一个索引值
    # print(&#39;\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*&#39;\*3)
    return context
def get\_paginator\_data(self,paginator,page\_obj,around\_count=2):
    current\_page = page\_obj.number
    sum\_pages = paginator.num\_pages
    print(sum\_pages)
    left\_pages\_start = False
    right\_pages\_end= False
    if current\_page &lt;= around\_count+1:
        left\_pages = range(1,current\_page)
    else:
        left\_pages\_start = True
        left\_pages = range(current\_page-around\_count, current\_page)
        #print(left\_pages)
    if sum\_pages - current\_page &gt;= around\_count:
        right\_pages\_end = True
        right\_pages = range(current\_page+1,current\_page+around\_count+1)
    else:
        right\_pages = range(current\_page+1,sum\_pages+1)
    # if current\_page &gt;= sum\_pages - around\_count - 1:
    #     right\_pages = range(current\_page+1,sum\_pages+1)
    #     print(right\_pages)
    # else:
    #     right\_pages = range(current\_page+1,current\_page+around\_count+1)
    print(right\_pages)
    return &#123;
        &#39;left\_pages&#39;:left\_pages,
        &#39;right\_pages&#39;:right\_pages,
        &#39;current\_page&#39;:current\_page,
        &#39;left\_pages\_start&#39;:left\_pages\_start,
        &#39;right\_pages\_end&#39;:right\_pages\_end
    &#125;
#def get\_queryset(self):
    #return Article.objects.filter(id\_\_lte=9)   ####过滤文章
</code></pre>
<h1 id="Create-your-views-here"><a href="#Create-your-views-here" class="headerlink" title="Create your views here."></a>Create your views here.</h1><p>分页算法在模板中的应用</p>
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
</head>
<body>
<ul>
{ {    展示文章} }
    { % for article in articles %}
        <li>{ { article.content } }</li>
    { % endfor %}
    <ul class="pagination">
{ {        上一页} }
        { % if page\_obj.has\_previous %}
            <li><a href="{ % url 'index' %}?p={ { page\_obj.previous\_page\_number } }">上一页</a></li>
        { % else %}
            <li class="disabled"><a href="#">上一页</a></li>
        { % endif %}
{ {        返回第一页} }
        { % if left\_pages\_start %}
            <li><a href="{ % url 'index' %}?p=1">1</a></li>
            <li><a href="javascript:void(0);">...</a></li>
        { % endif %}
{ {        左边页码} }
        { % for left\_page in left\_pages %}
            <li><a href="{ % url 'index' %}?p={ { left\_page } }">{ { left\_page } }</a></li>
        { % endfor %}
{ {        中间页码} }
        <li class="active"><a href="{ % url 'index' %}?p={ { current\_page } }">{ { current\_page } }</a></li>
{ {        右边页码} }
            { % for right\_page in right\_pages %}
                <li><a href="{ % url 'index' %}?p={ { right\_page } }">{ { right\_page } }</a></li>
            { % endfor %}
{ {        返回最后一页} }
        { % if right\_pages\_end %}
            <li><a href="javascript:void(0);">...</a></li>
            <li><a href="{ % url 'index' %}?p={ { paginator.num\_pages } }">{ { paginator.num\_pages } }</a></li>
        { % endif %}
{ {        下一页} }
        { % if page\_obj.has\_next %}
            <li><a href="{ % url 'index' %}?p={ { page\_obj.next\_page\_number } }">下一页</a></li>
        { % else %}
            <li class="disabled"><a href="#">下一页</a></li>
        { % endif %}
    </ul>
</ul>
</body>
</html>

<p>给类视图添加装饰器</p>
<p>from django.http import HttpResponse<br>from django.views import View<br>from django.utils.decorators import method_decorator<br>def login_required(func):<br>    def wrapper(request,*args,**kwargs):<br>        username = request.GET.get(‘username’)<br>        if username:<br>            return func(request,*args,**kwargs)<br>        else:<br>            return redirect(reverse(‘login’))<br>    return wrapper</p>
<p>@method_decorator(login_required,name=’dispatch’)<br>class ProfileView(View):<br>    def get(self,request):<br>        return HttpResponse(‘用户界面’)<br>def login(request):<br>    return HttpResponse(“登陆页面”)</p>
<p>状态码错误处理 • 404 :服务器没有指定的Ud。 • 403 :没有权限访问相关的数据。 • 405 :请求的method错误。 • 400 : bad request ,请求的参数错误。 • 500 :服务器内部错误，一般是代码出bug了。 • 502 : 一般部署的时候见得比较多，一般是nginx启幼了，然后uwsgi有问题。 自定义错误模板： 在碰到比如404 , 500错误的时候，想要返回自己定义的模板。那么可以直接在templates文件夹下创建相应错误代码的html摸板文件。那么以后在发生相应错误后，会将指定的模板返回回去。 —–templates –404.html –403.html 错误处理的解决方案： 对于404和500这种自动抛出的错误。我们可以直接在templates文件夹下新建相应错误代码的模板文件。而对于其他的错误，我们可以专门定义一个APP，用来处理这些错误。</p>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
</search>
